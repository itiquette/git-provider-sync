// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	git "github.com/go-git/go-git/v5"
	mock "github.com/stretchr/testify/mock"

	transport "github.com/go-git/go-git/v5/plumbing/transport"
)

// GitLibOperation is an autogenerated mock type for the GitLibOperation type
type GitLibOperation struct {
	mock.Mock
}

type GitLibOperation_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLibOperation) EXPECT() *GitLibOperation_Expecter {
	return &GitLibOperation_Expecter{mock: &_m.Mock}
}

// CreateRemote provides a mock function with given fields: ctx, repo, name, urls
func (_m *GitLibOperation) CreateRemote(ctx context.Context, repo *git.Repository, name string, urls []string) error {
	ret := _m.Called(ctx, repo, name, urls)

	if len(ret) == 0 {
		panic("no return value specified for CreateRemote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Repository, string, []string) error); ok {
		r0 = rf(ctx, repo, name, urls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitLibOperation_CreateRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRemote'
type GitLibOperation_CreateRemote_Call struct {
	*mock.Call
}

// CreateRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *git.Repository
//   - name string
//   - urls []string
func (_e *GitLibOperation_Expecter) CreateRemote(ctx interface{}, repo interface{}, name interface{}, urls interface{}) *GitLibOperation_CreateRemote_Call {
	return &GitLibOperation_CreateRemote_Call{Call: _e.mock.On("CreateRemote", ctx, repo, name, urls)}
}

func (_c *GitLibOperation_CreateRemote_Call) Run(run func(ctx context.Context, repo *git.Repository, name string, urls []string)) *GitLibOperation_CreateRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Repository), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *GitLibOperation_CreateRemote_Call) Return(_a0 error) *GitLibOperation_CreateRemote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitLibOperation_CreateRemote_Call) RunAndReturn(run func(context.Context, *git.Repository, string, []string) error) *GitLibOperation_CreateRemote_Call {
	_c.Call.Return(run)
	return _c
}

// FetchBranches provides a mock function with given fields: ctx, repo, auth, name
func (_m *GitLibOperation) FetchBranches(ctx context.Context, repo *git.Repository, auth transport.AuthMethod, name string) error {
	ret := _m.Called(ctx, repo, auth, name)

	if len(ret) == 0 {
		panic("no return value specified for FetchBranches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Repository, transport.AuthMethod, string) error); ok {
		r0 = rf(ctx, repo, auth, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitLibOperation_FetchBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBranches'
type GitLibOperation_FetchBranches_Call struct {
	*mock.Call
}

// FetchBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *git.Repository
//   - auth transport.AuthMethod
//   - name string
func (_e *GitLibOperation_Expecter) FetchBranches(ctx interface{}, repo interface{}, auth interface{}, name interface{}) *GitLibOperation_FetchBranches_Call {
	return &GitLibOperation_FetchBranches_Call{Call: _e.mock.On("FetchBranches", ctx, repo, auth, name)}
}

func (_c *GitLibOperation_FetchBranches_Call) Run(run func(ctx context.Context, repo *git.Repository, auth transport.AuthMethod, name string)) *GitLibOperation_FetchBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Repository), args[2].(transport.AuthMethod), args[3].(string))
	})
	return _c
}

func (_c *GitLibOperation_FetchBranches_Call) Return(_a0 error) *GitLibOperation_FetchBranches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitLibOperation_FetchBranches_Call) RunAndReturn(run func(context.Context, *git.Repository, transport.AuthMethod, string) error) *GitLibOperation_FetchBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorktree provides a mock function with given fields: ctx, repo
func (_m *GitLibOperation) GetWorktree(ctx context.Context, repo *git.Repository) (*git.Worktree, error) {
	ret := _m.Called(ctx, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetWorktree")
	}

	var r0 *git.Worktree
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Repository) (*git.Worktree, error)); ok {
		return rf(ctx, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *git.Repository) *git.Worktree); ok {
		r0 = rf(ctx, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Worktree)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *git.Repository) error); ok {
		r1 = rf(ctx, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitLibOperation_GetWorktree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorktree'
type GitLibOperation_GetWorktree_Call struct {
	*mock.Call
}

// GetWorktree is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *git.Repository
func (_e *GitLibOperation_Expecter) GetWorktree(ctx interface{}, repo interface{}) *GitLibOperation_GetWorktree_Call {
	return &GitLibOperation_GetWorktree_Call{Call: _e.mock.On("GetWorktree", ctx, repo)}
}

func (_c *GitLibOperation_GetWorktree_Call) Run(run func(ctx context.Context, repo *git.Repository)) *GitLibOperation_GetWorktree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Repository))
	})
	return _c
}

func (_c *GitLibOperation_GetWorktree_Call) Return(_a0 *git.Worktree, _a1 error) *GitLibOperation_GetWorktree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitLibOperation_GetWorktree_Call) RunAndReturn(run func(context.Context, *git.Repository) (*git.Worktree, error)) *GitLibOperation_GetWorktree_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx, path
func (_m *GitLibOperation) Open(ctx context.Context, path string) (*git.Repository, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *git.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*git.Repository, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *git.Repository); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitLibOperation_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type GitLibOperation_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *GitLibOperation_Expecter) Open(ctx interface{}, path interface{}) *GitLibOperation_Open_Call {
	return &GitLibOperation_Open_Call{Call: _e.mock.On("Open", ctx, path)}
}

func (_c *GitLibOperation_Open_Call) Run(run func(ctx context.Context, path string)) *GitLibOperation_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitLibOperation_Open_Call) Return(_a0 *git.Repository, _a1 error) *GitLibOperation_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitLibOperation_Open_Call) RunAndReturn(run func(context.Context, string) (*git.Repository, error)) *GitLibOperation_Open_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultBranch provides a mock function with given fields: ctx, repo, branchName
func (_m *GitLibOperation) SetDefaultBranch(ctx context.Context, repo *git.Repository, branchName string) error {
	ret := _m.Called(ctx, repo, branchName)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Repository, string) error); ok {
		r0 = rf(ctx, repo, branchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitLibOperation_SetDefaultBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultBranch'
type GitLibOperation_SetDefaultBranch_Call struct {
	*mock.Call
}

// SetDefaultBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *git.Repository
//   - branchName string
func (_e *GitLibOperation_Expecter) SetDefaultBranch(ctx interface{}, repo interface{}, branchName interface{}) *GitLibOperation_SetDefaultBranch_Call {
	return &GitLibOperation_SetDefaultBranch_Call{Call: _e.mock.On("SetDefaultBranch", ctx, repo, branchName)}
}

func (_c *GitLibOperation_SetDefaultBranch_Call) Run(run func(ctx context.Context, repo *git.Repository, branchName string)) *GitLibOperation_SetDefaultBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Repository), args[2].(string))
	})
	return _c
}

func (_c *GitLibOperation_SetDefaultBranch_Call) Return(_a0 error) *GitLibOperation_SetDefaultBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitLibOperation_SetDefaultBranch_Call) RunAndReturn(run func(context.Context, *git.Repository, string) error) *GitLibOperation_SetDefaultBranch_Call {
	_c.Call.Return(run)
	return _c
}

// WorktreeStatus provides a mock function with given fields: ctx, wt
func (_m *GitLibOperation) WorktreeStatus(ctx context.Context, wt *git.Worktree) error {
	ret := _m.Called(ctx, wt)

	if len(ret) == 0 {
		panic("no return value specified for WorktreeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Worktree) error); ok {
		r0 = rf(ctx, wt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitLibOperation_WorktreeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorktreeStatus'
type GitLibOperation_WorktreeStatus_Call struct {
	*mock.Call
}

// WorktreeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - wt *git.Worktree
func (_e *GitLibOperation_Expecter) WorktreeStatus(ctx interface{}, wt interface{}) *GitLibOperation_WorktreeStatus_Call {
	return &GitLibOperation_WorktreeStatus_Call{Call: _e.mock.On("WorktreeStatus", ctx, wt)}
}

func (_c *GitLibOperation_WorktreeStatus_Call) Run(run func(ctx context.Context, wt *git.Worktree)) *GitLibOperation_WorktreeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Worktree))
	})
	return _c
}

func (_c *GitLibOperation_WorktreeStatus_Call) Return(_a0 error) *GitLibOperation_WorktreeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitLibOperation_WorktreeStatus_Call) RunAndReturn(run func(context.Context, *git.Worktree) error) *GitLibOperation_WorktreeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitLibOperation creates a new instance of GitLibOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitLibOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitLibOperation {
	mock := &GitLibOperation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
