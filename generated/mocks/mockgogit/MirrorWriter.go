// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	interfaces "itiquette/git-provider-sync/internal/interfaces"

	mock "github.com/stretchr/testify/mock"

	model "itiquette/git-provider-sync/internal/model"
)

// MirrorWriter is an autogenerated mock type for the MirrorWriter type
type MirrorWriter struct {
	mock.Mock
}

type MirrorWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MirrorWriter) EXPECT() *MirrorWriter_Expecter {
	return &MirrorWriter_Expecter{mock: &_m.Mock}
}

// Pull provides a mock function with given fields: ctx, opt
func (_m *MirrorWriter) Pull(ctx context.Context, opt model.PullOption) error {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PullOption) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MirrorWriter_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MirrorWriter_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx context.Context
//   - opt model.PullOption
func (_e *MirrorWriter_Expecter) Pull(ctx interface{}, opt interface{}) *MirrorWriter_Pull_Call {
	return &MirrorWriter_Pull_Call{Call: _e.mock.On("Pull", ctx, opt)}
}

func (_c *MirrorWriter_Pull_Call) Run(run func(ctx context.Context, opt model.PullOption)) *MirrorWriter_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PullOption))
	})
	return _c
}

func (_c *MirrorWriter_Pull_Call) Return(_a0 error) *MirrorWriter_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MirrorWriter_Pull_Call) RunAndReturn(run func(context.Context, model.PullOption) error) *MirrorWriter_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, repository, opt
func (_m *MirrorWriter) Push(ctx context.Context, repository interfaces.GitRepository, opt model.PushOption) error {
	ret := _m.Called(ctx, repository, opt)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.GitRepository, model.PushOption) error); ok {
		r0 = rf(ctx, repository, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MirrorWriter_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MirrorWriter_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - repository interfaces.GitRepository
//   - opt model.PushOption
func (_e *MirrorWriter_Expecter) Push(ctx interface{}, repository interface{}, opt interface{}) *MirrorWriter_Push_Call {
	return &MirrorWriter_Push_Call{Call: _e.mock.On("Push", ctx, repository, opt)}
}

func (_c *MirrorWriter_Push_Call) Run(run func(ctx context.Context, repository interfaces.GitRepository, opt model.PushOption)) *MirrorWriter_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.GitRepository), args[2].(model.PushOption))
	})
	return _c
}

func (_c *MirrorWriter_Push_Call) Return(_a0 error) *MirrorWriter_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MirrorWriter_Push_Call) RunAndReturn(run func(context.Context, interfaces.GitRepository, model.PushOption) error) *MirrorWriter_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMirrorWriter creates a new instance of MirrorWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMirrorWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MirrorWriter {
	mock := &MirrorWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
