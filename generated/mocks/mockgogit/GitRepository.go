// SPDX-FileCopyrightText: 2025 Josef Andersson
//
// SPDX-License-Identifier: EUPL-1.2

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	git "github.com/go-git/go-git/v5"

	mock "github.com/stretchr/testify/mock"

	model "itiquette/git-provider-sync/internal/model"
)

// GitRepository is an autogenerated mock type for the GitRepository type
type GitRepository struct {
	mock.Mock
}

type GitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GitRepository) EXPECT() *GitRepository_Expecter {
	return &GitRepository_Expecter{mock: &_m.Mock}
}

// CreateRemote provides a mock function with given fields: name, url, isMirror
func (_m *GitRepository) CreateRemote(name string, url string, isMirror bool) error {
	ret := _m.Called(name, url, isMirror)

	if len(ret) == 0 {
		panic("no return value specified for CreateRemote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(name, url, isMirror)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitRepository_CreateRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRemote'
type GitRepository_CreateRemote_Call struct {
	*mock.Call
}

// CreateRemote is a helper method to define mock.On call
//   - name string
//   - url string
//   - isMirror bool
func (_e *GitRepository_Expecter) CreateRemote(name interface{}, url interface{}, isMirror interface{}) *GitRepository_CreateRemote_Call {
	return &GitRepository_CreateRemote_Call{Call: _e.mock.On("CreateRemote", name, url, isMirror)}
}

func (_c *GitRepository_CreateRemote_Call) Run(run func(name string, url string, isMirror bool)) *GitRepository_CreateRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *GitRepository_CreateRemote_Call) Return(_a0 error) *GitRepository_CreateRemote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitRepository_CreateRemote_Call) RunAndReturn(run func(string, string, bool) error) *GitRepository_CreateRemote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRemote provides a mock function with given fields: name
func (_m *GitRepository) DeleteRemote(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRemote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GitRepository_DeleteRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRemote'
type GitRepository_DeleteRemote_Call struct {
	*mock.Call
}

// DeleteRemote is a helper method to define mock.On call
//   - name string
func (_e *GitRepository_Expecter) DeleteRemote(name interface{}) *GitRepository_DeleteRemote_Call {
	return &GitRepository_DeleteRemote_Call{Call: _e.mock.On("DeleteRemote", name)}
}

func (_c *GitRepository_DeleteRemote_Call) Run(run func(name string)) *GitRepository_DeleteRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GitRepository_DeleteRemote_Call) Return(_a0 error) *GitRepository_DeleteRemote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitRepository_DeleteRemote_Call) RunAndReturn(run func(string) error) *GitRepository_DeleteRemote_Call {
	_c.Call.Return(run)
	return _c
}

// GoGitRepository provides a mock function with no fields
func (_m *GitRepository) GoGitRepository() *git.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GoGitRepository")
	}

	var r0 *git.Repository
	if rf, ok := ret.Get(0).(func() *git.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Repository)
		}
	}

	return r0
}

// GitRepository_GoGitRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GoGitRepository'
type GitRepository_GoGitRepository_Call struct {
	*mock.Call
}

// GoGitRepository is a helper method to define mock.On call
func (_e *GitRepository_Expecter) GoGitRepository() *GitRepository_GoGitRepository_Call {
	return &GitRepository_GoGitRepository_Call{Call: _e.mock.On("GoGitRepository")}
}

func (_c *GitRepository_GoGitRepository_Call) Run(run func()) *GitRepository_GoGitRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitRepository_GoGitRepository_Call) Return(_a0 *git.Repository) *GitRepository_GoGitRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitRepository_GoGitRepository_Call) RunAndReturn(run func() *git.Repository) *GitRepository_GoGitRepository_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectInfo provides a mock function with no fields
func (_m *GitRepository) ProjectInfo() *model.ProjectInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectInfo")
	}

	var r0 *model.ProjectInfo
	if rf, ok := ret.Get(0).(func() *model.ProjectInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProjectInfo)
		}
	}

	return r0
}

// GitRepository_ProjectInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectInfo'
type GitRepository_ProjectInfo_Call struct {
	*mock.Call
}

// ProjectInfo is a helper method to define mock.On call
func (_e *GitRepository_Expecter) ProjectInfo() *GitRepository_ProjectInfo_Call {
	return &GitRepository_ProjectInfo_Call{Call: _e.mock.On("ProjectInfo")}
}

func (_c *GitRepository_ProjectInfo_Call) Run(run func()) *GitRepository_ProjectInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitRepository_ProjectInfo_Call) Return(_a0 *model.ProjectInfo) *GitRepository_ProjectInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GitRepository_ProjectInfo_Call) RunAndReturn(run func() *model.ProjectInfo) *GitRepository_ProjectInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Remote provides a mock function with given fields: name
func (_m *GitRepository) Remote(name string) (model.Remote, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remote")
	}

	var r0 model.Remote
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Remote, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) model.Remote); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.Remote)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitRepository_Remote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remote'
type GitRepository_Remote_Call struct {
	*mock.Call
}

// Remote is a helper method to define mock.On call
//   - name string
func (_e *GitRepository_Expecter) Remote(name interface{}) *GitRepository_Remote_Call {
	return &GitRepository_Remote_Call{Call: _e.mock.On("Remote", name)}
}

func (_c *GitRepository_Remote_Call) Run(run func(name string)) *GitRepository_Remote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GitRepository_Remote_Call) Return(_a0 model.Remote, _a1 error) *GitRepository_Remote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitRepository_Remote_Call) RunAndReturn(run func(string) (model.Remote, error)) *GitRepository_Remote_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitRepository creates a new instance of GitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitRepository {
	mock := &GitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
