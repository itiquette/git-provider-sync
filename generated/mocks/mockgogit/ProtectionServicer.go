// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProtectionServicer is an autogenerated mock type for the ProtectionServicer type
type ProtectionServicer struct {
	mock.Mock
}

type ProtectionServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *ProtectionServicer) EXPECT() *ProtectionServicer_Expecter {
	return &ProtectionServicer_Expecter{mock: &_m.Mock}
}

// Protect provides a mock function with given fields: ctx, owner, defaultBranch, projectIDstr
func (_m *ProtectionServicer) Protect(ctx context.Context, owner string, defaultBranch string, projectIDstr string) error {
	ret := _m.Called(ctx, owner, defaultBranch, projectIDstr)

	if len(ret) == 0 {
		panic("no return value specified for Protect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, owner, defaultBranch, projectIDstr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProtectionServicer_Protect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Protect'
type ProtectionServicer_Protect_Call struct {
	*mock.Call
}

// Protect is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - defaultBranch string
//   - projectIDstr string
func (_e *ProtectionServicer_Expecter) Protect(ctx interface{}, owner interface{}, defaultBranch interface{}, projectIDstr interface{}) *ProtectionServicer_Protect_Call {
	return &ProtectionServicer_Protect_Call{Call: _e.mock.On("Protect", ctx, owner, defaultBranch, projectIDstr)}
}

func (_c *ProtectionServicer_Protect_Call) Run(run func(ctx context.Context, owner string, defaultBranch string, projectIDstr string)) *ProtectionServicer_Protect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ProtectionServicer_Protect_Call) Return(_a0 error) *ProtectionServicer_Protect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProtectionServicer_Protect_Call) RunAndReturn(run func(context.Context, string, string, string) error) *ProtectionServicer_Protect_Call {
	_c.Call.Return(run)
	return _c
}

// Unprotect provides a mock function with given fields: ctx, defaultBranch, projectIDStr
func (_m *ProtectionServicer) Unprotect(ctx context.Context, defaultBranch string, projectIDStr string) error {
	ret := _m.Called(ctx, defaultBranch, projectIDStr)

	if len(ret) == 0 {
		panic("no return value specified for Unprotect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, defaultBranch, projectIDStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProtectionServicer_Unprotect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unprotect'
type ProtectionServicer_Unprotect_Call struct {
	*mock.Call
}

// Unprotect is a helper method to define mock.On call
//   - ctx context.Context
//   - defaultBranch string
//   - projectIDStr string
func (_e *ProtectionServicer_Expecter) Unprotect(ctx interface{}, defaultBranch interface{}, projectIDStr interface{}) *ProtectionServicer_Unprotect_Call {
	return &ProtectionServicer_Unprotect_Call{Call: _e.mock.On("Unprotect", ctx, defaultBranch, projectIDStr)}
}

func (_c *ProtectionServicer_Unprotect_Call) Run(run func(ctx context.Context, defaultBranch string, projectIDStr string)) *ProtectionServicer_Unprotect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProtectionServicer_Unprotect_Call) Return(_a0 error) *ProtectionServicer_Unprotect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProtectionServicer_Unprotect_Call) RunAndReturn(run func(context.Context, string, string) error) *ProtectionServicer_Unprotect_Call {
	_c.Call.Return(run)
	return _c
}

// NewProtectionServicer creates a new instance of ProtectionServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectionServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectionServicer {
	mock := &ProtectionServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
