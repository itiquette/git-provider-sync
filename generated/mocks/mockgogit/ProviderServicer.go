// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "itiquette/git-provider-sync/internal/model"
)

// ProviderServicer is an autogenerated mock type for the ProviderServicer type
type ProviderServicer struct {
	mock.Mock
}

type ProviderServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderServicer) EXPECT() *ProviderServicer_Expecter {
	return &ProviderServicer_Expecter{mock: &_m.Mock}
}

// CreateProject provides a mock function with given fields: ctx, opt
func (_m *ProviderServicer) CreateProject(ctx context.Context, opt model.CreateProjectOption) (string, error) {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateProjectOption) (string, error)); ok {
		return rf(ctx, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateProjectOption) string); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateProjectOption) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderServicer_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ProviderServicer_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - opt model.CreateProjectOption
func (_e *ProviderServicer_Expecter) CreateProject(ctx interface{}, opt interface{}) *ProviderServicer_CreateProject_Call {
	return &ProviderServicer_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, opt)}
}

func (_c *ProviderServicer_CreateProject_Call) Run(run func(ctx context.Context, opt model.CreateProjectOption)) *ProviderServicer_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateProjectOption))
	})
	return _c
}

func (_c *ProviderServicer_CreateProject_Call) Return(_a0 string, _a1 error) *ProviderServicer_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProviderServicer_CreateProject_Call) RunAndReturn(run func(context.Context, model.CreateProjectOption) (string, error)) *ProviderServicer_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectInfos provides a mock function with given fields: ctx, providerOpt, filtering
func (_m *ProviderServicer) GetProjectInfos(ctx context.Context, providerOpt model.ProviderOption, filtering bool) ([]model.ProjectInfo, error) {
	ret := _m.Called(ctx, providerOpt, filtering)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectInfos")
	}

	var r0 []model.ProjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ProviderOption, bool) ([]model.ProjectInfo, error)); ok {
		return rf(ctx, providerOpt, filtering)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ProviderOption, bool) []model.ProjectInfo); ok {
		r0 = rf(ctx, providerOpt, filtering)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ProviderOption, bool) error); ok {
		r1 = rf(ctx, providerOpt, filtering)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderServicer_GetProjectInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectInfos'
type ProviderServicer_GetProjectInfos_Call struct {
	*mock.Call
}

// GetProjectInfos is a helper method to define mock.On call
//   - ctx context.Context
//   - providerOpt model.ProviderOption
//   - filtering bool
func (_e *ProviderServicer_Expecter) GetProjectInfos(ctx interface{}, providerOpt interface{}, filtering interface{}) *ProviderServicer_GetProjectInfos_Call {
	return &ProviderServicer_GetProjectInfos_Call{Call: _e.mock.On("GetProjectInfos", ctx, providerOpt, filtering)}
}

func (_c *ProviderServicer_GetProjectInfos_Call) Run(run func(ctx context.Context, providerOpt model.ProviderOption, filtering bool)) *ProviderServicer_GetProjectInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ProviderOption), args[2].(bool))
	})
	return _c
}

func (_c *ProviderServicer_GetProjectInfos_Call) Return(_a0 []model.ProjectInfo, _a1 error) *ProviderServicer_GetProjectInfos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProviderServicer_GetProjectInfos_Call) RunAndReturn(run func(context.Context, model.ProviderOption, bool) ([]model.ProjectInfo, error)) *ProviderServicer_GetProjectInfos_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectExists provides a mock function with given fields: ctx, owner, repo
func (_m *ProviderServicer) ProjectExists(ctx context.Context, owner string, repo string) (bool, string, error) {
	ret := _m.Called(ctx, owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for ProjectExists")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, string, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProviderServicer_ProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectExists'
type ProviderServicer_ProjectExists_Call struct {
	*mock.Call
}

// ProjectExists is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *ProviderServicer_Expecter) ProjectExists(ctx interface{}, owner interface{}, repo interface{}) *ProviderServicer_ProjectExists_Call {
	return &ProviderServicer_ProjectExists_Call{Call: _e.mock.On("ProjectExists", ctx, owner, repo)}
}

func (_c *ProviderServicer_ProjectExists_Call) Run(run func(ctx context.Context, owner string, repo string)) *ProviderServicer_ProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProviderServicer_ProjectExists_Call) Return(_a0 bool, _a1 string, _a2 error) *ProviderServicer_ProjectExists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProviderServicer_ProjectExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, string, error)) *ProviderServicer_ProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultBranch provides a mock function with given fields: ctx, owner, projectName, branch
func (_m *ProviderServicer) SetDefaultBranch(ctx context.Context, owner string, projectName string, branch string) error {
	ret := _m.Called(ctx, owner, projectName, branch)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, owner, projectName, branch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderServicer_SetDefaultBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultBranch'
type ProviderServicer_SetDefaultBranch_Call struct {
	*mock.Call
}

// SetDefaultBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - projectName string
//   - branch string
func (_e *ProviderServicer_Expecter) SetDefaultBranch(ctx interface{}, owner interface{}, projectName interface{}, branch interface{}) *ProviderServicer_SetDefaultBranch_Call {
	return &ProviderServicer_SetDefaultBranch_Call{Call: _e.mock.On("SetDefaultBranch", ctx, owner, projectName, branch)}
}

func (_c *ProviderServicer_SetDefaultBranch_Call) Run(run func(ctx context.Context, owner string, projectName string, branch string)) *ProviderServicer_SetDefaultBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ProviderServicer_SetDefaultBranch_Call) Return(_a0 error) *ProviderServicer_SetDefaultBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderServicer_SetDefaultBranch_Call) RunAndReturn(run func(context.Context, string, string, string) error) *ProviderServicer_SetDefaultBranch_Call {
	_c.Call.Return(run)
	return _c
}

// NewProviderServicer creates a new instance of ProviderServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderServicer {
	mock := &ProviderServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
