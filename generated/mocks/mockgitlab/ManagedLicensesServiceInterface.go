// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ManagedLicensesServiceInterface is an autogenerated mock type for the ManagedLicensesServiceInterface type
type ManagedLicensesServiceInterface struct {
	mock.Mock
}

type ManagedLicensesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagedLicensesServiceInterface) EXPECT() *ManagedLicensesServiceInterface_Expecter {
	return &ManagedLicensesServiceInterface_Expecter{mock: &_m.Mock}
}

// AddManagedLicense provides a mock function with given fields: pid, opt, options
func (_m *ManagedLicensesServiceInterface) AddManagedLicense(pid interface{}, opt *gitlab.AddManagedLicenseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddManagedLicense")
	}

	var r0 *gitlab.ManagedLicense
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) *gitlab.ManagedLicense); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ManagedLicense)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManagedLicensesServiceInterface_AddManagedLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddManagedLicense'
type ManagedLicensesServiceInterface_AddManagedLicense_Call struct {
	*mock.Call
}

// AddManagedLicense is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddManagedLicenseOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ManagedLicensesServiceInterface_Expecter) AddManagedLicense(pid interface{}, opt interface{}, options ...interface{}) *ManagedLicensesServiceInterface_AddManagedLicense_Call {
	return &ManagedLicensesServiceInterface_AddManagedLicense_Call{Call: _e.mock.On("AddManagedLicense",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ManagedLicensesServiceInterface_AddManagedLicense_Call) Run(run func(pid interface{}, opt *gitlab.AddManagedLicenseOptions, options ...gitlab.RequestOptionFunc)) *ManagedLicensesServiceInterface_AddManagedLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddManagedLicenseOptions), variadicArgs...)
	})
	return _c
}

func (_c *ManagedLicensesServiceInterface_AddManagedLicense_Call) Return(_a0 *gitlab.ManagedLicense, _a1 *gitlab.Response, _a2 error) *ManagedLicensesServiceInterface_AddManagedLicense_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ManagedLicensesServiceInterface_AddManagedLicense_Call) RunAndReturn(run func(interface{}, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *ManagedLicensesServiceInterface_AddManagedLicense_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedLicense provides a mock function with given fields: pid, mlid, options
func (_m *ManagedLicensesServiceInterface) DeleteManagedLicense(pid interface{}, mlid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mlid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedLicense")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, mlid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, mlid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, mlid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagedLicensesServiceInterface_DeleteManagedLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedLicense'
type ManagedLicensesServiceInterface_DeleteManagedLicense_Call struct {
	*mock.Call
}

// DeleteManagedLicense is a helper method to define mock.On call
//   - pid interface{}
//   - mlid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ManagedLicensesServiceInterface_Expecter) DeleteManagedLicense(pid interface{}, mlid interface{}, options ...interface{}) *ManagedLicensesServiceInterface_DeleteManagedLicense_Call {
	return &ManagedLicensesServiceInterface_DeleteManagedLicense_Call{Call: _e.mock.On("DeleteManagedLicense",
		append([]interface{}{pid, mlid}, options...)...)}
}

func (_c *ManagedLicensesServiceInterface_DeleteManagedLicense_Call) Run(run func(pid interface{}, mlid interface{}, options ...gitlab.RequestOptionFunc)) *ManagedLicensesServiceInterface_DeleteManagedLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ManagedLicensesServiceInterface_DeleteManagedLicense_Call) Return(_a0 *gitlab.Response, _a1 error) *ManagedLicensesServiceInterface_DeleteManagedLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagedLicensesServiceInterface_DeleteManagedLicense_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ManagedLicensesServiceInterface_DeleteManagedLicense_Call {
	_c.Call.Return(run)
	return _c
}

// EditManagedLicense provides a mock function with given fields: pid, mlid, opt, options
func (_m *ManagedLicensesServiceInterface) EditManagedLicense(pid interface{}, mlid interface{}, opt *gitlab.EditManagedLicenceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mlid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditManagedLicense")
	}

	var r0 *gitlab.ManagedLicense
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)); ok {
		return rf(pid, mlid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) *gitlab.ManagedLicense); ok {
		r0 = rf(pid, mlid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ManagedLicense)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mlid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mlid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManagedLicensesServiceInterface_EditManagedLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditManagedLicense'
type ManagedLicensesServiceInterface_EditManagedLicense_Call struct {
	*mock.Call
}

// EditManagedLicense is a helper method to define mock.On call
//   - pid interface{}
//   - mlid interface{}
//   - opt *gitlab.EditManagedLicenceOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ManagedLicensesServiceInterface_Expecter) EditManagedLicense(pid interface{}, mlid interface{}, opt interface{}, options ...interface{}) *ManagedLicensesServiceInterface_EditManagedLicense_Call {
	return &ManagedLicensesServiceInterface_EditManagedLicense_Call{Call: _e.mock.On("EditManagedLicense",
		append([]interface{}{pid, mlid, opt}, options...)...)}
}

func (_c *ManagedLicensesServiceInterface_EditManagedLicense_Call) Run(run func(pid interface{}, mlid interface{}, opt *gitlab.EditManagedLicenceOptions, options ...gitlab.RequestOptionFunc)) *ManagedLicensesServiceInterface_EditManagedLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), args[2].(*gitlab.EditManagedLicenceOptions), variadicArgs...)
	})
	return _c
}

func (_c *ManagedLicensesServiceInterface_EditManagedLicense_Call) Return(_a0 *gitlab.ManagedLicense, _a1 *gitlab.Response, _a2 error) *ManagedLicensesServiceInterface_EditManagedLicense_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ManagedLicensesServiceInterface_EditManagedLicense_Call) RunAndReturn(run func(interface{}, interface{}, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *ManagedLicensesServiceInterface_EditManagedLicense_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedLicense provides a mock function with given fields: pid, mlid, options
func (_m *ManagedLicensesServiceInterface) GetManagedLicense(pid interface{}, mlid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mlid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedLicense")
	}

	var r0 *gitlab.ManagedLicense
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)); ok {
		return rf(pid, mlid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.ManagedLicense); ok {
		r0 = rf(pid, mlid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ManagedLicense)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mlid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mlid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManagedLicensesServiceInterface_GetManagedLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedLicense'
type ManagedLicensesServiceInterface_GetManagedLicense_Call struct {
	*mock.Call
}

// GetManagedLicense is a helper method to define mock.On call
//   - pid interface{}
//   - mlid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ManagedLicensesServiceInterface_Expecter) GetManagedLicense(pid interface{}, mlid interface{}, options ...interface{}) *ManagedLicensesServiceInterface_GetManagedLicense_Call {
	return &ManagedLicensesServiceInterface_GetManagedLicense_Call{Call: _e.mock.On("GetManagedLicense",
		append([]interface{}{pid, mlid}, options...)...)}
}

func (_c *ManagedLicensesServiceInterface_GetManagedLicense_Call) Run(run func(pid interface{}, mlid interface{}, options ...gitlab.RequestOptionFunc)) *ManagedLicensesServiceInterface_GetManagedLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ManagedLicensesServiceInterface_GetManagedLicense_Call) Return(_a0 *gitlab.ManagedLicense, _a1 *gitlab.Response, _a2 error) *ManagedLicensesServiceInterface_GetManagedLicense_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ManagedLicensesServiceInterface_GetManagedLicense_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *ManagedLicensesServiceInterface_GetManagedLicense_Call {
	_c.Call.Return(run)
	return _c
}

// ListManagedLicenses provides a mock function with given fields: pid, options
func (_m *ManagedLicensesServiceInterface) ListManagedLicenses(pid interface{}, options ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedLicenses")
	}

	var r0 []*gitlab.ManagedLicense
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []*gitlab.ManagedLicense); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ManagedLicense)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManagedLicensesServiceInterface_ListManagedLicenses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListManagedLicenses'
type ManagedLicensesServiceInterface_ListManagedLicenses_Call struct {
	*mock.Call
}

// ListManagedLicenses is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ManagedLicensesServiceInterface_Expecter) ListManagedLicenses(pid interface{}, options ...interface{}) *ManagedLicensesServiceInterface_ListManagedLicenses_Call {
	return &ManagedLicensesServiceInterface_ListManagedLicenses_Call{Call: _e.mock.On("ListManagedLicenses",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ManagedLicensesServiceInterface_ListManagedLicenses_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ManagedLicensesServiceInterface_ListManagedLicenses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ManagedLicensesServiceInterface_ListManagedLicenses_Call) Return(_a0 []*gitlab.ManagedLicense, _a1 *gitlab.Response, _a2 error) *ManagedLicensesServiceInterface_ListManagedLicenses_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ManagedLicensesServiceInterface_ListManagedLicenses_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error)) *ManagedLicensesServiceInterface_ListManagedLicenses_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagedLicensesServiceInterface creates a new instance of ManagedLicensesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagedLicensesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagedLicensesServiceInterface {
	mock := &ManagedLicensesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
