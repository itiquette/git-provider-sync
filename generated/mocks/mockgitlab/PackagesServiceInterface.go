// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// PackagesServiceInterface is an autogenerated mock type for the PackagesServiceInterface type
type PackagesServiceInterface struct {
	mock.Mock
}

type PackagesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PackagesServiceInterface) EXPECT() *PackagesServiceInterface_Expecter {
	return &PackagesServiceInterface_Expecter{mock: &_m.Mock}
}

// DeletePackageFile provides a mock function with given fields: pid, pkg, file, options
func (_m *PackagesServiceInterface) DeletePackageFile(pid interface{}, pkg int, file int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, pkg, file)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackageFile")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, pkg, file, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, pkg, file, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, pkg, file, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackagesServiceInterface_DeletePackageFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePackageFile'
type PackagesServiceInterface_DeletePackageFile_Call struct {
	*mock.Call
}

// DeletePackageFile is a helper method to define mock.On call
//   - pid interface{}
//   - pkg int
//   - file int
//   - options ...gitlab.RequestOptionFunc
func (_e *PackagesServiceInterface_Expecter) DeletePackageFile(pid interface{}, pkg interface{}, file interface{}, options ...interface{}) *PackagesServiceInterface_DeletePackageFile_Call {
	return &PackagesServiceInterface_DeletePackageFile_Call{Call: _e.mock.On("DeletePackageFile",
		append([]interface{}{pid, pkg, file}, options...)...)}
}

func (_c *PackagesServiceInterface_DeletePackageFile_Call) Run(run func(pid interface{}, pkg int, file int, options ...gitlab.RequestOptionFunc)) *PackagesServiceInterface_DeletePackageFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *PackagesServiceInterface_DeletePackageFile_Call) Return(_a0 *gitlab.Response, _a1 error) *PackagesServiceInterface_DeletePackageFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackagesServiceInterface_DeletePackageFile_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *PackagesServiceInterface_DeletePackageFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectPackage provides a mock function with given fields: pid, pkg, options
func (_m *PackagesServiceInterface) DeleteProjectPackage(pid interface{}, pkg int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, pkg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectPackage")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, pkg, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, pkg, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, pkg, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackagesServiceInterface_DeleteProjectPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectPackage'
type PackagesServiceInterface_DeleteProjectPackage_Call struct {
	*mock.Call
}

// DeleteProjectPackage is a helper method to define mock.On call
//   - pid interface{}
//   - pkg int
//   - options ...gitlab.RequestOptionFunc
func (_e *PackagesServiceInterface_Expecter) DeleteProjectPackage(pid interface{}, pkg interface{}, options ...interface{}) *PackagesServiceInterface_DeleteProjectPackage_Call {
	return &PackagesServiceInterface_DeleteProjectPackage_Call{Call: _e.mock.On("DeleteProjectPackage",
		append([]interface{}{pid, pkg}, options...)...)}
}

func (_c *PackagesServiceInterface_DeleteProjectPackage_Call) Run(run func(pid interface{}, pkg int, options ...gitlab.RequestOptionFunc)) *PackagesServiceInterface_DeleteProjectPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *PackagesServiceInterface_DeleteProjectPackage_Call) Return(_a0 *gitlab.Response, _a1 error) *PackagesServiceInterface_DeleteProjectPackage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackagesServiceInterface_DeleteProjectPackage_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *PackagesServiceInterface_DeleteProjectPackage_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPackages provides a mock function with given fields: gid, opt, options
func (_m *PackagesServiceInterface) ListGroupPackages(gid interface{}, opt *gitlab.ListGroupPackagesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupPackage, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupPackages")
	}

	var r0 []*gitlab.GroupPackage
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupPackagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupPackage, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupPackagesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupPackage); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupPackagesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupPackagesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PackagesServiceInterface_ListGroupPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPackages'
type PackagesServiceInterface_ListGroupPackages_Call struct {
	*mock.Call
}

// ListGroupPackages is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupPackagesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PackagesServiceInterface_Expecter) ListGroupPackages(gid interface{}, opt interface{}, options ...interface{}) *PackagesServiceInterface_ListGroupPackages_Call {
	return &PackagesServiceInterface_ListGroupPackages_Call{Call: _e.mock.On("ListGroupPackages",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *PackagesServiceInterface_ListGroupPackages_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupPackagesOptions, options ...gitlab.RequestOptionFunc)) *PackagesServiceInterface_ListGroupPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupPackagesOptions), variadicArgs...)
	})
	return _c
}

func (_c *PackagesServiceInterface_ListGroupPackages_Call) Return(_a0 []*gitlab.GroupPackage, _a1 *gitlab.Response, _a2 error) *PackagesServiceInterface_ListGroupPackages_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PackagesServiceInterface_ListGroupPackages_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupPackagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupPackage, *gitlab.Response, error)) *PackagesServiceInterface_ListGroupPackages_Call {
	_c.Call.Return(run)
	return _c
}

// ListPackageFiles provides a mock function with given fields: pid, pkg, opt, options
func (_m *PackagesServiceInterface) ListPackageFiles(pid interface{}, pkg int, opt *gitlab.ListPackageFilesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PackageFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, pkg, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackageFiles")
	}

	var r0 []*gitlab.PackageFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListPackageFilesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PackageFile, *gitlab.Response, error)); ok {
		return rf(pid, pkg, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListPackageFilesOptions, ...gitlab.RequestOptionFunc) []*gitlab.PackageFile); ok {
		r0 = rf(pid, pkg, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.PackageFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListPackageFilesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, pkg, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListPackageFilesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, pkg, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PackagesServiceInterface_ListPackageFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPackageFiles'
type PackagesServiceInterface_ListPackageFiles_Call struct {
	*mock.Call
}

// ListPackageFiles is a helper method to define mock.On call
//   - pid interface{}
//   - pkg int
//   - opt *gitlab.ListPackageFilesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PackagesServiceInterface_Expecter) ListPackageFiles(pid interface{}, pkg interface{}, opt interface{}, options ...interface{}) *PackagesServiceInterface_ListPackageFiles_Call {
	return &PackagesServiceInterface_ListPackageFiles_Call{Call: _e.mock.On("ListPackageFiles",
		append([]interface{}{pid, pkg, opt}, options...)...)}
}

func (_c *PackagesServiceInterface_ListPackageFiles_Call) Run(run func(pid interface{}, pkg int, opt *gitlab.ListPackageFilesOptions, options ...gitlab.RequestOptionFunc)) *PackagesServiceInterface_ListPackageFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListPackageFilesOptions), variadicArgs...)
	})
	return _c
}

func (_c *PackagesServiceInterface_ListPackageFiles_Call) Return(_a0 []*gitlab.PackageFile, _a1 *gitlab.Response, _a2 error) *PackagesServiceInterface_ListPackageFiles_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PackagesServiceInterface_ListPackageFiles_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListPackageFilesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PackageFile, *gitlab.Response, error)) *PackagesServiceInterface_ListPackageFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectPackages provides a mock function with given fields: pid, opt, options
func (_m *PackagesServiceInterface) ListProjectPackages(pid interface{}, opt *gitlab.ListProjectPackagesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Package, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectPackages")
	}

	var r0 []*gitlab.Package
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectPackagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Package, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectPackagesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Package); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectPackagesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectPackagesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PackagesServiceInterface_ListProjectPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectPackages'
type PackagesServiceInterface_ListProjectPackages_Call struct {
	*mock.Call
}

// ListProjectPackages is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectPackagesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PackagesServiceInterface_Expecter) ListProjectPackages(pid interface{}, opt interface{}, options ...interface{}) *PackagesServiceInterface_ListProjectPackages_Call {
	return &PackagesServiceInterface_ListProjectPackages_Call{Call: _e.mock.On("ListProjectPackages",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PackagesServiceInterface_ListProjectPackages_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectPackagesOptions, options ...gitlab.RequestOptionFunc)) *PackagesServiceInterface_ListProjectPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectPackagesOptions), variadicArgs...)
	})
	return _c
}

func (_c *PackagesServiceInterface_ListProjectPackages_Call) Return(_a0 []*gitlab.Package, _a1 *gitlab.Response, _a2 error) *PackagesServiceInterface_ListProjectPackages_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PackagesServiceInterface_ListProjectPackages_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectPackagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Package, *gitlab.Response, error)) *PackagesServiceInterface_ListProjectPackages_Call {
	_c.Call.Return(run)
	return _c
}

// NewPackagesServiceInterface creates a new instance of PackagesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackagesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackagesServiceInterface {
	mock := &PackagesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
