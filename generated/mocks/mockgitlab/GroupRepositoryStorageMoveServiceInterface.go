// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupRepositoryStorageMoveServiceInterface is an autogenerated mock type for the GroupRepositoryStorageMoveServiceInterface type
type GroupRepositoryStorageMoveServiceInterface struct {
	mock.Mock
}

type GroupRepositoryStorageMoveServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupRepositoryStorageMoveServiceInterface) EXPECT() *GroupRepositoryStorageMoveServiceInterface_Expecter {
	return &GroupRepositoryStorageMoveServiceInterface_Expecter{mock: &_m.Mock}
}

// GetStorageMove provides a mock function with given fields: repositoryStorage, options
func (_m *GroupRepositoryStorageMoveServiceInterface) GetStorageMove(repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, repositoryStorage)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageMove")
	}

	var r0 *gitlab.GroupRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(repositoryStorage, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.GroupRepositoryStorageMove); ok {
		r0 = rf(repositoryStorage, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(repositoryStorage, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(repositoryStorage, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageMove'
type GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call struct {
	*mock.Call
}

// GetStorageMove is a helper method to define mock.On call
//   - repositoryStorage int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) GetStorageMove(repositoryStorage interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	return &GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call{Call: _e.mock.On("GetStorageMove",
		append([]interface{}{repositoryStorage}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call) Run(run func(repositoryStorage int, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call) Return(_a0 *gitlab.GroupRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageMoveForGroup provides a mock function with given fields: group, repositoryStorage, options
func (_m *GroupRepositoryStorageMoveServiceInterface) GetStorageMoveForGroup(group int, repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, repositoryStorage)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageMoveForGroup")
	}

	var r0 *gitlab.GroupRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(group, repositoryStorage, options...)
	}
	if rf, ok := ret.Get(0).(func(int, int, ...gitlab.RequestOptionFunc) *gitlab.GroupRepositoryStorageMove); ok {
		r0 = rf(group, repositoryStorage, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, repositoryStorage, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, repositoryStorage, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageMoveForGroup'
type GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call struct {
	*mock.Call
}

// GetStorageMoveForGroup is a helper method to define mock.On call
//   - group int
//   - repositoryStorage int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) GetStorageMoveForGroup(group interface{}, repositoryStorage interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call {
	return &GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call{Call: _e.mock.On("GetStorageMoveForGroup",
		append([]interface{}{group, repositoryStorage}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call) Run(run func(group int, repositoryStorage int, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call) Return(_a0 *gitlab.GroupRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call) RunAndReturn(run func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_GetStorageMoveForGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllStorageMoves provides a mock function with given fields: opts, options
func (_m *GroupRepositoryStorageMoveServiceInterface) RetrieveAllStorageMoves(opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllStorageMoves")
	}

	var r0 []*gitlab.GroupRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(opts, options...)
	}
	if rf, ok := ret.Get(0).(func(gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupRepositoryStorageMove); ok {
		r0 = rf(opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllStorageMoves'
type GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call struct {
	*mock.Call
}

// RetrieveAllStorageMoves is a helper method to define mock.On call
//   - opts gitlab.RetrieveAllGroupStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) RetrieveAllStorageMoves(opts interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	return &GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call{Call: _e.mock.On("RetrieveAllStorageMoves",
		append([]interface{}{opts}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) Run(run func(opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(gitlab.RetrieveAllGroupStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) Return(_a0 []*gitlab.GroupRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) RunAndReturn(run func(gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllStorageMovesForGroup provides a mock function with given fields: group, opts, options
func (_m *GroupRepositoryStorageMoveServiceInterface) RetrieveAllStorageMovesForGroup(group int, opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllStorageMovesForGroup")
	}

	var r0 []*gitlab.GroupRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(group, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupRepositoryStorageMove); ok {
		r0 = rf(group, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllStorageMovesForGroup'
type GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call struct {
	*mock.Call
}

// RetrieveAllStorageMovesForGroup is a helper method to define mock.On call
//   - group int
//   - opts gitlab.RetrieveAllGroupStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) RetrieveAllStorageMovesForGroup(group interface{}, opts interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call {
	return &GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call{Call: _e.mock.On("RetrieveAllStorageMovesForGroup",
		append([]interface{}{group, opts}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call) Run(run func(group int, opts gitlab.RetrieveAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.RetrieveAllGroupStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call) Return(_a0 []*gitlab.GroupRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call) RunAndReturn(run func(int, gitlab.RetrieveAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleAllStorageMoves provides a mock function with given fields: opts, options
func (_m *GroupRepositoryStorageMoveServiceInterface) ScheduleAllStorageMoves(opts gitlab.ScheduleAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleAllStorageMoves")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.ScheduleAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(opts, options...)
	}
	if rf, ok := ret.Get(0).(func(gitlab.ScheduleAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.ScheduleAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(opts, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleAllStorageMoves'
type GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call struct {
	*mock.Call
}

// ScheduleAllStorageMoves is a helper method to define mock.On call
//   - opts gitlab.ScheduleAllGroupStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) ScheduleAllStorageMoves(opts interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	return &GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call{Call: _e.mock.On("ScheduleAllStorageMoves",
		append([]interface{}{opts}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) Run(run func(opts gitlab.ScheduleAllGroupStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(gitlab.ScheduleAllGroupStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) RunAndReturn(run func(gitlab.ScheduleAllGroupStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleStorageMoveForGroup provides a mock function with given fields: group, opts, options
func (_m *GroupRepositoryStorageMoveServiceInterface) ScheduleStorageMoveForGroup(group int, opts gitlab.ScheduleStorageMoveForGroupOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleStorageMoveForGroup")
	}

	var r0 *gitlab.GroupRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.ScheduleStorageMoveForGroupOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(group, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.ScheduleStorageMoveForGroupOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupRepositoryStorageMove); ok {
		r0 = rf(group, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.ScheduleStorageMoveForGroupOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.ScheduleStorageMoveForGroupOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleStorageMoveForGroup'
type GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call struct {
	*mock.Call
}

// ScheduleStorageMoveForGroup is a helper method to define mock.On call
//   - group int
//   - opts gitlab.ScheduleStorageMoveForGroupOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupRepositoryStorageMoveServiceInterface_Expecter) ScheduleStorageMoveForGroup(group interface{}, opts interface{}, options ...interface{}) *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call {
	return &GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call{Call: _e.mock.On("ScheduleStorageMoveForGroup",
		append([]interface{}{group, opts}, options...)...)}
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call) Run(run func(group int, opts gitlab.ScheduleStorageMoveForGroupOptions, options ...gitlab.RequestOptionFunc)) *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.ScheduleStorageMoveForGroupOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call) Return(_a0 *gitlab.GroupRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call) RunAndReturn(run func(int, gitlab.ScheduleStorageMoveForGroupOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupRepositoryStorageMove, *gitlab.Response, error)) *GroupRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupRepositoryStorageMoveServiceInterface creates a new instance of GroupRepositoryStorageMoveServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepositoryStorageMoveServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepositoryStorageMoveServiceInterface {
	mock := &GroupRepositoryStorageMoveServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
