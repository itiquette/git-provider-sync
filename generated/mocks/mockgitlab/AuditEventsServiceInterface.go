// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// AuditEventsServiceInterface is an autogenerated mock type for the AuditEventsServiceInterface type
type AuditEventsServiceInterface struct {
	mock.Mock
}

type AuditEventsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditEventsServiceInterface) EXPECT() *AuditEventsServiceInterface_Expecter {
	return &AuditEventsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupAuditEvent provides a mock function with given fields: gid, event, options
func (_m *AuditEventsServiceInterface) GetGroupAuditEvent(gid interface{}, event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAuditEvent")
	}

	var r0 *gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(gid, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.AuditEvent); ok {
		r0 = rf(gid, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_GetGroupAuditEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupAuditEvent'
type AuditEventsServiceInterface_GetGroupAuditEvent_Call struct {
	*mock.Call
}

// GetGroupAuditEvent is a helper method to define mock.On call
//   - gid interface{}
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) GetGroupAuditEvent(gid interface{}, event interface{}, options ...interface{}) *AuditEventsServiceInterface_GetGroupAuditEvent_Call {
	return &AuditEventsServiceInterface_GetGroupAuditEvent_Call{Call: _e.mock.On("GetGroupAuditEvent",
		append([]interface{}{gid, event}, options...)...)}
}

func (_c *AuditEventsServiceInterface_GetGroupAuditEvent_Call) Run(run func(gid interface{}, event int, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_GetGroupAuditEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_GetGroupAuditEvent_Call) Return(_a0 *gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_GetGroupAuditEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_GetGroupAuditEvent_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_GetGroupAuditEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceAuditEvent provides a mock function with given fields: event, options
func (_m *AuditEventsServiceInterface) GetInstanceAuditEvent(event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceAuditEvent")
	}

	var r0 *gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(event, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.AuditEvent); ok {
		r0 = rf(event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_GetInstanceAuditEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceAuditEvent'
type AuditEventsServiceInterface_GetInstanceAuditEvent_Call struct {
	*mock.Call
}

// GetInstanceAuditEvent is a helper method to define mock.On call
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) GetInstanceAuditEvent(event interface{}, options ...interface{}) *AuditEventsServiceInterface_GetInstanceAuditEvent_Call {
	return &AuditEventsServiceInterface_GetInstanceAuditEvent_Call{Call: _e.mock.On("GetInstanceAuditEvent",
		append([]interface{}{event}, options...)...)}
}

func (_c *AuditEventsServiceInterface_GetInstanceAuditEvent_Call) Run(run func(event int, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_GetInstanceAuditEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_GetInstanceAuditEvent_Call) Return(_a0 *gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_GetInstanceAuditEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_GetInstanceAuditEvent_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_GetInstanceAuditEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectAuditEvent provides a mock function with given fields: pid, event, options
func (_m *AuditEventsServiceInterface) GetProjectAuditEvent(pid interface{}, event int, options ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectAuditEvent")
	}

	var r0 *gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(pid, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.AuditEvent); ok {
		r0 = rf(pid, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_GetProjectAuditEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectAuditEvent'
type AuditEventsServiceInterface_GetProjectAuditEvent_Call struct {
	*mock.Call
}

// GetProjectAuditEvent is a helper method to define mock.On call
//   - pid interface{}
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) GetProjectAuditEvent(pid interface{}, event interface{}, options ...interface{}) *AuditEventsServiceInterface_GetProjectAuditEvent_Call {
	return &AuditEventsServiceInterface_GetProjectAuditEvent_Call{Call: _e.mock.On("GetProjectAuditEvent",
		append([]interface{}{pid, event}, options...)...)}
}

func (_c *AuditEventsServiceInterface_GetProjectAuditEvent_Call) Run(run func(pid interface{}, event int, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_GetProjectAuditEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_GetProjectAuditEvent_Call) Return(_a0 *gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_GetProjectAuditEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_GetProjectAuditEvent_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_GetProjectAuditEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupAuditEvents provides a mock function with given fields: gid, opt, options
func (_m *AuditEventsServiceInterface) ListGroupAuditEvents(gid interface{}, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupAuditEvents")
	}

	var r0 []*gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.AuditEvent); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_ListGroupAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupAuditEvents'
type AuditEventsServiceInterface_ListGroupAuditEvents_Call struct {
	*mock.Call
}

// ListGroupAuditEvents is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListAuditEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) ListGroupAuditEvents(gid interface{}, opt interface{}, options ...interface{}) *AuditEventsServiceInterface_ListGroupAuditEvents_Call {
	return &AuditEventsServiceInterface_ListGroupAuditEvents_Call{Call: _e.mock.On("ListGroupAuditEvents",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *AuditEventsServiceInterface_ListGroupAuditEvents_Call) Run(run func(gid interface{}, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_ListGroupAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListAuditEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_ListGroupAuditEvents_Call) Return(_a0 []*gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_ListGroupAuditEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_ListGroupAuditEvents_Call) RunAndReturn(run func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_ListGroupAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceAuditEvents provides a mock function with given fields: opt, options
func (_m *AuditEventsServiceInterface) ListInstanceAuditEvents(opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstanceAuditEvents")
	}

	var r0 []*gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.AuditEvent); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_ListInstanceAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceAuditEvents'
type AuditEventsServiceInterface_ListInstanceAuditEvents_Call struct {
	*mock.Call
}

// ListInstanceAuditEvents is a helper method to define mock.On call
//   - opt *gitlab.ListAuditEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) ListInstanceAuditEvents(opt interface{}, options ...interface{}) *AuditEventsServiceInterface_ListInstanceAuditEvents_Call {
	return &AuditEventsServiceInterface_ListInstanceAuditEvents_Call{Call: _e.mock.On("ListInstanceAuditEvents",
		append([]interface{}{opt}, options...)...)}
}

func (_c *AuditEventsServiceInterface_ListInstanceAuditEvents_Call) Run(run func(opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_ListInstanceAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListAuditEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_ListInstanceAuditEvents_Call) Return(_a0 []*gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_ListInstanceAuditEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_ListInstanceAuditEvents_Call) RunAndReturn(run func(*gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_ListInstanceAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectAuditEvents provides a mock function with given fields: pid, opt, options
func (_m *AuditEventsServiceInterface) ListProjectAuditEvents(pid interface{}, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectAuditEvents")
	}

	var r0 []*gitlab.AuditEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.AuditEvent); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditEventsServiceInterface_ListProjectAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectAuditEvents'
type AuditEventsServiceInterface_ListProjectAuditEvents_Call struct {
	*mock.Call
}

// ListProjectAuditEvents is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListAuditEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AuditEventsServiceInterface_Expecter) ListProjectAuditEvents(pid interface{}, opt interface{}, options ...interface{}) *AuditEventsServiceInterface_ListProjectAuditEvents_Call {
	return &AuditEventsServiceInterface_ListProjectAuditEvents_Call{Call: _e.mock.On("ListProjectAuditEvents",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *AuditEventsServiceInterface_ListProjectAuditEvents_Call) Run(run func(pid interface{}, opt *gitlab.ListAuditEventsOptions, options ...gitlab.RequestOptionFunc)) *AuditEventsServiceInterface_ListProjectAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListAuditEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *AuditEventsServiceInterface_ListProjectAuditEvents_Call) Return(_a0 []*gitlab.AuditEvent, _a1 *gitlab.Response, _a2 error) *AuditEventsServiceInterface_ListProjectAuditEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditEventsServiceInterface_ListProjectAuditEvents_Call) RunAndReturn(run func(interface{}, *gitlab.ListAuditEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AuditEvent, *gitlab.Response, error)) *AuditEventsServiceInterface_ListProjectAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditEventsServiceInterface creates a new instance of AuditEventsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditEventsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditEventsServiceInterface {
	mock := &AuditEventsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
