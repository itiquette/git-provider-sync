// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ErrorTrackingServiceInterface is an autogenerated mock type for the ErrorTrackingServiceInterface type
type ErrorTrackingServiceInterface struct {
	mock.Mock
}

type ErrorTrackingServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorTrackingServiceInterface) EXPECT() *ErrorTrackingServiceInterface_Expecter {
	return &ErrorTrackingServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateClientKey provides a mock function with given fields: pid, options
func (_m *ErrorTrackingServiceInterface) CreateClientKey(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientKey")
	}

	var r0 *gitlab.ErrorTrackingClientKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.ErrorTrackingClientKey); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ErrorTrackingClientKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ErrorTrackingServiceInterface_CreateClientKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientKey'
type ErrorTrackingServiceInterface_CreateClientKey_Call struct {
	*mock.Call
}

// CreateClientKey is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ErrorTrackingServiceInterface_Expecter) CreateClientKey(pid interface{}, options ...interface{}) *ErrorTrackingServiceInterface_CreateClientKey_Call {
	return &ErrorTrackingServiceInterface_CreateClientKey_Call{Call: _e.mock.On("CreateClientKey",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ErrorTrackingServiceInterface_CreateClientKey_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ErrorTrackingServiceInterface_CreateClientKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ErrorTrackingServiceInterface_CreateClientKey_Call) Return(_a0 *gitlab.ErrorTrackingClientKey, _a1 *gitlab.Response, _a2 error) *ErrorTrackingServiceInterface_CreateClientKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ErrorTrackingServiceInterface_CreateClientKey_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *ErrorTrackingServiceInterface_CreateClientKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientKey provides a mock function with given fields: pid, keyID, options
func (_m *ErrorTrackingServiceInterface) DeleteClientKey(pid interface{}, keyID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, keyID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientKey")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, keyID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, keyID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, keyID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ErrorTrackingServiceInterface_DeleteClientKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientKey'
type ErrorTrackingServiceInterface_DeleteClientKey_Call struct {
	*mock.Call
}

// DeleteClientKey is a helper method to define mock.On call
//   - pid interface{}
//   - keyID int
//   - options ...gitlab.RequestOptionFunc
func (_e *ErrorTrackingServiceInterface_Expecter) DeleteClientKey(pid interface{}, keyID interface{}, options ...interface{}) *ErrorTrackingServiceInterface_DeleteClientKey_Call {
	return &ErrorTrackingServiceInterface_DeleteClientKey_Call{Call: _e.mock.On("DeleteClientKey",
		append([]interface{}{pid, keyID}, options...)...)}
}

func (_c *ErrorTrackingServiceInterface_DeleteClientKey_Call) Run(run func(pid interface{}, keyID int, options ...gitlab.RequestOptionFunc)) *ErrorTrackingServiceInterface_DeleteClientKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ErrorTrackingServiceInterface_DeleteClientKey_Call) Return(_a0 *gitlab.Response, _a1 error) *ErrorTrackingServiceInterface_DeleteClientKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ErrorTrackingServiceInterface_DeleteClientKey_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ErrorTrackingServiceInterface_DeleteClientKey_Call {
	_c.Call.Return(run)
	return _c
}

// EnableDisableErrorTracking provides a mock function with given fields: pid, opt, options
func (_m *ErrorTrackingServiceInterface) EnableDisableErrorTracking(pid interface{}, opt *gitlab.EnableDisableErrorTrackingOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableDisableErrorTracking")
	}

	var r0 *gitlab.ErrorTrackingSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) *gitlab.ErrorTrackingSettings); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ErrorTrackingSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableDisableErrorTracking'
type ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call struct {
	*mock.Call
}

// EnableDisableErrorTracking is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.EnableDisableErrorTrackingOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ErrorTrackingServiceInterface_Expecter) EnableDisableErrorTracking(pid interface{}, opt interface{}, options ...interface{}) *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call {
	return &ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call{Call: _e.mock.On("EnableDisableErrorTracking",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call) Run(run func(pid interface{}, opt *gitlab.EnableDisableErrorTrackingOptions, options ...gitlab.RequestOptionFunc)) *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.EnableDisableErrorTrackingOptions), variadicArgs...)
	})
	return _c
}

func (_c *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call) Return(_a0 *gitlab.ErrorTrackingSettings, _a1 *gitlab.Response, _a2 error) *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call) RunAndReturn(run func(interface{}, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *ErrorTrackingServiceInterface_EnableDisableErrorTracking_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorTrackingSettings provides a mock function with given fields: pid, options
func (_m *ErrorTrackingServiceInterface) GetErrorTrackingSettings(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetErrorTrackingSettings")
	}

	var r0 *gitlab.ErrorTrackingSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.ErrorTrackingSettings); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ErrorTrackingSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorTrackingSettings'
type ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call struct {
	*mock.Call
}

// GetErrorTrackingSettings is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ErrorTrackingServiceInterface_Expecter) GetErrorTrackingSettings(pid interface{}, options ...interface{}) *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call {
	return &ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call{Call: _e.mock.On("GetErrorTrackingSettings",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call) Return(_a0 *gitlab.ErrorTrackingSettings, _a1 *gitlab.Response, _a2 error) *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *ErrorTrackingServiceInterface_GetErrorTrackingSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListClientKeys provides a mock function with given fields: pid, opt, options
func (_m *ErrorTrackingServiceInterface) ListClientKeys(pid interface{}, opt *gitlab.ListClientKeysOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClientKeys")
	}

	var r0 []*gitlab.ErrorTrackingClientKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) []*gitlab.ErrorTrackingClientKey); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ErrorTrackingClientKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ErrorTrackingServiceInterface_ListClientKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClientKeys'
type ErrorTrackingServiceInterface_ListClientKeys_Call struct {
	*mock.Call
}

// ListClientKeys is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListClientKeysOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ErrorTrackingServiceInterface_Expecter) ListClientKeys(pid interface{}, opt interface{}, options ...interface{}) *ErrorTrackingServiceInterface_ListClientKeys_Call {
	return &ErrorTrackingServiceInterface_ListClientKeys_Call{Call: _e.mock.On("ListClientKeys",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ErrorTrackingServiceInterface_ListClientKeys_Call) Run(run func(pid interface{}, opt *gitlab.ListClientKeysOptions, options ...gitlab.RequestOptionFunc)) *ErrorTrackingServiceInterface_ListClientKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListClientKeysOptions), variadicArgs...)
	})
	return _c
}

func (_c *ErrorTrackingServiceInterface_ListClientKeys_Call) Return(_a0 []*gitlab.ErrorTrackingClientKey, _a1 *gitlab.Response, _a2 error) *ErrorTrackingServiceInterface_ListClientKeys_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ErrorTrackingServiceInterface_ListClientKeys_Call) RunAndReturn(run func(interface{}, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *ErrorTrackingServiceInterface_ListClientKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorTrackingServiceInterface creates a new instance of ErrorTrackingServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorTrackingServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorTrackingServiceInterface {
	mock := &ErrorTrackingServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
