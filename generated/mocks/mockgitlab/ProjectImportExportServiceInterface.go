// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// ProjectImportExportServiceInterface is an autogenerated mock type for the ProjectImportExportServiceInterface type
type ProjectImportExportServiceInterface struct {
	mock.Mock
}

type ProjectImportExportServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectImportExportServiceInterface) EXPECT() *ProjectImportExportServiceInterface_Expecter {
	return &ProjectImportExportServiceInterface_Expecter{mock: &_m.Mock}
}

// ExportDownload provides a mock function with given fields: pid, options
func (_m *ProjectImportExportServiceInterface) ExportDownload(pid interface{}, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportDownload")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectImportExportServiceInterface_ExportDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportDownload'
type ProjectImportExportServiceInterface_ExportDownload_Call struct {
	*mock.Call
}

// ExportDownload is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectImportExportServiceInterface_Expecter) ExportDownload(pid interface{}, options ...interface{}) *ProjectImportExportServiceInterface_ExportDownload_Call {
	return &ProjectImportExportServiceInterface_ExportDownload_Call{Call: _e.mock.On("ExportDownload",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ProjectImportExportServiceInterface_ExportDownload_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ProjectImportExportServiceInterface_ExportDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ProjectImportExportServiceInterface_ExportDownload_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *ProjectImportExportServiceInterface_ExportDownload_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectImportExportServiceInterface_ExportDownload_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *ProjectImportExportServiceInterface_ExportDownload_Call {
	_c.Call.Return(run)
	return _c
}

// ExportStatus provides a mock function with given fields: pid, options
func (_m *ProjectImportExportServiceInterface) ExportStatus(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.ExportStatus, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportStatus")
	}

	var r0 *gitlab.ExportStatus
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ExportStatus, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.ExportStatus); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ExportStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectImportExportServiceInterface_ExportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportStatus'
type ProjectImportExportServiceInterface_ExportStatus_Call struct {
	*mock.Call
}

// ExportStatus is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectImportExportServiceInterface_Expecter) ExportStatus(pid interface{}, options ...interface{}) *ProjectImportExportServiceInterface_ExportStatus_Call {
	return &ProjectImportExportServiceInterface_ExportStatus_Call{Call: _e.mock.On("ExportStatus",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ProjectImportExportServiceInterface_ExportStatus_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ProjectImportExportServiceInterface_ExportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ProjectImportExportServiceInterface_ExportStatus_Call) Return(_a0 *gitlab.ExportStatus, _a1 *gitlab.Response, _a2 error) *ProjectImportExportServiceInterface_ExportStatus_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectImportExportServiceInterface_ExportStatus_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ExportStatus, *gitlab.Response, error)) *ProjectImportExportServiceInterface_ExportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ImportFromFile provides a mock function with given fields: archive, opt, options
func (_m *ProjectImportExportServiceInterface) ImportFromFile(archive io.Reader, opt *gitlab.ImportFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, archive, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportFromFile")
	}

	var r0 *gitlab.ImportStatus
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(io.Reader, *gitlab.ImportFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error)); ok {
		return rf(archive, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, *gitlab.ImportFileOptions, ...gitlab.RequestOptionFunc) *gitlab.ImportStatus); ok {
		r0 = rf(archive, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ImportStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, *gitlab.ImportFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(archive, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(io.Reader, *gitlab.ImportFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(archive, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectImportExportServiceInterface_ImportFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportFromFile'
type ProjectImportExportServiceInterface_ImportFromFile_Call struct {
	*mock.Call
}

// ImportFromFile is a helper method to define mock.On call
//   - archive io.Reader
//   - opt *gitlab.ImportFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectImportExportServiceInterface_Expecter) ImportFromFile(archive interface{}, opt interface{}, options ...interface{}) *ProjectImportExportServiceInterface_ImportFromFile_Call {
	return &ProjectImportExportServiceInterface_ImportFromFile_Call{Call: _e.mock.On("ImportFromFile",
		append([]interface{}{archive, opt}, options...)...)}
}

func (_c *ProjectImportExportServiceInterface_ImportFromFile_Call) Run(run func(archive io.Reader, opt *gitlab.ImportFileOptions, options ...gitlab.RequestOptionFunc)) *ProjectImportExportServiceInterface_ImportFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(io.Reader), args[1].(*gitlab.ImportFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectImportExportServiceInterface_ImportFromFile_Call) Return(_a0 *gitlab.ImportStatus, _a1 *gitlab.Response, _a2 error) *ProjectImportExportServiceInterface_ImportFromFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectImportExportServiceInterface_ImportFromFile_Call) RunAndReturn(run func(io.Reader, *gitlab.ImportFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error)) *ProjectImportExportServiceInterface_ImportFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// ImportStatus provides a mock function with given fields: pid, options
func (_m *ProjectImportExportServiceInterface) ImportStatus(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportStatus")
	}

	var r0 *gitlab.ImportStatus
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.ImportStatus); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ImportStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectImportExportServiceInterface_ImportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportStatus'
type ProjectImportExportServiceInterface_ImportStatus_Call struct {
	*mock.Call
}

// ImportStatus is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectImportExportServiceInterface_Expecter) ImportStatus(pid interface{}, options ...interface{}) *ProjectImportExportServiceInterface_ImportStatus_Call {
	return &ProjectImportExportServiceInterface_ImportStatus_Call{Call: _e.mock.On("ImportStatus",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ProjectImportExportServiceInterface_ImportStatus_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ProjectImportExportServiceInterface_ImportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ProjectImportExportServiceInterface_ImportStatus_Call) Return(_a0 *gitlab.ImportStatus, _a1 *gitlab.Response, _a2 error) *ProjectImportExportServiceInterface_ImportStatus_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectImportExportServiceInterface_ImportStatus_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.ImportStatus, *gitlab.Response, error)) *ProjectImportExportServiceInterface_ImportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleExport provides a mock function with given fields: pid, opt, options
func (_m *ProjectImportExportServiceInterface) ScheduleExport(pid interface{}, opt *gitlab.ScheduleExportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleExport")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ScheduleExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ScheduleExportOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ScheduleExportOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectImportExportServiceInterface_ScheduleExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleExport'
type ProjectImportExportServiceInterface_ScheduleExport_Call struct {
	*mock.Call
}

// ScheduleExport is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ScheduleExportOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectImportExportServiceInterface_Expecter) ScheduleExport(pid interface{}, opt interface{}, options ...interface{}) *ProjectImportExportServiceInterface_ScheduleExport_Call {
	return &ProjectImportExportServiceInterface_ScheduleExport_Call{Call: _e.mock.On("ScheduleExport",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectImportExportServiceInterface_ScheduleExport_Call) Run(run func(pid interface{}, opt *gitlab.ScheduleExportOptions, options ...gitlab.RequestOptionFunc)) *ProjectImportExportServiceInterface_ScheduleExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ScheduleExportOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectImportExportServiceInterface_ScheduleExport_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectImportExportServiceInterface_ScheduleExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectImportExportServiceInterface_ScheduleExport_Call) RunAndReturn(run func(interface{}, *gitlab.ScheduleExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectImportExportServiceInterface_ScheduleExport_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectImportExportServiceInterface creates a new instance of ProjectImportExportServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectImportExportServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectImportExportServiceInterface {
	mock := &ProjectImportExportServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
