// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProjectTemplatesServiceInterface is an autogenerated mock type for the ProjectTemplatesServiceInterface type
type ProjectTemplatesServiceInterface struct {
	mock.Mock
}

type ProjectTemplatesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectTemplatesServiceInterface) EXPECT() *ProjectTemplatesServiceInterface_Expecter {
	return &ProjectTemplatesServiceInterface_Expecter{mock: &_m.Mock}
}

// GetProjectTemplate provides a mock function with given fields: pid, templateType, templateName, options
func (_m *ProjectTemplatesServiceInterface) GetProjectTemplate(pid interface{}, templateType string, templateName string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, templateType, templateName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectTemplate")
	}

	var r0 *gitlab.ProjectTemplate
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error)); ok {
		return rf(pid, templateType, templateName, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) *gitlab.ProjectTemplate); ok {
		r0 = rf(pid, templateType, templateName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, templateType, templateName, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, templateType, templateName, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectTemplatesServiceInterface_GetProjectTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectTemplate'
type ProjectTemplatesServiceInterface_GetProjectTemplate_Call struct {
	*mock.Call
}

// GetProjectTemplate is a helper method to define mock.On call
//   - pid interface{}
//   - templateType string
//   - templateName string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectTemplatesServiceInterface_Expecter) GetProjectTemplate(pid interface{}, templateType interface{}, templateName interface{}, options ...interface{}) *ProjectTemplatesServiceInterface_GetProjectTemplate_Call {
	return &ProjectTemplatesServiceInterface_GetProjectTemplate_Call{Call: _e.mock.On("GetProjectTemplate",
		append([]interface{}{pid, templateType, templateName}, options...)...)}
}

func (_c *ProjectTemplatesServiceInterface_GetProjectTemplate_Call) Run(run func(pid interface{}, templateType string, templateName string, options ...gitlab.RequestOptionFunc)) *ProjectTemplatesServiceInterface_GetProjectTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectTemplatesServiceInterface_GetProjectTemplate_Call) Return(_a0 *gitlab.ProjectTemplate, _a1 *gitlab.Response, _a2 error) *ProjectTemplatesServiceInterface_GetProjectTemplate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectTemplatesServiceInterface_GetProjectTemplate_Call) RunAndReturn(run func(interface{}, string, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error)) *ProjectTemplatesServiceInterface_GetProjectTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplates provides a mock function with given fields: pid, templateType, opt, options
func (_m *ProjectTemplatesServiceInterface) ListTemplates(pid interface{}, templateType string, opt *gitlab.ListProjectTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, templateType, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 []*gitlab.ProjectTemplate
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error)); ok {
		return rf(pid, templateType, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectTemplate); ok {
		r0 = rf(pid, templateType, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, templateType, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, templateType, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectTemplatesServiceInterface_ListTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplates'
type ProjectTemplatesServiceInterface_ListTemplates_Call struct {
	*mock.Call
}

// ListTemplates is a helper method to define mock.On call
//   - pid interface{}
//   - templateType string
//   - opt *gitlab.ListProjectTemplatesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectTemplatesServiceInterface_Expecter) ListTemplates(pid interface{}, templateType interface{}, opt interface{}, options ...interface{}) *ProjectTemplatesServiceInterface_ListTemplates_Call {
	return &ProjectTemplatesServiceInterface_ListTemplates_Call{Call: _e.mock.On("ListTemplates",
		append([]interface{}{pid, templateType, opt}, options...)...)}
}

func (_c *ProjectTemplatesServiceInterface_ListTemplates_Call) Run(run func(pid interface{}, templateType string, opt *gitlab.ListProjectTemplatesOptions, options ...gitlab.RequestOptionFunc)) *ProjectTemplatesServiceInterface_ListTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.ListProjectTemplatesOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectTemplatesServiceInterface_ListTemplates_Call) Return(_a0 []*gitlab.ProjectTemplate, _a1 *gitlab.Response, _a2 error) *ProjectTemplatesServiceInterface_ListTemplates_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectTemplatesServiceInterface_ListTemplates_Call) RunAndReturn(run func(interface{}, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error)) *ProjectTemplatesServiceInterface_ListTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectTemplatesServiceInterface creates a new instance of ProjectTemplatesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectTemplatesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectTemplatesServiceInterface {
	mock := &ProjectTemplatesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
