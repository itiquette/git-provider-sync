// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// GenericPackagesServiceInterface is an autogenerated mock type for the GenericPackagesServiceInterface type
type GenericPackagesServiceInterface struct {
	mock.Mock
}

type GenericPackagesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GenericPackagesServiceInterface) EXPECT() *GenericPackagesServiceInterface_Expecter {
	return &GenericPackagesServiceInterface_Expecter{mock: &_m.Mock}
}

// DownloadPackageFile provides a mock function with given fields: pid, packageName, packageVersion, fileName, options
func (_m *GenericPackagesServiceInterface) DownloadPackageFile(pid interface{}, packageName string, packageVersion string, fileName string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, packageName, packageVersion, fileName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadPackageFile")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, packageName, packageVersion, fileName, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, packageName, packageVersion, fileName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, packageName, packageVersion, fileName, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, string, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, packageName, packageVersion, fileName, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenericPackagesServiceInterface_DownloadPackageFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadPackageFile'
type GenericPackagesServiceInterface_DownloadPackageFile_Call struct {
	*mock.Call
}

// DownloadPackageFile is a helper method to define mock.On call
//   - pid interface{}
//   - packageName string
//   - packageVersion string
//   - fileName string
//   - options ...gitlab.RequestOptionFunc
func (_e *GenericPackagesServiceInterface_Expecter) DownloadPackageFile(pid interface{}, packageName interface{}, packageVersion interface{}, fileName interface{}, options ...interface{}) *GenericPackagesServiceInterface_DownloadPackageFile_Call {
	return &GenericPackagesServiceInterface_DownloadPackageFile_Call{Call: _e.mock.On("DownloadPackageFile",
		append([]interface{}{pid, packageName, packageVersion, fileName}, options...)...)}
}

func (_c *GenericPackagesServiceInterface_DownloadPackageFile_Call) Run(run func(pid interface{}, packageName string, packageVersion string, fileName string, options ...gitlab.RequestOptionFunc)) *GenericPackagesServiceInterface_DownloadPackageFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *GenericPackagesServiceInterface_DownloadPackageFile_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *GenericPackagesServiceInterface_DownloadPackageFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GenericPackagesServiceInterface_DownloadPackageFile_Call) RunAndReturn(run func(interface{}, string, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *GenericPackagesServiceInterface_DownloadPackageFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormatPackageURL provides a mock function with given fields: pid, packageName, packageVersion, fileName
func (_m *GenericPackagesServiceInterface) FormatPackageURL(pid interface{}, packageName string, packageVersion string, fileName string) (string, error) {
	ret := _m.Called(pid, packageName, packageVersion, fileName)

	if len(ret) == 0 {
		panic("no return value specified for FormatPackageURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string) (string, error)); ok {
		return rf(pid, packageName, packageVersion, fileName)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string) string); ok {
		r0 = rf(pid, packageName, packageVersion, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, string) error); ok {
		r1 = rf(pid, packageName, packageVersion, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenericPackagesServiceInterface_FormatPackageURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatPackageURL'
type GenericPackagesServiceInterface_FormatPackageURL_Call struct {
	*mock.Call
}

// FormatPackageURL is a helper method to define mock.On call
//   - pid interface{}
//   - packageName string
//   - packageVersion string
//   - fileName string
func (_e *GenericPackagesServiceInterface_Expecter) FormatPackageURL(pid interface{}, packageName interface{}, packageVersion interface{}, fileName interface{}) *GenericPackagesServiceInterface_FormatPackageURL_Call {
	return &GenericPackagesServiceInterface_FormatPackageURL_Call{Call: _e.mock.On("FormatPackageURL", pid, packageName, packageVersion, fileName)}
}

func (_c *GenericPackagesServiceInterface_FormatPackageURL_Call) Run(run func(pid interface{}, packageName string, packageVersion string, fileName string)) *GenericPackagesServiceInterface_FormatPackageURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GenericPackagesServiceInterface_FormatPackageURL_Call) Return(_a0 string, _a1 error) *GenericPackagesServiceInterface_FormatPackageURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenericPackagesServiceInterface_FormatPackageURL_Call) RunAndReturn(run func(interface{}, string, string, string) (string, error)) *GenericPackagesServiceInterface_FormatPackageURL_Call {
	_c.Call.Return(run)
	return _c
}

// PublishPackageFile provides a mock function with given fields: pid, packageName, packageVersion, fileName, content, opt, options
func (_m *GenericPackagesServiceInterface) PublishPackageFile(pid interface{}, packageName string, packageVersion string, fileName string, content io.Reader, opt *gitlab.PublishPackageFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, packageName, packageVersion, fileName, content, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishPackageFile")
	}

	var r0 *gitlab.GenericPackagesFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error)); ok {
		return rf(pid, packageName, packageVersion, fileName, content, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) *gitlab.GenericPackagesFile); ok {
		r0 = rf(pid, packageName, packageVersion, fileName, content, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GenericPackagesFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, packageName, packageVersion, fileName, content, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, packageName, packageVersion, fileName, content, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenericPackagesServiceInterface_PublishPackageFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishPackageFile'
type GenericPackagesServiceInterface_PublishPackageFile_Call struct {
	*mock.Call
}

// PublishPackageFile is a helper method to define mock.On call
//   - pid interface{}
//   - packageName string
//   - packageVersion string
//   - fileName string
//   - content io.Reader
//   - opt *gitlab.PublishPackageFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GenericPackagesServiceInterface_Expecter) PublishPackageFile(pid interface{}, packageName interface{}, packageVersion interface{}, fileName interface{}, content interface{}, opt interface{}, options ...interface{}) *GenericPackagesServiceInterface_PublishPackageFile_Call {
	return &GenericPackagesServiceInterface_PublishPackageFile_Call{Call: _e.mock.On("PublishPackageFile",
		append([]interface{}{pid, packageName, packageVersion, fileName, content, opt}, options...)...)}
}

func (_c *GenericPackagesServiceInterface_PublishPackageFile_Call) Run(run func(pid interface{}, packageName string, packageVersion string, fileName string, content io.Reader, opt *gitlab.PublishPackageFileOptions, options ...gitlab.RequestOptionFunc)) *GenericPackagesServiceInterface_PublishPackageFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), args[3].(string), args[4].(io.Reader), args[5].(*gitlab.PublishPackageFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *GenericPackagesServiceInterface_PublishPackageFile_Call) Return(_a0 *gitlab.GenericPackagesFile, _a1 *gitlab.Response, _a2 error) *GenericPackagesServiceInterface_PublishPackageFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GenericPackagesServiceInterface_PublishPackageFile_Call) RunAndReturn(run func(interface{}, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error)) *GenericPackagesServiceInterface_PublishPackageFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenericPackagesServiceInterface creates a new instance of GenericPackagesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericPackagesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericPackagesServiceInterface {
	mock := &GenericPackagesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
