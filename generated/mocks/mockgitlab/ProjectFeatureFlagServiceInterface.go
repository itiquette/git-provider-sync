// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProjectFeatureFlagServiceInterface is an autogenerated mock type for the ProjectFeatureFlagServiceInterface type
type ProjectFeatureFlagServiceInterface struct {
	mock.Mock
}

type ProjectFeatureFlagServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectFeatureFlagServiceInterface) EXPECT() *ProjectFeatureFlagServiceInterface_Expecter {
	return &ProjectFeatureFlagServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateProjectFeatureFlag provides a mock function with given fields: pid, opt, options
func (_m *ProjectFeatureFlagServiceInterface) CreateProjectFeatureFlag(pid interface{}, opt *gitlab.CreateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectFeatureFlag")
	}

	var r0 *gitlab.ProjectFeatureFlag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectFeatureFlag); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectFeatureFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectFeatureFlag'
type ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call struct {
	*mock.Call
}

// CreateProjectFeatureFlag is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateProjectFeatureFlagOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectFeatureFlagServiceInterface_Expecter) CreateProjectFeatureFlag(pid interface{}, opt interface{}, options ...interface{}) *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call {
	return &ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call{Call: _e.mock.On("CreateProjectFeatureFlag",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call) Run(run func(pid interface{}, opt *gitlab.CreateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc)) *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateProjectFeatureFlagOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call) Return(_a0 *gitlab.ProjectFeatureFlag, _a1 *gitlab.Response, _a2 error) *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call) RunAndReturn(run func(interface{}, *gitlab.CreateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)) *ProjectFeatureFlagServiceInterface_CreateProjectFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectFeatureFlag provides a mock function with given fields: pid, name, options
func (_m *ProjectFeatureFlagServiceInterface) DeleteProjectFeatureFlag(pid interface{}, name string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectFeatureFlag")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, name, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, name, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectFeatureFlag'
type ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call struct {
	*mock.Call
}

// DeleteProjectFeatureFlag is a helper method to define mock.On call
//   - pid interface{}
//   - name string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectFeatureFlagServiceInterface_Expecter) DeleteProjectFeatureFlag(pid interface{}, name interface{}, options ...interface{}) *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call {
	return &ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call{Call: _e.mock.On("DeleteProjectFeatureFlag",
		append([]interface{}{pid, name}, options...)...)}
}

func (_c *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call) Run(run func(pid interface{}, name string, options ...gitlab.RequestOptionFunc)) *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectFeatureFlagServiceInterface_DeleteProjectFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectFeatureFlag provides a mock function with given fields: pid, name, options
func (_m *ProjectFeatureFlagServiceInterface) GetProjectFeatureFlag(pid interface{}, name string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectFeatureFlag")
	}

	var r0 *gitlab.ProjectFeatureFlag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)); ok {
		return rf(pid, name, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.ProjectFeatureFlag); ok {
		r0 = rf(pid, name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectFeatureFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, name, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, name, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectFeatureFlag'
type ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call struct {
	*mock.Call
}

// GetProjectFeatureFlag is a helper method to define mock.On call
//   - pid interface{}
//   - name string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectFeatureFlagServiceInterface_Expecter) GetProjectFeatureFlag(pid interface{}, name interface{}, options ...interface{}) *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call {
	return &ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call{Call: _e.mock.On("GetProjectFeatureFlag",
		append([]interface{}{pid, name}, options...)...)}
}

func (_c *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call) Run(run func(pid interface{}, name string, options ...gitlab.RequestOptionFunc)) *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call) Return(_a0 *gitlab.ProjectFeatureFlag, _a1 *gitlab.Response, _a2 error) *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)) *ProjectFeatureFlagServiceInterface_GetProjectFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectFeatureFlags provides a mock function with given fields: pid, opt, options
func (_m *ProjectFeatureFlagServiceInterface) ListProjectFeatureFlags(pid interface{}, opt *gitlab.ListProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectFeatureFlags")
	}

	var r0 []*gitlab.ProjectFeatureFlag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectFeatureFlag, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectFeatureFlag); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectFeatureFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectFeatureFlags'
type ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call struct {
	*mock.Call
}

// ListProjectFeatureFlags is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectFeatureFlagOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectFeatureFlagServiceInterface_Expecter) ListProjectFeatureFlags(pid interface{}, opt interface{}, options ...interface{}) *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call {
	return &ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call{Call: _e.mock.On("ListProjectFeatureFlags",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc)) *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectFeatureFlagOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call) Return(_a0 []*gitlab.ProjectFeatureFlag, _a1 *gitlab.Response, _a2 error) *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectFeatureFlag, *gitlab.Response, error)) *ProjectFeatureFlagServiceInterface_ListProjectFeatureFlags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectFeatureFlag provides a mock function with given fields: pid, name, opt, options
func (_m *ProjectFeatureFlagServiceInterface) UpdateProjectFeatureFlag(pid interface{}, name string, opt *gitlab.UpdateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, name, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectFeatureFlag")
	}

	var r0 *gitlab.ProjectFeatureFlag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)); ok {
		return rf(pid, name, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectFeatureFlag); ok {
		r0 = rf(pid, name, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectFeatureFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, name, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, name, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectFeatureFlag'
type ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call struct {
	*mock.Call
}

// UpdateProjectFeatureFlag is a helper method to define mock.On call
//   - pid interface{}
//   - name string
//   - opt *gitlab.UpdateProjectFeatureFlagOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectFeatureFlagServiceInterface_Expecter) UpdateProjectFeatureFlag(pid interface{}, name interface{}, opt interface{}, options ...interface{}) *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call {
	return &ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call{Call: _e.mock.On("UpdateProjectFeatureFlag",
		append([]interface{}{pid, name, opt}, options...)...)}
}

func (_c *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call) Run(run func(pid interface{}, name string, opt *gitlab.UpdateProjectFeatureFlagOptions, options ...gitlab.RequestOptionFunc)) *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateProjectFeatureFlagOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call) Return(_a0 *gitlab.ProjectFeatureFlag, _a1 *gitlab.Response, _a2 error) *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateProjectFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectFeatureFlag, *gitlab.Response, error)) *ProjectFeatureFlagServiceInterface_UpdateProjectFeatureFlag_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectFeatureFlagServiceInterface creates a new instance of ProjectFeatureFlagServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectFeatureFlagServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectFeatureFlagServiceInterface {
	mock := &ProjectFeatureFlagServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
