// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// MergeRequestApprovalSettingsServiceInterface is an autogenerated mock type for the MergeRequestApprovalSettingsServiceInterface type
type MergeRequestApprovalSettingsServiceInterface struct {
	mock.Mock
}

type MergeRequestApprovalSettingsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MergeRequestApprovalSettingsServiceInterface) EXPECT() *MergeRequestApprovalSettingsServiceInterface_Expecter {
	return &MergeRequestApprovalSettingsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupMergeRequestApprovalSettings provides a mock function with given fields: gid, options
func (_m *MergeRequestApprovalSettingsServiceInterface) GetGroupMergeRequestApprovalSettings(gid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMergeRequestApprovalSettings")
	}

	var r0 *gitlab.MergeRequestApprovalSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)); ok {
		return rf(gid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.MergeRequestApprovalSettings); ok {
		r0 = rf(gid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequestApprovalSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMergeRequestApprovalSettings'
type MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call struct {
	*mock.Call
}

// GetGroupMergeRequestApprovalSettings is a helper method to define mock.On call
//   - gid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeRequestApprovalSettingsServiceInterface_Expecter) GetGroupMergeRequestApprovalSettings(gid interface{}, options ...interface{}) *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call {
	return &MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call{Call: _e.mock.On("GetGroupMergeRequestApprovalSettings",
		append([]interface{}{gid}, options...)...)}
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call) Run(run func(gid interface{}, options ...gitlab.RequestOptionFunc)) *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call) Return(_a0 *gitlab.MergeRequestApprovalSettings, _a1 *gitlab.Response, _a2 error) *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MergeRequestApprovalSettingsServiceInterface_GetGroupMergeRequestApprovalSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMergeRequestApprovalSettings provides a mock function with given fields: pid, options
func (_m *MergeRequestApprovalSettingsServiceInterface) GetProjectMergeRequestApprovalSettings(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMergeRequestApprovalSettings")
	}

	var r0 *gitlab.MergeRequestApprovalSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.MergeRequestApprovalSettings); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequestApprovalSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMergeRequestApprovalSettings'
type MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call struct {
	*mock.Call
}

// GetProjectMergeRequestApprovalSettings is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeRequestApprovalSettingsServiceInterface_Expecter) GetProjectMergeRequestApprovalSettings(pid interface{}, options ...interface{}) *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call {
	return &MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call{Call: _e.mock.On("GetProjectMergeRequestApprovalSettings",
		append([]interface{}{pid}, options...)...)}
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call) Return(_a0 *gitlab.MergeRequestApprovalSettings, _a1 *gitlab.Response, _a2 error) *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MergeRequestApprovalSettingsServiceInterface_GetProjectMergeRequestApprovalSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupMergeRequestApprovalSettings provides a mock function with given fields: gid, opt, options
func (_m *MergeRequestApprovalSettingsServiceInterface) UpdateGroupMergeRequestApprovalSettings(gid interface{}, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupMergeRequestApprovalSettings")
	}

	var r0 *gitlab.MergeRequestApprovalSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequestApprovalSettings); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequestApprovalSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupMergeRequestApprovalSettings'
type MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call struct {
	*mock.Call
}

// UpdateGroupMergeRequestApprovalSettings is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.UpdateMergeRequestApprovalSettingsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeRequestApprovalSettingsServiceInterface_Expecter) UpdateGroupMergeRequestApprovalSettings(gid interface{}, opt interface{}, options ...interface{}) *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call {
	return &MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call{Call: _e.mock.On("UpdateGroupMergeRequestApprovalSettings",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call) Run(run func(gid interface{}, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc)) *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.UpdateMergeRequestApprovalSettingsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call) Return(_a0 *gitlab.MergeRequestApprovalSettings, _a1 *gitlab.Response, _a2 error) *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call) RunAndReturn(run func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MergeRequestApprovalSettingsServiceInterface_UpdateGroupMergeRequestApprovalSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectMergeRequestApprovalSettings provides a mock function with given fields: pid, opt, options
func (_m *MergeRequestApprovalSettingsServiceInterface) UpdateProjectMergeRequestApprovalSettings(pid interface{}, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectMergeRequestApprovalSettings")
	}

	var r0 *gitlab.MergeRequestApprovalSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequestApprovalSettings); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequestApprovalSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectMergeRequestApprovalSettings'
type MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call struct {
	*mock.Call
}

// UpdateProjectMergeRequestApprovalSettings is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.UpdateMergeRequestApprovalSettingsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeRequestApprovalSettingsServiceInterface_Expecter) UpdateProjectMergeRequestApprovalSettings(pid interface{}, opt interface{}, options ...interface{}) *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call {
	return &MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call{Call: _e.mock.On("UpdateProjectMergeRequestApprovalSettings",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call) Run(run func(pid interface{}, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc)) *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.UpdateMergeRequestApprovalSettingsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call) Return(_a0 *gitlab.MergeRequestApprovalSettings, _a1 *gitlab.Response, _a2 error) *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call) RunAndReturn(run func(interface{}, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MergeRequestApprovalSettingsServiceInterface_UpdateProjectMergeRequestApprovalSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMergeRequestApprovalSettingsServiceInterface creates a new instance of MergeRequestApprovalSettingsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeRequestApprovalSettingsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeRequestApprovalSettingsServiceInterface {
	mock := &MergeRequestApprovalSettingsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
