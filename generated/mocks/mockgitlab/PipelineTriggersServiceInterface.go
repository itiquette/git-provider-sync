// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// PipelineTriggersServiceInterface is an autogenerated mock type for the PipelineTriggersServiceInterface type
type PipelineTriggersServiceInterface struct {
	mock.Mock
}

type PipelineTriggersServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineTriggersServiceInterface) EXPECT() *PipelineTriggersServiceInterface_Expecter {
	return &PipelineTriggersServiceInterface_Expecter{mock: &_m.Mock}
}

// AddPipelineTrigger provides a mock function with given fields: pid, opt, options
func (_m *PipelineTriggersServiceInterface) AddPipelineTrigger(pid interface{}, opt *gitlab.AddPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPipelineTrigger")
	}

	var r0 *gitlab.PipelineTrigger
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.PipelineTrigger); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PipelineTrigger)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddPipelineTriggerOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_AddPipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPipelineTrigger'
type PipelineTriggersServiceInterface_AddPipelineTrigger_Call struct {
	*mock.Call
}

// AddPipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddPipelineTriggerOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) AddPipelineTrigger(pid interface{}, opt interface{}, options ...interface{}) *PipelineTriggersServiceInterface_AddPipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_AddPipelineTrigger_Call{Call: _e.mock.On("AddPipelineTrigger",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_AddPipelineTrigger_Call) Run(run func(pid interface{}, opt *gitlab.AddPipelineTriggerOptions, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_AddPipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddPipelineTriggerOptions), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_AddPipelineTrigger_Call) Return(_a0 *gitlab.PipelineTrigger, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_AddPipelineTrigger_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_AddPipelineTrigger_Call) RunAndReturn(run func(interface{}, *gitlab.AddPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)) *PipelineTriggersServiceInterface_AddPipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineTrigger provides a mock function with given fields: pid, trigger, options
func (_m *PipelineTriggersServiceInterface) DeletePipelineTrigger(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, trigger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineTrigger")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, trigger, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, trigger, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, trigger, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineTriggersServiceInterface_DeletePipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineTrigger'
type PipelineTriggersServiceInterface_DeletePipelineTrigger_Call struct {
	*mock.Call
}

// DeletePipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - trigger int
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) DeletePipelineTrigger(pid interface{}, trigger interface{}, options ...interface{}) *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_DeletePipelineTrigger_Call{Call: _e.mock.On("DeletePipelineTrigger",
		append([]interface{}{pid, trigger}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call) Run(run func(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call) Return(_a0 *gitlab.Response, _a1 error) *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *PipelineTriggersServiceInterface_DeletePipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// EditPipelineTrigger provides a mock function with given fields: pid, trigger, opt, options
func (_m *PipelineTriggersServiceInterface) EditPipelineTrigger(pid interface{}, trigger int, opt *gitlab.EditPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, trigger, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditPipelineTrigger")
	}

	var r0 *gitlab.PipelineTrigger
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)); ok {
		return rf(pid, trigger, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.PipelineTrigger); ok {
		r0 = rf(pid, trigger, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PipelineTrigger)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, trigger, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditPipelineTriggerOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, trigger, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_EditPipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditPipelineTrigger'
type PipelineTriggersServiceInterface_EditPipelineTrigger_Call struct {
	*mock.Call
}

// EditPipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - trigger int
//   - opt *gitlab.EditPipelineTriggerOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) EditPipelineTrigger(pid interface{}, trigger interface{}, opt interface{}, options ...interface{}) *PipelineTriggersServiceInterface_EditPipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_EditPipelineTrigger_Call{Call: _e.mock.On("EditPipelineTrigger",
		append([]interface{}{pid, trigger, opt}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_EditPipelineTrigger_Call) Run(run func(pid interface{}, trigger int, opt *gitlab.EditPipelineTriggerOptions, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_EditPipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.EditPipelineTriggerOptions), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_EditPipelineTrigger_Call) Return(_a0 *gitlab.PipelineTrigger, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_EditPipelineTrigger_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_EditPipelineTrigger_Call) RunAndReturn(run func(interface{}, int, *gitlab.EditPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)) *PipelineTriggersServiceInterface_EditPipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineTrigger provides a mock function with given fields: pid, trigger, options
func (_m *PipelineTriggersServiceInterface) GetPipelineTrigger(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, trigger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineTrigger")
	}

	var r0 *gitlab.PipelineTrigger
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)); ok {
		return rf(pid, trigger, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.PipelineTrigger); ok {
		r0 = rf(pid, trigger, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PipelineTrigger)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, trigger, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, trigger, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_GetPipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineTrigger'
type PipelineTriggersServiceInterface_GetPipelineTrigger_Call struct {
	*mock.Call
}

// GetPipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - trigger int
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) GetPipelineTrigger(pid interface{}, trigger interface{}, options ...interface{}) *PipelineTriggersServiceInterface_GetPipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_GetPipelineTrigger_Call{Call: _e.mock.On("GetPipelineTrigger",
		append([]interface{}{pid, trigger}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_GetPipelineTrigger_Call) Run(run func(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_GetPipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_GetPipelineTrigger_Call) Return(_a0 *gitlab.PipelineTrigger, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_GetPipelineTrigger_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_GetPipelineTrigger_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)) *PipelineTriggersServiceInterface_GetPipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineTriggers provides a mock function with given fields: pid, opt, options
func (_m *PipelineTriggersServiceInterface) ListPipelineTriggers(pid interface{}, opt *gitlab.ListPipelineTriggersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineTrigger, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineTriggers")
	}

	var r0 []*gitlab.PipelineTrigger
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListPipelineTriggersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineTrigger, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListPipelineTriggersOptions, ...gitlab.RequestOptionFunc) []*gitlab.PipelineTrigger); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.PipelineTrigger)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListPipelineTriggersOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListPipelineTriggersOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_ListPipelineTriggers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineTriggers'
type PipelineTriggersServiceInterface_ListPipelineTriggers_Call struct {
	*mock.Call
}

// ListPipelineTriggers is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListPipelineTriggersOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) ListPipelineTriggers(pid interface{}, opt interface{}, options ...interface{}) *PipelineTriggersServiceInterface_ListPipelineTriggers_Call {
	return &PipelineTriggersServiceInterface_ListPipelineTriggers_Call{Call: _e.mock.On("ListPipelineTriggers",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_ListPipelineTriggers_Call) Run(run func(pid interface{}, opt *gitlab.ListPipelineTriggersOptions, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_ListPipelineTriggers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListPipelineTriggersOptions), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_ListPipelineTriggers_Call) Return(_a0 []*gitlab.PipelineTrigger, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_ListPipelineTriggers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_ListPipelineTriggers_Call) RunAndReturn(run func(interface{}, *gitlab.ListPipelineTriggersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PipelineTrigger, *gitlab.Response, error)) *PipelineTriggersServiceInterface_ListPipelineTriggers_Call {
	_c.Call.Return(run)
	return _c
}

// RunPipelineTrigger provides a mock function with given fields: pid, opt, options
func (_m *PipelineTriggersServiceInterface) RunPipelineTrigger(pid interface{}, opt *gitlab.RunPipelineTriggerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunPipelineTrigger")
	}

	var r0 *gitlab.Pipeline
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.RunPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.RunPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.Pipeline); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.RunPipelineTriggerOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.RunPipelineTriggerOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_RunPipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPipelineTrigger'
type PipelineTriggersServiceInterface_RunPipelineTrigger_Call struct {
	*mock.Call
}

// RunPipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.RunPipelineTriggerOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) RunPipelineTrigger(pid interface{}, opt interface{}, options ...interface{}) *PipelineTriggersServiceInterface_RunPipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_RunPipelineTrigger_Call{Call: _e.mock.On("RunPipelineTrigger",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_RunPipelineTrigger_Call) Run(run func(pid interface{}, opt *gitlab.RunPipelineTriggerOptions, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_RunPipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.RunPipelineTriggerOptions), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_RunPipelineTrigger_Call) Return(_a0 *gitlab.Pipeline, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_RunPipelineTrigger_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_RunPipelineTrigger_Call) RunAndReturn(run func(interface{}, *gitlab.RunPipelineTriggerOptions, ...gitlab.RequestOptionFunc) (*gitlab.Pipeline, *gitlab.Response, error)) *PipelineTriggersServiceInterface_RunPipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// TakeOwnershipOfPipelineTrigger provides a mock function with given fields: pid, trigger, options
func (_m *PipelineTriggersServiceInterface) TakeOwnershipOfPipelineTrigger(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, trigger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TakeOwnershipOfPipelineTrigger")
	}

	var r0 *gitlab.PipelineTrigger
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)); ok {
		return rf(pid, trigger, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.PipelineTrigger); ok {
		r0 = rf(pid, trigger, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PipelineTrigger)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, trigger, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, trigger, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeOwnershipOfPipelineTrigger'
type PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call struct {
	*mock.Call
}

// TakeOwnershipOfPipelineTrigger is a helper method to define mock.On call
//   - pid interface{}
//   - trigger int
//   - options ...gitlab.RequestOptionFunc
func (_e *PipelineTriggersServiceInterface_Expecter) TakeOwnershipOfPipelineTrigger(pid interface{}, trigger interface{}, options ...interface{}) *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call {
	return &PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call{Call: _e.mock.On("TakeOwnershipOfPipelineTrigger",
		append([]interface{}{pid, trigger}, options...)...)}
}

func (_c *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call) Run(run func(pid interface{}, trigger int, options ...gitlab.RequestOptionFunc)) *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call) Return(_a0 *gitlab.PipelineTrigger, _a1 *gitlab.Response, _a2 error) *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.PipelineTrigger, *gitlab.Response, error)) *PipelineTriggersServiceInterface_TakeOwnershipOfPipelineTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// NewPipelineTriggersServiceInterface creates a new instance of PipelineTriggersServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineTriggersServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineTriggersServiceInterface {
	mock := &PipelineTriggersServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
