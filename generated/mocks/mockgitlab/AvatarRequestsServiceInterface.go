// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// AvatarRequestsServiceInterface is an autogenerated mock type for the AvatarRequestsServiceInterface type
type AvatarRequestsServiceInterface struct {
	mock.Mock
}

type AvatarRequestsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AvatarRequestsServiceInterface) EXPECT() *AvatarRequestsServiceInterface_Expecter {
	return &AvatarRequestsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetAvatar provides a mock function with given fields: opt, options
func (_m *AvatarRequestsServiceInterface) GetAvatar(opt *gitlab.GetAvatarOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Avatar, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAvatar")
	}

	var r0 *gitlab.Avatar
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.GetAvatarOptions, ...gitlab.RequestOptionFunc) (*gitlab.Avatar, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.GetAvatarOptions, ...gitlab.RequestOptionFunc) *gitlab.Avatar); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Avatar)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.GetAvatarOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.GetAvatarOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AvatarRequestsServiceInterface_GetAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvatar'
type AvatarRequestsServiceInterface_GetAvatar_Call struct {
	*mock.Call
}

// GetAvatar is a helper method to define mock.On call
//   - opt *gitlab.GetAvatarOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AvatarRequestsServiceInterface_Expecter) GetAvatar(opt interface{}, options ...interface{}) *AvatarRequestsServiceInterface_GetAvatar_Call {
	return &AvatarRequestsServiceInterface_GetAvatar_Call{Call: _e.mock.On("GetAvatar",
		append([]interface{}{opt}, options...)...)}
}

func (_c *AvatarRequestsServiceInterface_GetAvatar_Call) Run(run func(opt *gitlab.GetAvatarOptions, options ...gitlab.RequestOptionFunc)) *AvatarRequestsServiceInterface_GetAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.GetAvatarOptions), variadicArgs...)
	})
	return _c
}

func (_c *AvatarRequestsServiceInterface_GetAvatar_Call) Return(_a0 *gitlab.Avatar, _a1 *gitlab.Response, _a2 error) *AvatarRequestsServiceInterface_GetAvatar_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AvatarRequestsServiceInterface_GetAvatar_Call) RunAndReturn(run func(*gitlab.GetAvatarOptions, ...gitlab.RequestOptionFunc) (*gitlab.Avatar, *gitlab.Response, error)) *AvatarRequestsServiceInterface_GetAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// NewAvatarRequestsServiceInterface creates a new instance of AvatarRequestsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAvatarRequestsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AvatarRequestsServiceInterface {
	mock := &AvatarRequestsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
