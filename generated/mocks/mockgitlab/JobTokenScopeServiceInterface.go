// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// JobTokenScopeServiceInterface is an autogenerated mock type for the JobTokenScopeServiceInterface type
type JobTokenScopeServiceInterface struct {
	mock.Mock
}

type JobTokenScopeServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *JobTokenScopeServiceInterface) EXPECT() *JobTokenScopeServiceInterface_Expecter {
	return &JobTokenScopeServiceInterface_Expecter{mock: &_m.Mock}
}

// AddGroupToJobTokenAllowlist provides a mock function with given fields: pid, opt, options
func (_m *JobTokenScopeServiceInterface) AddGroupToJobTokenAllowlist(pid interface{}, opt *gitlab.AddGroupToJobTokenAllowlistOptions, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAllowlistItem, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupToJobTokenAllowlist")
	}

	var r0 *gitlab.JobTokenAllowlistItem
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddGroupToJobTokenAllowlistOptions, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAllowlistItem, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddGroupToJobTokenAllowlistOptions, ...gitlab.RequestOptionFunc) *gitlab.JobTokenAllowlistItem); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.JobTokenAllowlistItem)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddGroupToJobTokenAllowlistOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddGroupToJobTokenAllowlistOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupToJobTokenAllowlist'
type JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call struct {
	*mock.Call
}

// AddGroupToJobTokenAllowlist is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddGroupToJobTokenAllowlistOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) AddGroupToJobTokenAllowlist(pid interface{}, opt interface{}, options ...interface{}) *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call {
	return &JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call{Call: _e.mock.On("AddGroupToJobTokenAllowlist",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call) Run(run func(pid interface{}, opt *gitlab.AddGroupToJobTokenAllowlistOptions, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddGroupToJobTokenAllowlistOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call) Return(_a0 *gitlab.JobTokenAllowlistItem, _a1 *gitlab.Response, _a2 error) *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call) RunAndReturn(run func(interface{}, *gitlab.AddGroupToJobTokenAllowlistOptions, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAllowlistItem, *gitlab.Response, error)) *JobTokenScopeServiceInterface_AddGroupToJobTokenAllowlist_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectToJobScopeAllowList provides a mock function with given fields: pid, opt, options
func (_m *JobTokenScopeServiceInterface) AddProjectToJobScopeAllowList(pid interface{}, opt *gitlab.JobTokenInboundAllowOptions, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenInboundAllowItem, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToJobScopeAllowList")
	}

	var r0 *gitlab.JobTokenInboundAllowItem
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.JobTokenInboundAllowOptions, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenInboundAllowItem, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.JobTokenInboundAllowOptions, ...gitlab.RequestOptionFunc) *gitlab.JobTokenInboundAllowItem); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.JobTokenInboundAllowItem)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.JobTokenInboundAllowOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.JobTokenInboundAllowOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToJobScopeAllowList'
type JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call struct {
	*mock.Call
}

// AddProjectToJobScopeAllowList is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.JobTokenInboundAllowOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) AddProjectToJobScopeAllowList(pid interface{}, opt interface{}, options ...interface{}) *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call {
	return &JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call{Call: _e.mock.On("AddProjectToJobScopeAllowList",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call) Run(run func(pid interface{}, opt *gitlab.JobTokenInboundAllowOptions, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.JobTokenInboundAllowOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call) Return(_a0 *gitlab.JobTokenInboundAllowItem, _a1 *gitlab.Response, _a2 error) *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call) RunAndReturn(run func(interface{}, *gitlab.JobTokenInboundAllowOptions, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenInboundAllowItem, *gitlab.Response, error)) *JobTokenScopeServiceInterface_AddProjectToJobScopeAllowList_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobTokenAllowlistGroups provides a mock function with given fields: pid, opt, options
func (_m *JobTokenScopeServiceInterface) GetJobTokenAllowlistGroups(pid interface{}, opt *gitlab.GetJobTokenAllowlistGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobTokenAllowlistGroups")
	}

	var r0 []*gitlab.Group
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetJobTokenAllowlistGroupsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetJobTokenAllowlistGroupsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Group); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.GetJobTokenAllowlistGroupsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.GetJobTokenAllowlistGroupsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobTokenAllowlistGroups'
type JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call struct {
	*mock.Call
}

// GetJobTokenAllowlistGroups is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.GetJobTokenAllowlistGroupsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) GetJobTokenAllowlistGroups(pid interface{}, opt interface{}, options ...interface{}) *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call {
	return &JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call{Call: _e.mock.On("GetJobTokenAllowlistGroups",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call) Run(run func(pid interface{}, opt *gitlab.GetJobTokenAllowlistGroupsOptions, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.GetJobTokenAllowlistGroupsOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call) Return(_a0 []*gitlab.Group, _a1 *gitlab.Response, _a2 error) *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call) RunAndReturn(run func(interface{}, *gitlab.GetJobTokenAllowlistGroupsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error)) *JobTokenScopeServiceInterface_GetJobTokenAllowlistGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectJobTokenAccessSettings provides a mock function with given fields: pid, options
func (_m *JobTokenScopeServiceInterface) GetProjectJobTokenAccessSettings(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAccessSettings, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectJobTokenAccessSettings")
	}

	var r0 *gitlab.JobTokenAccessSettings
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAccessSettings, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.JobTokenAccessSettings); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.JobTokenAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectJobTokenAccessSettings'
type JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call struct {
	*mock.Call
}

// GetProjectJobTokenAccessSettings is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) GetProjectJobTokenAccessSettings(pid interface{}, options ...interface{}) *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call {
	return &JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call{Call: _e.mock.On("GetProjectJobTokenAccessSettings",
		append([]interface{}{pid}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call) Return(_a0 *gitlab.JobTokenAccessSettings, _a1 *gitlab.Response, _a2 error) *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.JobTokenAccessSettings, *gitlab.Response, error)) *JobTokenScopeServiceInterface_GetProjectJobTokenAccessSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectJobTokenInboundAllowList provides a mock function with given fields: pid, opt, options
func (_m *JobTokenScopeServiceInterface) GetProjectJobTokenInboundAllowList(pid interface{}, opt *gitlab.GetJobTokenInboundAllowListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectJobTokenInboundAllowList")
	}

	var r0 []*gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetJobTokenInboundAllowListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetJobTokenInboundAllowListOptions, ...gitlab.RequestOptionFunc) []*gitlab.Project); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.GetJobTokenInboundAllowListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.GetJobTokenInboundAllowListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectJobTokenInboundAllowList'
type JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call struct {
	*mock.Call
}

// GetProjectJobTokenInboundAllowList is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.GetJobTokenInboundAllowListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) GetProjectJobTokenInboundAllowList(pid interface{}, opt interface{}, options ...interface{}) *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call {
	return &JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call{Call: _e.mock.On("GetProjectJobTokenInboundAllowList",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call) Run(run func(pid interface{}, opt *gitlab.GetJobTokenInboundAllowListOptions, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.GetJobTokenInboundAllowListOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call) Return(_a0 []*gitlab.Project, _a1 *gitlab.Response, _a2 error) *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call) RunAndReturn(run func(interface{}, *gitlab.GetJobTokenInboundAllowListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error)) *JobTokenScopeServiceInterface_GetProjectJobTokenInboundAllowList_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProjectJobTokenAccessSettings provides a mock function with given fields: pid, opt, options
func (_m *JobTokenScopeServiceInterface) PatchProjectJobTokenAccessSettings(pid interface{}, opt *gitlab.PatchProjectJobTokenAccessSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchProjectJobTokenAccessSettings")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.PatchProjectJobTokenAccessSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.PatchProjectJobTokenAccessSettingsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.PatchProjectJobTokenAccessSettingsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProjectJobTokenAccessSettings'
type JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call struct {
	*mock.Call
}

// PatchProjectJobTokenAccessSettings is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.PatchProjectJobTokenAccessSettingsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) PatchProjectJobTokenAccessSettings(pid interface{}, opt interface{}, options ...interface{}) *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call {
	return &JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call{Call: _e.mock.On("PatchProjectJobTokenAccessSettings",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call) Run(run func(pid interface{}, opt *gitlab.PatchProjectJobTokenAccessSettingsOptions, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.PatchProjectJobTokenAccessSettingsOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call) Return(_a0 *gitlab.Response, _a1 error) *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call) RunAndReturn(run func(interface{}, *gitlab.PatchProjectJobTokenAccessSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *JobTokenScopeServiceInterface_PatchProjectJobTokenAccessSettings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupFromJobTokenAllowlist provides a mock function with given fields: pid, targetGroup, options
func (_m *JobTokenScopeServiceInterface) RemoveGroupFromJobTokenAllowlist(pid interface{}, targetGroup int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, targetGroup)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupFromJobTokenAllowlist")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, targetGroup, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, targetGroup, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, targetGroup, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupFromJobTokenAllowlist'
type JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call struct {
	*mock.Call
}

// RemoveGroupFromJobTokenAllowlist is a helper method to define mock.On call
//   - pid interface{}
//   - targetGroup int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) RemoveGroupFromJobTokenAllowlist(pid interface{}, targetGroup interface{}, options ...interface{}) *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call {
	return &JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call{Call: _e.mock.On("RemoveGroupFromJobTokenAllowlist",
		append([]interface{}{pid, targetGroup}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call) Run(run func(pid interface{}, targetGroup int, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call) Return(_a0 *gitlab.Response, _a1 error) *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *JobTokenScopeServiceInterface_RemoveGroupFromJobTokenAllowlist_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromJobScopeAllowList provides a mock function with given fields: pid, targetProject, options
func (_m *JobTokenScopeServiceInterface) RemoveProjectFromJobScopeAllowList(pid interface{}, targetProject int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, targetProject)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromJobScopeAllowList")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, targetProject, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, targetProject, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, targetProject, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromJobScopeAllowList'
type JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call struct {
	*mock.Call
}

// RemoveProjectFromJobScopeAllowList is a helper method to define mock.On call
//   - pid interface{}
//   - targetProject int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobTokenScopeServiceInterface_Expecter) RemoveProjectFromJobScopeAllowList(pid interface{}, targetProject interface{}, options ...interface{}) *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call {
	return &JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call{Call: _e.mock.On("RemoveProjectFromJobScopeAllowList",
		append([]interface{}{pid, targetProject}, options...)...)}
}

func (_c *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call) Run(run func(pid interface{}, targetProject int, options ...gitlab.RequestOptionFunc)) *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call) Return(_a0 *gitlab.Response, _a1 error) *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *JobTokenScopeServiceInterface_RemoveProjectFromJobScopeAllowList_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobTokenScopeServiceInterface creates a new instance of JobTokenScopeServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobTokenScopeServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobTokenScopeServiceInterface {
	mock := &JobTokenScopeServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
