// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProjectMirrorServiceInterface is an autogenerated mock type for the ProjectMirrorServiceInterface type
type ProjectMirrorServiceInterface struct {
	mock.Mock
}

type ProjectMirrorServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectMirrorServiceInterface) EXPECT() *ProjectMirrorServiceInterface_Expecter {
	return &ProjectMirrorServiceInterface_Expecter{mock: &_m.Mock}
}

// AddProjectMirror provides a mock function with given fields: pid, opt, options
func (_m *ProjectMirrorServiceInterface) AddProjectMirror(pid interface{}, opt *gitlab.AddProjectMirrorOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectMirror")
	}

	var r0 *gitlab.ProjectMirror
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectMirror); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMirrorServiceInterface_AddProjectMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectMirror'
type ProjectMirrorServiceInterface_AddProjectMirror_Call struct {
	*mock.Call
}

// AddProjectMirror is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddProjectMirrorOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) AddProjectMirror(pid interface{}, opt interface{}, options ...interface{}) *ProjectMirrorServiceInterface_AddProjectMirror_Call {
	return &ProjectMirrorServiceInterface_AddProjectMirror_Call{Call: _e.mock.On("AddProjectMirror",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_AddProjectMirror_Call) Run(run func(pid interface{}, opt *gitlab.AddProjectMirrorOptions, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_AddProjectMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddProjectMirrorOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_AddProjectMirror_Call) Return(_a0 *gitlab.ProjectMirror, _a1 *gitlab.Response, _a2 error) *ProjectMirrorServiceInterface_AddProjectMirror_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMirrorServiceInterface_AddProjectMirror_Call) RunAndReturn(run func(interface{}, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *ProjectMirrorServiceInterface_AddProjectMirror_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectMirror provides a mock function with given fields: pid, mirror, options
func (_m *ProjectMirrorServiceInterface) DeleteProjectMirror(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mirror)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMirror")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, mirror, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, mirror, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, mirror, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectMirrorServiceInterface_DeleteProjectMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectMirror'
type ProjectMirrorServiceInterface_DeleteProjectMirror_Call struct {
	*mock.Call
}

// DeleteProjectMirror is a helper method to define mock.On call
//   - pid interface{}
//   - mirror int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) DeleteProjectMirror(pid interface{}, mirror interface{}, options ...interface{}) *ProjectMirrorServiceInterface_DeleteProjectMirror_Call {
	return &ProjectMirrorServiceInterface_DeleteProjectMirror_Call{Call: _e.mock.On("DeleteProjectMirror",
		append([]interface{}{pid, mirror}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_DeleteProjectMirror_Call) Run(run func(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_DeleteProjectMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_DeleteProjectMirror_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectMirrorServiceInterface_DeleteProjectMirror_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectMirrorServiceInterface_DeleteProjectMirror_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectMirrorServiceInterface_DeleteProjectMirror_Call {
	_c.Call.Return(run)
	return _c
}

// EditProjectMirror provides a mock function with given fields: pid, mirror, opt, options
func (_m *ProjectMirrorServiceInterface) EditProjectMirror(pid interface{}, mirror int, opt *gitlab.EditProjectMirrorOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mirror, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditProjectMirror")
	}

	var r0 *gitlab.ProjectMirror
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)); ok {
		return rf(pid, mirror, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectMirror); ok {
		r0 = rf(pid, mirror, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mirror, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mirror, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMirrorServiceInterface_EditProjectMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditProjectMirror'
type ProjectMirrorServiceInterface_EditProjectMirror_Call struct {
	*mock.Call
}

// EditProjectMirror is a helper method to define mock.On call
//   - pid interface{}
//   - mirror int
//   - opt *gitlab.EditProjectMirrorOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) EditProjectMirror(pid interface{}, mirror interface{}, opt interface{}, options ...interface{}) *ProjectMirrorServiceInterface_EditProjectMirror_Call {
	return &ProjectMirrorServiceInterface_EditProjectMirror_Call{Call: _e.mock.On("EditProjectMirror",
		append([]interface{}{pid, mirror, opt}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_EditProjectMirror_Call) Run(run func(pid interface{}, mirror int, opt *gitlab.EditProjectMirrorOptions, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_EditProjectMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.EditProjectMirrorOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_EditProjectMirror_Call) Return(_a0 *gitlab.ProjectMirror, _a1 *gitlab.Response, _a2 error) *ProjectMirrorServiceInterface_EditProjectMirror_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMirrorServiceInterface_EditProjectMirror_Call) RunAndReturn(run func(interface{}, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *ProjectMirrorServiceInterface_EditProjectMirror_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMirror provides a mock function with given fields: pid, mirror, options
func (_m *ProjectMirrorServiceInterface) GetProjectMirror(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mirror)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMirror")
	}

	var r0 *gitlab.ProjectMirror
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)); ok {
		return rf(pid, mirror, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectMirror); ok {
		r0 = rf(pid, mirror, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mirror, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mirror, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMirrorServiceInterface_GetProjectMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMirror'
type ProjectMirrorServiceInterface_GetProjectMirror_Call struct {
	*mock.Call
}

// GetProjectMirror is a helper method to define mock.On call
//   - pid interface{}
//   - mirror int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) GetProjectMirror(pid interface{}, mirror interface{}, options ...interface{}) *ProjectMirrorServiceInterface_GetProjectMirror_Call {
	return &ProjectMirrorServiceInterface_GetProjectMirror_Call{Call: _e.mock.On("GetProjectMirror",
		append([]interface{}{pid, mirror}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirror_Call) Run(run func(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_GetProjectMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirror_Call) Return(_a0 *gitlab.ProjectMirror, _a1 *gitlab.Response, _a2 error) *ProjectMirrorServiceInterface_GetProjectMirror_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirror_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *ProjectMirrorServiceInterface_GetProjectMirror_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMirrorPublicKey provides a mock function with given fields: pid, mirror, options
func (_m *ProjectMirrorServiceInterface) GetProjectMirrorPublicKey(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mirror)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMirrorPublicKey")
	}

	var r0 *gitlab.ProjectMirrorPublicKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error)); ok {
		return rf(pid, mirror, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectMirrorPublicKey); ok {
		r0 = rf(pid, mirror, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMirrorPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mirror, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mirror, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMirrorPublicKey'
type ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call struct {
	*mock.Call
}

// GetProjectMirrorPublicKey is a helper method to define mock.On call
//   - pid interface{}
//   - mirror int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) GetProjectMirrorPublicKey(pid interface{}, mirror interface{}, options ...interface{}) *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call {
	return &ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call{Call: _e.mock.On("GetProjectMirrorPublicKey",
		append([]interface{}{pid, mirror}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call) Run(run func(pid interface{}, mirror int, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call) Return(_a0 *gitlab.ProjectMirrorPublicKey, _a1 *gitlab.Response, _a2 error) *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error)) *ProjectMirrorServiceInterface_GetProjectMirrorPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMirror provides a mock function with given fields: pid, opt, options
func (_m *ProjectMirrorServiceInterface) ListProjectMirror(pid interface{}, opt *gitlab.ListProjectMirrorOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMirror")
	}

	var r0 []*gitlab.ProjectMirror
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectMirror); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMirrorServiceInterface_ListProjectMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMirror'
type ProjectMirrorServiceInterface_ListProjectMirror_Call struct {
	*mock.Call
}

// ListProjectMirror is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectMirrorOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMirrorServiceInterface_Expecter) ListProjectMirror(pid interface{}, opt interface{}, options ...interface{}) *ProjectMirrorServiceInterface_ListProjectMirror_Call {
	return &ProjectMirrorServiceInterface_ListProjectMirror_Call{Call: _e.mock.On("ListProjectMirror",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectMirrorServiceInterface_ListProjectMirror_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectMirrorOptions, options ...gitlab.RequestOptionFunc)) *ProjectMirrorServiceInterface_ListProjectMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectMirrorOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMirrorServiceInterface_ListProjectMirror_Call) Return(_a0 []*gitlab.ProjectMirror, _a1 *gitlab.Response, _a2 error) *ProjectMirrorServiceInterface_ListProjectMirror_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMirrorServiceInterface_ListProjectMirror_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error)) *ProjectMirrorServiceInterface_ListProjectMirror_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectMirrorServiceInterface creates a new instance of ProjectMirrorServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMirrorServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMirrorServiceInterface {
	mock := &ProjectMirrorServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
