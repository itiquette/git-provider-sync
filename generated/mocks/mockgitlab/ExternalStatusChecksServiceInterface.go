// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ExternalStatusChecksServiceInterface is an autogenerated mock type for the ExternalStatusChecksServiceInterface type
type ExternalStatusChecksServiceInterface struct {
	mock.Mock
}

type ExternalStatusChecksServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ExternalStatusChecksServiceInterface) EXPECT() *ExternalStatusChecksServiceInterface_Expecter {
	return &ExternalStatusChecksServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateExternalStatusCheck provides a mock function with given fields: pid, opt, options
func (_m *ExternalStatusChecksServiceInterface) CreateExternalStatusCheck(pid interface{}, opt *gitlab.CreateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExternalStatusCheck")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExternalStatusCheck'
type ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call struct {
	*mock.Call
}

// CreateExternalStatusCheck is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateExternalStatusCheckOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) CreateExternalStatusCheck(pid interface{}, opt interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call {
	return &ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call{Call: _e.mock.On("CreateExternalStatusCheck",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call) Run(run func(pid interface{}, opt *gitlab.CreateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateExternalStatusCheckOptions), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call) Return(_a0 *gitlab.Response, _a1 error) *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call) RunAndReturn(run func(interface{}, *gitlab.CreateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ExternalStatusChecksServiceInterface_CreateExternalStatusCheck_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExternalStatusCheck provides a mock function with given fields: pid, check, options
func (_m *ExternalStatusChecksServiceInterface) DeleteExternalStatusCheck(pid interface{}, check int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, check)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExternalStatusCheck")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, check, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, check, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, check, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExternalStatusCheck'
type ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call struct {
	*mock.Call
}

// DeleteExternalStatusCheck is a helper method to define mock.On call
//   - pid interface{}
//   - check int
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) DeleteExternalStatusCheck(pid interface{}, check interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call {
	return &ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call{Call: _e.mock.On("DeleteExternalStatusCheck",
		append([]interface{}{pid, check}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call) Run(run func(pid interface{}, check int, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call) Return(_a0 *gitlab.Response, _a1 error) *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ExternalStatusChecksServiceInterface_DeleteExternalStatusCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeStatusChecks provides a mock function with given fields: pid, mr, opt, options
func (_m *ExternalStatusChecksServiceInterface) ListMergeStatusChecks(pid interface{}, mr int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeStatusCheck, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mr, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMergeStatusChecks")
	}

	var r0 []*gitlab.MergeStatusCheck
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeStatusCheck, *gitlab.Response, error)); ok {
		return rf(pid, mr, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeStatusCheck); ok {
		r0 = rf(pid, mr, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeStatusCheck)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mr, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mr, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeStatusChecks'
type ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call struct {
	*mock.Call
}

// ListMergeStatusChecks is a helper method to define mock.On call
//   - pid interface{}
//   - mr int
//   - opt *gitlab.ListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) ListMergeStatusChecks(pid interface{}, mr interface{}, opt interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call {
	return &ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call{Call: _e.mock.On("ListMergeStatusChecks",
		append([]interface{}{pid, mr, opt}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call) Run(run func(pid interface{}, mr int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListOptions), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call) Return(_a0 []*gitlab.MergeStatusCheck, _a1 *gitlab.Response, _a2 error) *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeStatusCheck, *gitlab.Response, error)) *ExternalStatusChecksServiceInterface_ListMergeStatusChecks_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectStatusChecks provides a mock function with given fields: pid, opt, options
func (_m *ExternalStatusChecksServiceInterface) ListProjectStatusChecks(pid interface{}, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectStatusCheck, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectStatusChecks")
	}

	var r0 []*gitlab.ProjectStatusCheck
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectStatusCheck, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectStatusCheck); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectStatusCheck)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectStatusChecks'
type ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call struct {
	*mock.Call
}

// ListProjectStatusChecks is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) ListProjectStatusChecks(pid interface{}, opt interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call {
	return &ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call{Call: _e.mock.On("ListProjectStatusChecks",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call) Run(run func(pid interface{}, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListOptions), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call) Return(_a0 []*gitlab.ProjectStatusCheck, _a1 *gitlab.Response, _a2 error) *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call) RunAndReturn(run func(interface{}, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectStatusCheck, *gitlab.Response, error)) *ExternalStatusChecksServiceInterface_ListProjectStatusChecks_Call {
	_c.Call.Return(run)
	return _c
}

// RetryFailedStatusCheckForAMergeRequest provides a mock function with given fields: pid, mergeRequest, externalStatusCheck, options
func (_m *ExternalStatusChecksServiceInterface) RetryFailedStatusCheckForAMergeRequest(pid interface{}, mergeRequest int, externalStatusCheck int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, externalStatusCheck)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetryFailedStatusCheckForAMergeRequest")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, externalStatusCheck, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, mergeRequest, externalStatusCheck, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, mergeRequest, externalStatusCheck, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetryFailedStatusCheckForAMergeRequest'
type ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call struct {
	*mock.Call
}

// RetryFailedStatusCheckForAMergeRequest is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - externalStatusCheck int
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) RetryFailedStatusCheckForAMergeRequest(pid interface{}, mergeRequest interface{}, externalStatusCheck interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call {
	return &ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call{Call: _e.mock.On("RetryFailedStatusCheckForAMergeRequest",
		append([]interface{}{pid, mergeRequest, externalStatusCheck}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call) Run(run func(pid interface{}, mergeRequest int, externalStatusCheck int, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call) Return(_a0 *gitlab.Response, _a1 error) *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ExternalStatusChecksServiceInterface_RetryFailedStatusCheckForAMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetExternalStatusCheckStatus provides a mock function with given fields: pid, mergeRequest, opt, options
func (_m *ExternalStatusChecksServiceInterface) SetExternalStatusCheckStatus(pid interface{}, mergeRequest int, opt *gitlab.SetExternalStatusCheckStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetExternalStatusCheckStatus")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.SetExternalStatusCheckStatusOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.SetExternalStatusCheckStatusOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.SetExternalStatusCheckStatusOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, mergeRequest, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExternalStatusCheckStatus'
type ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call struct {
	*mock.Call
}

// SetExternalStatusCheckStatus is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.SetExternalStatusCheckStatusOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) SetExternalStatusCheckStatus(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call {
	return &ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call{Call: _e.mock.On("SetExternalStatusCheckStatus",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.SetExternalStatusCheckStatusOptions, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.SetExternalStatusCheckStatusOptions), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call) Return(_a0 *gitlab.Response, _a1 error) *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call) RunAndReturn(run func(interface{}, int, *gitlab.SetExternalStatusCheckStatusOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ExternalStatusChecksServiceInterface_SetExternalStatusCheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExternalStatusCheck provides a mock function with given fields: pid, check, opt, options
func (_m *ExternalStatusChecksServiceInterface) UpdateExternalStatusCheck(pid interface{}, check int, opt *gitlab.UpdateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, check, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExternalStatusCheck")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, check, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, check, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, check, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExternalStatusCheck'
type ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call struct {
	*mock.Call
}

// UpdateExternalStatusCheck is a helper method to define mock.On call
//   - pid interface{}
//   - check int
//   - opt *gitlab.UpdateExternalStatusCheckOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ExternalStatusChecksServiceInterface_Expecter) UpdateExternalStatusCheck(pid interface{}, check interface{}, opt interface{}, options ...interface{}) *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call {
	return &ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call{Call: _e.mock.On("UpdateExternalStatusCheck",
		append([]interface{}{pid, check, opt}, options...)...)}
}

func (_c *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call) Run(run func(pid interface{}, check int, opt *gitlab.UpdateExternalStatusCheckOptions, options ...gitlab.RequestOptionFunc)) *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateExternalStatusCheckOptions), variadicArgs...)
	})
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call) Return(_a0 *gitlab.Response, _a1 error) *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateExternalStatusCheckOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ExternalStatusChecksServiceInterface_UpdateExternalStatusCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewExternalStatusChecksServiceInterface creates a new instance of ExternalStatusChecksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExternalStatusChecksServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExternalStatusChecksServiceInterface {
	mock := &ExternalStatusChecksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
