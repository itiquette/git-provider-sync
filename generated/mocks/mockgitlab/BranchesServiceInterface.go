// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// BranchesServiceInterface is an autogenerated mock type for the BranchesServiceInterface type
type BranchesServiceInterface struct {
	mock.Mock
}

type BranchesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *BranchesServiceInterface) EXPECT() *BranchesServiceInterface_Expecter {
	return &BranchesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateBranch provides a mock function with given fields: pid, opt, options
func (_m *BranchesServiceInterface) CreateBranch(pid interface{}, opt *gitlab.CreateBranchOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBranch")
	}

	var r0 *gitlab.Branch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.Branch); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BranchesServiceInterface_CreateBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBranch'
type BranchesServiceInterface_CreateBranch_Call struct {
	*mock.Call
}

// CreateBranch is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateBranchOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) CreateBranch(pid interface{}, opt interface{}, options ...interface{}) *BranchesServiceInterface_CreateBranch_Call {
	return &BranchesServiceInterface_CreateBranch_Call{Call: _e.mock.On("CreateBranch",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *BranchesServiceInterface_CreateBranch_Call) Run(run func(pid interface{}, opt *gitlab.CreateBranchOptions, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_CreateBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateBranchOptions), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_CreateBranch_Call) Return(_a0 *gitlab.Branch, _a1 *gitlab.Response, _a2 error) *BranchesServiceInterface_CreateBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BranchesServiceInterface_CreateBranch_Call) RunAndReturn(run func(interface{}, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *BranchesServiceInterface_CreateBranch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBranch provides a mock function with given fields: pid, branch, options
func (_m *BranchesServiceInterface) DeleteBranch(pid interface{}, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, branch, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, branch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, branch, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BranchesServiceInterface_DeleteBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBranch'
type BranchesServiceInterface_DeleteBranch_Call struct {
	*mock.Call
}

// DeleteBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) DeleteBranch(pid interface{}, branch interface{}, options ...interface{}) *BranchesServiceInterface_DeleteBranch_Call {
	return &BranchesServiceInterface_DeleteBranch_Call{Call: _e.mock.On("DeleteBranch",
		append([]interface{}{pid, branch}, options...)...)}
}

func (_c *BranchesServiceInterface_DeleteBranch_Call) Run(run func(pid interface{}, branch string, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_DeleteBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_DeleteBranch_Call) Return(_a0 *gitlab.Response, _a1 error) *BranchesServiceInterface_DeleteBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BranchesServiceInterface_DeleteBranch_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *BranchesServiceInterface_DeleteBranch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMergedBranches provides a mock function with given fields: pid, options
func (_m *BranchesServiceInterface) DeleteMergedBranches(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMergedBranches")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BranchesServiceInterface_DeleteMergedBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMergedBranches'
type BranchesServiceInterface_DeleteMergedBranches_Call struct {
	*mock.Call
}

// DeleteMergedBranches is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) DeleteMergedBranches(pid interface{}, options ...interface{}) *BranchesServiceInterface_DeleteMergedBranches_Call {
	return &BranchesServiceInterface_DeleteMergedBranches_Call{Call: _e.mock.On("DeleteMergedBranches",
		append([]interface{}{pid}, options...)...)}
}

func (_c *BranchesServiceInterface_DeleteMergedBranches_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_DeleteMergedBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_DeleteMergedBranches_Call) Return(_a0 *gitlab.Response, _a1 error) *BranchesServiceInterface_DeleteMergedBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BranchesServiceInterface_DeleteMergedBranches_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *BranchesServiceInterface_DeleteMergedBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranch provides a mock function with given fields: pid, branch, options
func (_m *BranchesServiceInterface) GetBranch(pid interface{}, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBranch")
	}

	var r0 *gitlab.Branch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)); ok {
		return rf(pid, branch, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Branch); ok {
		r0 = rf(pid, branch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, branch, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, branch, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BranchesServiceInterface_GetBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranch'
type BranchesServiceInterface_GetBranch_Call struct {
	*mock.Call
}

// GetBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) GetBranch(pid interface{}, branch interface{}, options ...interface{}) *BranchesServiceInterface_GetBranch_Call {
	return &BranchesServiceInterface_GetBranch_Call{Call: _e.mock.On("GetBranch",
		append([]interface{}{pid, branch}, options...)...)}
}

func (_c *BranchesServiceInterface_GetBranch_Call) Run(run func(pid interface{}, branch string, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_GetBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_GetBranch_Call) Return(_a0 *gitlab.Branch, _a1 *gitlab.Response, _a2 error) *BranchesServiceInterface_GetBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BranchesServiceInterface_GetBranch_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *BranchesServiceInterface_GetBranch_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranches provides a mock function with given fields: pid, opts, options
func (_m *BranchesServiceInterface) ListBranches(pid interface{}, opts *gitlab.ListBranchesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 []*gitlab.Branch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error)); ok {
		return rf(pid, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Branch); ok {
		r0 = rf(pid, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BranchesServiceInterface_ListBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranches'
type BranchesServiceInterface_ListBranches_Call struct {
	*mock.Call
}

// ListBranches is a helper method to define mock.On call
//   - pid interface{}
//   - opts *gitlab.ListBranchesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) ListBranches(pid interface{}, opts interface{}, options ...interface{}) *BranchesServiceInterface_ListBranches_Call {
	return &BranchesServiceInterface_ListBranches_Call{Call: _e.mock.On("ListBranches",
		append([]interface{}{pid, opts}, options...)...)}
}

func (_c *BranchesServiceInterface_ListBranches_Call) Run(run func(pid interface{}, opts *gitlab.ListBranchesOptions, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_ListBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListBranchesOptions), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_ListBranches_Call) Return(_a0 []*gitlab.Branch, _a1 *gitlab.Response, _a2 error) *BranchesServiceInterface_ListBranches_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BranchesServiceInterface_ListBranches_Call) RunAndReturn(run func(interface{}, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error)) *BranchesServiceInterface_ListBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectBranch provides a mock function with given fields: pid, branch, opts, options
func (_m *BranchesServiceInterface) ProtectBranch(pid interface{}, branch string, opts *gitlab.ProtectBranchOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProtectBranch")
	}

	var r0 *gitlab.Branch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ProtectBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)); ok {
		return rf(pid, branch, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ProtectBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.Branch); ok {
		r0 = rf(pid, branch, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.ProtectBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, branch, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.ProtectBranchOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, branch, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BranchesServiceInterface_ProtectBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectBranch'
type BranchesServiceInterface_ProtectBranch_Call struct {
	*mock.Call
}

// ProtectBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - opts *gitlab.ProtectBranchOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) ProtectBranch(pid interface{}, branch interface{}, opts interface{}, options ...interface{}) *BranchesServiceInterface_ProtectBranch_Call {
	return &BranchesServiceInterface_ProtectBranch_Call{Call: _e.mock.On("ProtectBranch",
		append([]interface{}{pid, branch, opts}, options...)...)}
}

func (_c *BranchesServiceInterface_ProtectBranch_Call) Run(run func(pid interface{}, branch string, opts *gitlab.ProtectBranchOptions, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_ProtectBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.ProtectBranchOptions), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_ProtectBranch_Call) Return(_a0 *gitlab.Branch, _a1 *gitlab.Response, _a2 error) *BranchesServiceInterface_ProtectBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BranchesServiceInterface_ProtectBranch_Call) RunAndReturn(run func(interface{}, string, *gitlab.ProtectBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *BranchesServiceInterface_ProtectBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UnprotectBranch provides a mock function with given fields: pid, branch, options
func (_m *BranchesServiceInterface) UnprotectBranch(pid interface{}, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnprotectBranch")
	}

	var r0 *gitlab.Branch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)); ok {
		return rf(pid, branch, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Branch); ok {
		r0 = rf(pid, branch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, branch, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, branch, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BranchesServiceInterface_UnprotectBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprotectBranch'
type BranchesServiceInterface_UnprotectBranch_Call struct {
	*mock.Call
}

// UnprotectBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - options ...gitlab.RequestOptionFunc
func (_e *BranchesServiceInterface_Expecter) UnprotectBranch(pid interface{}, branch interface{}, options ...interface{}) *BranchesServiceInterface_UnprotectBranch_Call {
	return &BranchesServiceInterface_UnprotectBranch_Call{Call: _e.mock.On("UnprotectBranch",
		append([]interface{}{pid, branch}, options...)...)}
}

func (_c *BranchesServiceInterface_UnprotectBranch_Call) Run(run func(pid interface{}, branch string, options ...gitlab.RequestOptionFunc)) *BranchesServiceInterface_UnprotectBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *BranchesServiceInterface_UnprotectBranch_Call) Return(_a0 *gitlab.Branch, _a1 *gitlab.Response, _a2 error) *BranchesServiceInterface_UnprotectBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BranchesServiceInterface_UnprotectBranch_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *BranchesServiceInterface_UnprotectBranch_Call {
	_c.Call.Return(run)
	return _c
}

// NewBranchesServiceInterface creates a new instance of BranchesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranchesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BranchesServiceInterface {
	mock := &BranchesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
