// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// EpicIssuesServiceInterface is an autogenerated mock type for the EpicIssuesServiceInterface type
type EpicIssuesServiceInterface struct {
	mock.Mock
}

type EpicIssuesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EpicIssuesServiceInterface) EXPECT() *EpicIssuesServiceInterface_Expecter {
	return &EpicIssuesServiceInterface_Expecter{mock: &_m.Mock}
}

// AssignEpicIssue provides a mock function with given fields: gid, epic, issue, options
func (_m *EpicIssuesServiceInterface) AssignEpicIssue(gid interface{}, epic int, issue int, options ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, issue)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignEpicIssue")
	}

	var r0 *gitlab.EpicIssueAssignment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error)); ok {
		return rf(gid, epic, issue, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.EpicIssueAssignment); ok {
		r0 = rf(gid, epic, issue, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.EpicIssueAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, issue, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, issue, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicIssuesServiceInterface_AssignEpicIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignEpicIssue'
type EpicIssuesServiceInterface_AssignEpicIssue_Call struct {
	*mock.Call
}

// AssignEpicIssue is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - issue int
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicIssuesServiceInterface_Expecter) AssignEpicIssue(gid interface{}, epic interface{}, issue interface{}, options ...interface{}) *EpicIssuesServiceInterface_AssignEpicIssue_Call {
	return &EpicIssuesServiceInterface_AssignEpicIssue_Call{Call: _e.mock.On("AssignEpicIssue",
		append([]interface{}{gid, epic, issue}, options...)...)}
}

func (_c *EpicIssuesServiceInterface_AssignEpicIssue_Call) Run(run func(gid interface{}, epic int, issue int, options ...gitlab.RequestOptionFunc)) *EpicIssuesServiceInterface_AssignEpicIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *EpicIssuesServiceInterface_AssignEpicIssue_Call) Return(_a0 *gitlab.EpicIssueAssignment, _a1 *gitlab.Response, _a2 error) *EpicIssuesServiceInterface_AssignEpicIssue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicIssuesServiceInterface_AssignEpicIssue_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error)) *EpicIssuesServiceInterface_AssignEpicIssue_Call {
	_c.Call.Return(run)
	return _c
}

// ListEpicIssues provides a mock function with given fields: gid, epic, opt, options
func (_m *EpicIssuesServiceInterface) ListEpicIssues(gid interface{}, epic int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEpicIssues")
	}

	var r0 []*gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(gid, epic, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) []*gitlab.Issue); ok {
		r0 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicIssuesServiceInterface_ListEpicIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEpicIssues'
type EpicIssuesServiceInterface_ListEpicIssues_Call struct {
	*mock.Call
}

// ListEpicIssues is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - opt *gitlab.ListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicIssuesServiceInterface_Expecter) ListEpicIssues(gid interface{}, epic interface{}, opt interface{}, options ...interface{}) *EpicIssuesServiceInterface_ListEpicIssues_Call {
	return &EpicIssuesServiceInterface_ListEpicIssues_Call{Call: _e.mock.On("ListEpicIssues",
		append([]interface{}{gid, epic, opt}, options...)...)}
}

func (_c *EpicIssuesServiceInterface_ListEpicIssues_Call) Run(run func(gid interface{}, epic int, opt *gitlab.ListOptions, options ...gitlab.RequestOptionFunc)) *EpicIssuesServiceInterface_ListEpicIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListOptions), variadicArgs...)
	})
	return _c
}

func (_c *EpicIssuesServiceInterface_ListEpicIssues_Call) Return(_a0 []*gitlab.Issue, _a1 *gitlab.Response, _a2 error) *EpicIssuesServiceInterface_ListEpicIssues_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicIssuesServiceInterface_ListEpicIssues_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *EpicIssuesServiceInterface_ListEpicIssues_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEpicIssue provides a mock function with given fields: gid, epic, epicIssue, options
func (_m *EpicIssuesServiceInterface) RemoveEpicIssue(gid interface{}, epic int, epicIssue int, options ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, epicIssue)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEpicIssue")
	}

	var r0 *gitlab.EpicIssueAssignment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error)); ok {
		return rf(gid, epic, epicIssue, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.EpicIssueAssignment); ok {
		r0 = rf(gid, epic, epicIssue, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.EpicIssueAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, epicIssue, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, epicIssue, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicIssuesServiceInterface_RemoveEpicIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEpicIssue'
type EpicIssuesServiceInterface_RemoveEpicIssue_Call struct {
	*mock.Call
}

// RemoveEpicIssue is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - epicIssue int
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicIssuesServiceInterface_Expecter) RemoveEpicIssue(gid interface{}, epic interface{}, epicIssue interface{}, options ...interface{}) *EpicIssuesServiceInterface_RemoveEpicIssue_Call {
	return &EpicIssuesServiceInterface_RemoveEpicIssue_Call{Call: _e.mock.On("RemoveEpicIssue",
		append([]interface{}{gid, epic, epicIssue}, options...)...)}
}

func (_c *EpicIssuesServiceInterface_RemoveEpicIssue_Call) Run(run func(gid interface{}, epic int, epicIssue int, options ...gitlab.RequestOptionFunc)) *EpicIssuesServiceInterface_RemoveEpicIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *EpicIssuesServiceInterface_RemoveEpicIssue_Call) Return(_a0 *gitlab.EpicIssueAssignment, _a1 *gitlab.Response, _a2 error) *EpicIssuesServiceInterface_RemoveEpicIssue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicIssuesServiceInterface_RemoveEpicIssue_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.EpicIssueAssignment, *gitlab.Response, error)) *EpicIssuesServiceInterface_RemoveEpicIssue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEpicIssueAssignment provides a mock function with given fields: gid, epic, epicIssue, opt, options
func (_m *EpicIssuesServiceInterface) UpdateEpicIssueAssignment(gid interface{}, epic int, epicIssue int, opt *gitlab.UpdateEpicIsssueAssignmentOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, epicIssue, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEpicIssueAssignment")
	}

	var r0 []*gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateEpicIsssueAssignmentOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(gid, epic, epicIssue, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateEpicIsssueAssignmentOptions, ...gitlab.RequestOptionFunc) []*gitlab.Issue); ok {
		r0 = rf(gid, epic, epicIssue, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, *gitlab.UpdateEpicIsssueAssignmentOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, epicIssue, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, *gitlab.UpdateEpicIsssueAssignmentOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, epicIssue, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEpicIssueAssignment'
type EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call struct {
	*mock.Call
}

// UpdateEpicIssueAssignment is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - epicIssue int
//   - opt *gitlab.UpdateEpicIsssueAssignmentOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicIssuesServiceInterface_Expecter) UpdateEpicIssueAssignment(gid interface{}, epic interface{}, epicIssue interface{}, opt interface{}, options ...interface{}) *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call {
	return &EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call{Call: _e.mock.On("UpdateEpicIssueAssignment",
		append([]interface{}{gid, epic, epicIssue, opt}, options...)...)}
}

func (_c *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call) Run(run func(gid interface{}, epic int, epicIssue int, opt *gitlab.UpdateEpicIsssueAssignmentOptions, options ...gitlab.RequestOptionFunc)) *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), args[3].(*gitlab.UpdateEpicIsssueAssignmentOptions), variadicArgs...)
	})
	return _c
}

func (_c *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call) Return(_a0 []*gitlab.Issue, _a1 *gitlab.Response, _a2 error) *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call) RunAndReturn(run func(interface{}, int, int, *gitlab.UpdateEpicIsssueAssignmentOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *EpicIssuesServiceInterface_UpdateEpicIssueAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// NewEpicIssuesServiceInterface creates a new instance of EpicIssuesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEpicIssuesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EpicIssuesServiceInterface {
	mock := &EpicIssuesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
