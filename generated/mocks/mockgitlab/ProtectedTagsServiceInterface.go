// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProtectedTagsServiceInterface is an autogenerated mock type for the ProtectedTagsServiceInterface type
type ProtectedTagsServiceInterface struct {
	mock.Mock
}

type ProtectedTagsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProtectedTagsServiceInterface) EXPECT() *ProtectedTagsServiceInterface_Expecter {
	return &ProtectedTagsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetProtectedTag provides a mock function with given fields: pid, tag, options
func (_m *ProtectedTagsServiceInterface) GetProtectedTag(pid interface{}, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tag)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectedTag")
	}

	var r0 *gitlab.ProtectedTag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error)); ok {
		return rf(pid, tag, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.ProtectedTag); ok {
		r0 = rf(pid, tag, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedTag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tag, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tag, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedTagsServiceInterface_GetProtectedTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtectedTag'
type ProtectedTagsServiceInterface_GetProtectedTag_Call struct {
	*mock.Call
}

// GetProtectedTag is a helper method to define mock.On call
//   - pid interface{}
//   - tag string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedTagsServiceInterface_Expecter) GetProtectedTag(pid interface{}, tag interface{}, options ...interface{}) *ProtectedTagsServiceInterface_GetProtectedTag_Call {
	return &ProtectedTagsServiceInterface_GetProtectedTag_Call{Call: _e.mock.On("GetProtectedTag",
		append([]interface{}{pid, tag}, options...)...)}
}

func (_c *ProtectedTagsServiceInterface_GetProtectedTag_Call) Run(run func(pid interface{}, tag string, options ...gitlab.RequestOptionFunc)) *ProtectedTagsServiceInterface_GetProtectedTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedTagsServiceInterface_GetProtectedTag_Call) Return(_a0 *gitlab.ProtectedTag, _a1 *gitlab.Response, _a2 error) *ProtectedTagsServiceInterface_GetProtectedTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedTagsServiceInterface_GetProtectedTag_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error)) *ProtectedTagsServiceInterface_GetProtectedTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListProtectedTags provides a mock function with given fields: pid, opt, options
func (_m *ProtectedTagsServiceInterface) ListProtectedTags(pid interface{}, opt *gitlab.ListProtectedTagsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedTag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectedTags")
	}

	var r0 []*gitlab.ProtectedTag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedTagsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedTag, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedTagsOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProtectedTag); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProtectedTag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProtectedTagsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProtectedTagsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedTagsServiceInterface_ListProtectedTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProtectedTags'
type ProtectedTagsServiceInterface_ListProtectedTags_Call struct {
	*mock.Call
}

// ListProtectedTags is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProtectedTagsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedTagsServiceInterface_Expecter) ListProtectedTags(pid interface{}, opt interface{}, options ...interface{}) *ProtectedTagsServiceInterface_ListProtectedTags_Call {
	return &ProtectedTagsServiceInterface_ListProtectedTags_Call{Call: _e.mock.On("ListProtectedTags",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedTagsServiceInterface_ListProtectedTags_Call) Run(run func(pid interface{}, opt *gitlab.ListProtectedTagsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedTagsServiceInterface_ListProtectedTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProtectedTagsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedTagsServiceInterface_ListProtectedTags_Call) Return(_a0 []*gitlab.ProtectedTag, _a1 *gitlab.Response, _a2 error) *ProtectedTagsServiceInterface_ListProtectedTags_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedTagsServiceInterface_ListProtectedTags_Call) RunAndReturn(run func(interface{}, *gitlab.ListProtectedTagsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedTag, *gitlab.Response, error)) *ProtectedTagsServiceInterface_ListProtectedTags_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectRepositoryTags provides a mock function with given fields: pid, opt, options
func (_m *ProtectedTagsServiceInterface) ProtectRepositoryTags(pid interface{}, opt *gitlab.ProtectRepositoryTagsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProtectRepositoryTags")
	}

	var r0 *gitlab.ProtectedTag
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryTagsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryTagsOptions, ...gitlab.RequestOptionFunc) *gitlab.ProtectedTag); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedTag)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ProtectRepositoryTagsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ProtectRepositoryTagsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedTagsServiceInterface_ProtectRepositoryTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectRepositoryTags'
type ProtectedTagsServiceInterface_ProtectRepositoryTags_Call struct {
	*mock.Call
}

// ProtectRepositoryTags is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ProtectRepositoryTagsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedTagsServiceInterface_Expecter) ProtectRepositoryTags(pid interface{}, opt interface{}, options ...interface{}) *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call {
	return &ProtectedTagsServiceInterface_ProtectRepositoryTags_Call{Call: _e.mock.On("ProtectRepositoryTags",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call) Run(run func(pid interface{}, opt *gitlab.ProtectRepositoryTagsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ProtectRepositoryTagsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call) Return(_a0 *gitlab.ProtectedTag, _a1 *gitlab.Response, _a2 error) *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call) RunAndReturn(run func(interface{}, *gitlab.ProtectRepositoryTagsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedTag, *gitlab.Response, error)) *ProtectedTagsServiceInterface_ProtectRepositoryTags_Call {
	_c.Call.Return(run)
	return _c
}

// UnprotectRepositoryTags provides a mock function with given fields: pid, tag, options
func (_m *ProtectedTagsServiceInterface) UnprotectRepositoryTags(pid interface{}, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tag)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnprotectRepositoryTags")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, tag, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, tag, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, tag, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprotectRepositoryTags'
type ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call struct {
	*mock.Call
}

// UnprotectRepositoryTags is a helper method to define mock.On call
//   - pid interface{}
//   - tag string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedTagsServiceInterface_Expecter) UnprotectRepositoryTags(pid interface{}, tag interface{}, options ...interface{}) *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call {
	return &ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call{Call: _e.mock.On("UnprotectRepositoryTags",
		append([]interface{}{pid, tag}, options...)...)}
}

func (_c *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call) Run(run func(pid interface{}, tag string, options ...gitlab.RequestOptionFunc)) *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call) Return(_a0 *gitlab.Response, _a1 error) *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProtectedTagsServiceInterface_UnprotectRepositoryTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewProtectedTagsServiceInterface creates a new instance of ProtectedTagsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectedTagsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectedTagsServiceInterface {
	mock := &ProtectedTagsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
