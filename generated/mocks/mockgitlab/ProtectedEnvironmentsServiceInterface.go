// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProtectedEnvironmentsServiceInterface is an autogenerated mock type for the ProtectedEnvironmentsServiceInterface type
type ProtectedEnvironmentsServiceInterface struct {
	mock.Mock
}

type ProtectedEnvironmentsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProtectedEnvironmentsServiceInterface) EXPECT() *ProtectedEnvironmentsServiceInterface_Expecter {
	return &ProtectedEnvironmentsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetProtectedEnvironment provides a mock function with given fields: pid, environment, options
func (_m *ProtectedEnvironmentsServiceInterface) GetProtectedEnvironment(pid interface{}, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, environment)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectedEnvironment")
	}

	var r0 *gitlab.ProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(pid, environment, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.ProtectedEnvironment); ok {
		r0 = rf(pid, environment, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, environment, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, environment, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtectedEnvironment'
type ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call struct {
	*mock.Call
}

// GetProtectedEnvironment is a helper method to define mock.On call
//   - pid interface{}
//   - environment string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedEnvironmentsServiceInterface_Expecter) GetProtectedEnvironment(pid interface{}, environment interface{}, options ...interface{}) *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call {
	return &ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call{Call: _e.mock.On("GetProtectedEnvironment",
		append([]interface{}{pid, environment}, options...)...)}
}

func (_c *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call) Run(run func(pid interface{}, environment string, options ...gitlab.RequestOptionFunc)) *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call) Return(_a0 *gitlab.ProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *ProtectedEnvironmentsServiceInterface_GetProtectedEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// ListProtectedEnvironments provides a mock function with given fields: pid, opt, options
func (_m *ProtectedEnvironmentsServiceInterface) ListProtectedEnvironments(pid interface{}, opt *gitlab.ListProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectedEnvironments")
	}

	var r0 []*gitlab.ProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProtectedEnvironment); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProtectedEnvironments'
type ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call struct {
	*mock.Call
}

// ListProtectedEnvironments is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProtectedEnvironmentsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedEnvironmentsServiceInterface_Expecter) ListProtectedEnvironments(pid interface{}, opt interface{}, options ...interface{}) *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call {
	return &ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call{Call: _e.mock.On("ListProtectedEnvironments",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call) Run(run func(pid interface{}, opt *gitlab.ListProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProtectedEnvironmentsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call) Return(_a0 []*gitlab.ProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call) RunAndReturn(run func(interface{}, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *ProtectedEnvironmentsServiceInterface_ListProtectedEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectRepositoryEnvironments provides a mock function with given fields: pid, opt, options
func (_m *ProtectedEnvironmentsServiceInterface) ProtectRepositoryEnvironments(pid interface{}, opt *gitlab.ProtectRepositoryEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProtectRepositoryEnvironments")
	}

	var r0 *gitlab.ProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.ProtectedEnvironment); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectRepositoryEnvironments'
type ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call struct {
	*mock.Call
}

// ProtectRepositoryEnvironments is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ProtectRepositoryEnvironmentsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedEnvironmentsServiceInterface_Expecter) ProtectRepositoryEnvironments(pid interface{}, opt interface{}, options ...interface{}) *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call {
	return &ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call{Call: _e.mock.On("ProtectRepositoryEnvironments",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call) Run(run func(pid interface{}, opt *gitlab.ProtectRepositoryEnvironmentsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ProtectRepositoryEnvironmentsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call) Return(_a0 *gitlab.ProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call) RunAndReturn(run func(interface{}, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *ProtectedEnvironmentsServiceInterface_ProtectRepositoryEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// UnprotectEnvironment provides a mock function with given fields: pid, environment, options
func (_m *ProtectedEnvironmentsServiceInterface) UnprotectEnvironment(pid interface{}, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, environment)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnprotectEnvironment")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, environment, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, environment, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, environment, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprotectEnvironment'
type ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call struct {
	*mock.Call
}

// UnprotectEnvironment is a helper method to define mock.On call
//   - pid interface{}
//   - environment string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedEnvironmentsServiceInterface_Expecter) UnprotectEnvironment(pid interface{}, environment interface{}, options ...interface{}) *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call {
	return &ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call{Call: _e.mock.On("UnprotectEnvironment",
		append([]interface{}{pid, environment}, options...)...)}
}

func (_c *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call) Run(run func(pid interface{}, environment string, options ...gitlab.RequestOptionFunc)) *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call) Return(_a0 *gitlab.Response, _a1 error) *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProtectedEnvironmentsServiceInterface_UnprotectEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProtectedEnvironments provides a mock function with given fields: pid, environment, opt, options
func (_m *ProtectedEnvironmentsServiceInterface) UpdateProtectedEnvironments(pid interface{}, environment string, opt *gitlab.UpdateProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, environment, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectedEnvironments")
	}

	var r0 *gitlab.ProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(pid, environment, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.ProtectedEnvironment); ok {
		r0 = rf(pid, environment, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, environment, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, environment, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProtectedEnvironments'
type ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call struct {
	*mock.Call
}

// UpdateProtectedEnvironments is a helper method to define mock.On call
//   - pid interface{}
//   - environment string
//   - opt *gitlab.UpdateProtectedEnvironmentsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedEnvironmentsServiceInterface_Expecter) UpdateProtectedEnvironments(pid interface{}, environment interface{}, opt interface{}, options ...interface{}) *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call {
	return &ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call{Call: _e.mock.On("UpdateProtectedEnvironments",
		append([]interface{}{pid, environment, opt}, options...)...)}
}

func (_c *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call) Run(run func(pid interface{}, environment string, opt *gitlab.UpdateProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateProtectedEnvironmentsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call) Return(_a0 *gitlab.ProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *ProtectedEnvironmentsServiceInterface_UpdateProtectedEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// NewProtectedEnvironmentsServiceInterface creates a new instance of ProtectedEnvironmentsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectedEnvironmentsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectedEnvironmentsServiceInterface {
	mock := &ProtectedEnvironmentsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
