// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// FreezePeriodsServiceInterface is an autogenerated mock type for the FreezePeriodsServiceInterface type
type FreezePeriodsServiceInterface struct {
	mock.Mock
}

type FreezePeriodsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *FreezePeriodsServiceInterface) EXPECT() *FreezePeriodsServiceInterface_Expecter {
	return &FreezePeriodsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateFreezePeriodOptions provides a mock function with given fields: pid, opt, options
func (_m *FreezePeriodsServiceInterface) CreateFreezePeriodOptions(pid interface{}, opt *gitlab.CreateFreezePeriodOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFreezePeriodOptions")
	}

	var r0 *gitlab.FreezePeriod
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) *gitlab.FreezePeriod); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.FreezePeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFreezePeriodOptions'
type FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call struct {
	*mock.Call
}

// CreateFreezePeriodOptions is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateFreezePeriodOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *FreezePeriodsServiceInterface_Expecter) CreateFreezePeriodOptions(pid interface{}, opt interface{}, options ...interface{}) *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call {
	return &FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call{Call: _e.mock.On("CreateFreezePeriodOptions",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call) Run(run func(pid interface{}, opt *gitlab.CreateFreezePeriodOptions, options ...gitlab.RequestOptionFunc)) *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateFreezePeriodOptions), variadicArgs...)
	})
	return _c
}

func (_c *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call) Return(_a0 *gitlab.FreezePeriod, _a1 *gitlab.Response, _a2 error) *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call) RunAndReturn(run func(interface{}, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *FreezePeriodsServiceInterface_CreateFreezePeriodOptions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFreezePeriod provides a mock function with given fields: pid, freezePeriod, options
func (_m *FreezePeriodsServiceInterface) DeleteFreezePeriod(pid interface{}, freezePeriod int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, freezePeriod)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFreezePeriod")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, freezePeriod, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, freezePeriod, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, freezePeriod, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FreezePeriodsServiceInterface_DeleteFreezePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFreezePeriod'
type FreezePeriodsServiceInterface_DeleteFreezePeriod_Call struct {
	*mock.Call
}

// DeleteFreezePeriod is a helper method to define mock.On call
//   - pid interface{}
//   - freezePeriod int
//   - options ...gitlab.RequestOptionFunc
func (_e *FreezePeriodsServiceInterface_Expecter) DeleteFreezePeriod(pid interface{}, freezePeriod interface{}, options ...interface{}) *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call {
	return &FreezePeriodsServiceInterface_DeleteFreezePeriod_Call{Call: _e.mock.On("DeleteFreezePeriod",
		append([]interface{}{pid, freezePeriod}, options...)...)}
}

func (_c *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call) Run(run func(pid interface{}, freezePeriod int, options ...gitlab.RequestOptionFunc)) *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call) Return(_a0 *gitlab.Response, _a1 error) *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *FreezePeriodsServiceInterface_DeleteFreezePeriod_Call {
	_c.Call.Return(run)
	return _c
}

// GetFreezePeriod provides a mock function with given fields: pid, freezePeriod, options
func (_m *FreezePeriodsServiceInterface) GetFreezePeriod(pid interface{}, freezePeriod int, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, freezePeriod)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFreezePeriod")
	}

	var r0 *gitlab.FreezePeriod
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)); ok {
		return rf(pid, freezePeriod, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.FreezePeriod); ok {
		r0 = rf(pid, freezePeriod, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.FreezePeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, freezePeriod, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, freezePeriod, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FreezePeriodsServiceInterface_GetFreezePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFreezePeriod'
type FreezePeriodsServiceInterface_GetFreezePeriod_Call struct {
	*mock.Call
}

// GetFreezePeriod is a helper method to define mock.On call
//   - pid interface{}
//   - freezePeriod int
//   - options ...gitlab.RequestOptionFunc
func (_e *FreezePeriodsServiceInterface_Expecter) GetFreezePeriod(pid interface{}, freezePeriod interface{}, options ...interface{}) *FreezePeriodsServiceInterface_GetFreezePeriod_Call {
	return &FreezePeriodsServiceInterface_GetFreezePeriod_Call{Call: _e.mock.On("GetFreezePeriod",
		append([]interface{}{pid, freezePeriod}, options...)...)}
}

func (_c *FreezePeriodsServiceInterface_GetFreezePeriod_Call) Run(run func(pid interface{}, freezePeriod int, options ...gitlab.RequestOptionFunc)) *FreezePeriodsServiceInterface_GetFreezePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *FreezePeriodsServiceInterface_GetFreezePeriod_Call) Return(_a0 *gitlab.FreezePeriod, _a1 *gitlab.Response, _a2 error) *FreezePeriodsServiceInterface_GetFreezePeriod_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FreezePeriodsServiceInterface_GetFreezePeriod_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *FreezePeriodsServiceInterface_GetFreezePeriod_Call {
	_c.Call.Return(run)
	return _c
}

// ListFreezePeriods provides a mock function with given fields: pid, opt, options
func (_m *FreezePeriodsServiceInterface) ListFreezePeriods(pid interface{}, opt *gitlab.ListFreezePeriodsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFreezePeriods")
	}

	var r0 []*gitlab.FreezePeriod
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) []*gitlab.FreezePeriod); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.FreezePeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FreezePeriodsServiceInterface_ListFreezePeriods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFreezePeriods'
type FreezePeriodsServiceInterface_ListFreezePeriods_Call struct {
	*mock.Call
}

// ListFreezePeriods is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListFreezePeriodsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *FreezePeriodsServiceInterface_Expecter) ListFreezePeriods(pid interface{}, opt interface{}, options ...interface{}) *FreezePeriodsServiceInterface_ListFreezePeriods_Call {
	return &FreezePeriodsServiceInterface_ListFreezePeriods_Call{Call: _e.mock.On("ListFreezePeriods",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *FreezePeriodsServiceInterface_ListFreezePeriods_Call) Run(run func(pid interface{}, opt *gitlab.ListFreezePeriodsOptions, options ...gitlab.RequestOptionFunc)) *FreezePeriodsServiceInterface_ListFreezePeriods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListFreezePeriodsOptions), variadicArgs...)
	})
	return _c
}

func (_c *FreezePeriodsServiceInterface_ListFreezePeriods_Call) Return(_a0 []*gitlab.FreezePeriod, _a1 *gitlab.Response, _a2 error) *FreezePeriodsServiceInterface_ListFreezePeriods_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FreezePeriodsServiceInterface_ListFreezePeriods_Call) RunAndReturn(run func(interface{}, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error)) *FreezePeriodsServiceInterface_ListFreezePeriods_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFreezePeriodOptions provides a mock function with given fields: pid, freezePeriod, opt, options
func (_m *FreezePeriodsServiceInterface) UpdateFreezePeriodOptions(pid interface{}, freezePeriod int, opt *gitlab.UpdateFreezePeriodOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, freezePeriod, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFreezePeriodOptions")
	}

	var r0 *gitlab.FreezePeriod
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)); ok {
		return rf(pid, freezePeriod, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) *gitlab.FreezePeriod); ok {
		r0 = rf(pid, freezePeriod, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.FreezePeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, freezePeriod, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, freezePeriod, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFreezePeriodOptions'
type FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call struct {
	*mock.Call
}

// UpdateFreezePeriodOptions is a helper method to define mock.On call
//   - pid interface{}
//   - freezePeriod int
//   - opt *gitlab.UpdateFreezePeriodOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *FreezePeriodsServiceInterface_Expecter) UpdateFreezePeriodOptions(pid interface{}, freezePeriod interface{}, opt interface{}, options ...interface{}) *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call {
	return &FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call{Call: _e.mock.On("UpdateFreezePeriodOptions",
		append([]interface{}{pid, freezePeriod, opt}, options...)...)}
}

func (_c *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call) Run(run func(pid interface{}, freezePeriod int, opt *gitlab.UpdateFreezePeriodOptions, options ...gitlab.RequestOptionFunc)) *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateFreezePeriodOptions), variadicArgs...)
	})
	return _c
}

func (_c *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call) Return(_a0 *gitlab.FreezePeriod, _a1 *gitlab.Response, _a2 error) *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *FreezePeriodsServiceInterface_UpdateFreezePeriodOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewFreezePeriodsServiceInterface creates a new instance of FreezePeriodsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFreezePeriodsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FreezePeriodsServiceInterface {
	mock := &FreezePeriodsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
