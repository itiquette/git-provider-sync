// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupMilestonesServiceInterface is an autogenerated mock type for the GroupMilestonesServiceInterface type
type GroupMilestonesServiceInterface struct {
	mock.Mock
}

type GroupMilestonesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupMilestonesServiceInterface) EXPECT() *GroupMilestonesServiceInterface_Expecter {
	return &GroupMilestonesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupMilestone provides a mock function with given fields: gid, opt, options
func (_m *GroupMilestonesServiceInterface) CreateGroupMilestone(gid interface{}, opt *gitlab.CreateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupMilestone")
	}

	var r0 *gitlab.GroupMilestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupMilestone); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupMilestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_CreateGroupMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupMilestone'
type GroupMilestonesServiceInterface_CreateGroupMilestone_Call struct {
	*mock.Call
}

// CreateGroupMilestone is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupMilestoneOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) CreateGroupMilestone(gid interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_CreateGroupMilestone_Call {
	return &GroupMilestonesServiceInterface_CreateGroupMilestone_Call{Call: _e.mock.On("CreateGroupMilestone",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_CreateGroupMilestone_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_CreateGroupMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupMilestoneOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_CreateGroupMilestone_Call) Return(_a0 *gitlab.GroupMilestone, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_CreateGroupMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_CreateGroupMilestone_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *GroupMilestonesServiceInterface_CreateGroupMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupMilestone provides a mock function with given fields: pid, milestone, options
func (_m *GroupMilestonesServiceInterface) DeleteGroupMilestone(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupMilestone")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, milestone, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, milestone, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, milestone, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupMilestonesServiceInterface_DeleteGroupMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupMilestone'
type GroupMilestonesServiceInterface_DeleteGroupMilestone_Call struct {
	*mock.Call
}

// DeleteGroupMilestone is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) DeleteGroupMilestone(pid interface{}, milestone interface{}, options ...interface{}) *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call {
	return &GroupMilestonesServiceInterface_DeleteGroupMilestone_Call{Call: _e.mock.On("DeleteGroupMilestone",
		append([]interface{}{pid, milestone}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call) Run(run func(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupMilestonesServiceInterface_DeleteGroupMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMilestone provides a mock function with given fields: gid, milestone, options
func (_m *GroupMilestonesServiceInterface) GetGroupMilestone(gid interface{}, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, milestone)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMilestone")
	}

	var r0 *gitlab.GroupMilestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)); ok {
		return rf(gid, milestone, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.GroupMilestone); ok {
		r0 = rf(gid, milestone, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupMilestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, milestone, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, milestone, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_GetGroupMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMilestone'
type GroupMilestonesServiceInterface_GetGroupMilestone_Call struct {
	*mock.Call
}

// GetGroupMilestone is a helper method to define mock.On call
//   - gid interface{}
//   - milestone int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) GetGroupMilestone(gid interface{}, milestone interface{}, options ...interface{}) *GroupMilestonesServiceInterface_GetGroupMilestone_Call {
	return &GroupMilestonesServiceInterface_GetGroupMilestone_Call{Call: _e.mock.On("GetGroupMilestone",
		append([]interface{}{gid, milestone}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestone_Call) Run(run func(gid interface{}, milestone int, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_GetGroupMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestone_Call) Return(_a0 *gitlab.GroupMilestone, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_GetGroupMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestone_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *GroupMilestonesServiceInterface_GetGroupMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMilestoneBurndownChartEvents provides a mock function with given fields: gid, milestone, opt, options
func (_m *GroupMilestonesServiceInterface) GetGroupMilestoneBurndownChartEvents(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneBurndownChartEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMilestoneBurndownChartEvents")
	}

	var r0 []*gitlab.BurndownChartEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error)); ok {
		return rf(gid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.BurndownChartEvent); ok {
		r0 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BurndownChartEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMilestoneBurndownChartEvents'
type GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call struct {
	*mock.Call
}

// GetGroupMilestoneBurndownChartEvents is a helper method to define mock.On call
//   - gid interface{}
//   - milestone int
//   - opt *gitlab.GetGroupMilestoneBurndownChartEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) GetGroupMilestoneBurndownChartEvents(gid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call {
	return &GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call{Call: _e.mock.On("GetGroupMilestoneBurndownChartEvents",
		append([]interface{}{gid, milestone, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call) Run(run func(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneBurndownChartEventsOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.GetGroupMilestoneBurndownChartEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call) Return(_a0 []*gitlab.BurndownChartEvent, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error)) *GroupMilestonesServiceInterface_GetGroupMilestoneBurndownChartEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMilestoneIssues provides a mock function with given fields: gid, milestone, opt, options
func (_m *GroupMilestonesServiceInterface) GetGroupMilestoneIssues(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneIssuesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMilestoneIssues")
	}

	var r0 []*gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(gid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Issue); ok {
		r0 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMilestoneIssues'
type GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call struct {
	*mock.Call
}

// GetGroupMilestoneIssues is a helper method to define mock.On call
//   - gid interface{}
//   - milestone int
//   - opt *gitlab.GetGroupMilestoneIssuesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) GetGroupMilestoneIssues(gid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call {
	return &GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call{Call: _e.mock.On("GetGroupMilestoneIssues",
		append([]interface{}{gid, milestone, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call) Run(run func(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneIssuesOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.GetGroupMilestoneIssuesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call) Return(_a0 []*gitlab.Issue, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call) RunAndReturn(run func(interface{}, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *GroupMilestonesServiceInterface_GetGroupMilestoneIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMilestoneMergeRequests provides a mock function with given fields: gid, milestone, opt, options
func (_m *GroupMilestonesServiceInterface) GetGroupMilestoneMergeRequests(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMilestoneMergeRequests")
	}

	var r0 []*gitlab.BasicMergeRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)); ok {
		return rf(gid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) []*gitlab.BasicMergeRequest); ok {
		r0 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BasicMergeRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMilestoneMergeRequests'
type GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call struct {
	*mock.Call
}

// GetGroupMilestoneMergeRequests is a helper method to define mock.On call
//   - gid interface{}
//   - milestone int
//   - opt *gitlab.GetGroupMilestoneMergeRequestsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) GetGroupMilestoneMergeRequests(gid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call {
	return &GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call{Call: _e.mock.On("GetGroupMilestoneMergeRequests",
		append([]interface{}{gid, milestone, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call) Run(run func(gid interface{}, milestone int, opt *gitlab.GetGroupMilestoneMergeRequestsOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.GetGroupMilestoneMergeRequestsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call) Return(_a0 []*gitlab.BasicMergeRequest, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call) RunAndReturn(run func(interface{}, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)) *GroupMilestonesServiceInterface_GetGroupMilestoneMergeRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMilestones provides a mock function with given fields: gid, opt, options
func (_m *GroupMilestonesServiceInterface) ListGroupMilestones(gid interface{}, opt *gitlab.ListGroupMilestonesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMilestones")
	}

	var r0 []*gitlab.GroupMilestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupMilestone); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupMilestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_ListGroupMilestones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMilestones'
type GroupMilestonesServiceInterface_ListGroupMilestones_Call struct {
	*mock.Call
}

// ListGroupMilestones is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupMilestonesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) ListGroupMilestones(gid interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_ListGroupMilestones_Call {
	return &GroupMilestonesServiceInterface_ListGroupMilestones_Call{Call: _e.mock.On("ListGroupMilestones",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_ListGroupMilestones_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupMilestonesOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_ListGroupMilestones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupMilestonesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_ListGroupMilestones_Call) Return(_a0 []*gitlab.GroupMilestone, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_ListGroupMilestones_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_ListGroupMilestones_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error)) *GroupMilestonesServiceInterface_ListGroupMilestones_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupMilestone provides a mock function with given fields: gid, milestone, opt, options
func (_m *GroupMilestonesServiceInterface) UpdateGroupMilestone(gid interface{}, milestone int, opt *gitlab.UpdateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupMilestone")
	}

	var r0 *gitlab.GroupMilestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)); ok {
		return rf(gid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupMilestone); ok {
		r0 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupMilestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupMilestonesServiceInterface_UpdateGroupMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupMilestone'
type GroupMilestonesServiceInterface_UpdateGroupMilestone_Call struct {
	*mock.Call
}

// UpdateGroupMilestone is a helper method to define mock.On call
//   - gid interface{}
//   - milestone int
//   - opt *gitlab.UpdateGroupMilestoneOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupMilestonesServiceInterface_Expecter) UpdateGroupMilestone(gid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call {
	return &GroupMilestonesServiceInterface_UpdateGroupMilestone_Call{Call: _e.mock.On("UpdateGroupMilestone",
		append([]interface{}{gid, milestone, opt}, options...)...)}
}

func (_c *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call) Run(run func(gid interface{}, milestone int, opt *gitlab.UpdateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc)) *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateGroupMilestoneOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call) Return(_a0 *gitlab.GroupMilestone, _a1 *gitlab.Response, _a2 error) *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *GroupMilestonesServiceInterface_UpdateGroupMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupMilestonesServiceInterface creates a new instance of GroupMilestonesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupMilestonesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupMilestonesServiceInterface {
	mock := &GroupMilestonesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
