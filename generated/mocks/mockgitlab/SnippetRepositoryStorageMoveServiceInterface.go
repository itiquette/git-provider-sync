// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// SnippetRepositoryStorageMoveServiceInterface is an autogenerated mock type for the SnippetRepositoryStorageMoveServiceInterface type
type SnippetRepositoryStorageMoveServiceInterface struct {
	mock.Mock
}

type SnippetRepositoryStorageMoveServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SnippetRepositoryStorageMoveServiceInterface) EXPECT() *SnippetRepositoryStorageMoveServiceInterface_Expecter {
	return &SnippetRepositoryStorageMoveServiceInterface_Expecter{mock: &_m.Mock}
}

// GetStorageMove provides a mock function with given fields: repositoryStorage, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) GetStorageMove(repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, repositoryStorage)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageMove")
	}

	var r0 *gitlab.SnippetRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(repositoryStorage, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.SnippetRepositoryStorageMove); ok {
		r0 = rf(repositoryStorage, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.SnippetRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(repositoryStorage, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(repositoryStorage, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageMove'
type SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call struct {
	*mock.Call
}

// GetStorageMove is a helper method to define mock.On call
//   - repositoryStorage int
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) GetStorageMove(repositoryStorage interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call{Call: _e.mock.On("GetStorageMove",
		append([]interface{}{repositoryStorage}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call) Run(run func(repositoryStorage int, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call) Return(_a0 *gitlab.SnippetRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMove_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageMoveForSnippet provides a mock function with given fields: snippet, repositoryStorage, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) GetStorageMoveForSnippet(snippet int, repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet, repositoryStorage)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageMoveForSnippet")
	}

	var r0 *gitlab.SnippetRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(snippet, repositoryStorage, options...)
	}
	if rf, ok := ret.Get(0).(func(int, int, ...gitlab.RequestOptionFunc) *gitlab.SnippetRepositoryStorageMove); ok {
		r0 = rf(snippet, repositoryStorage, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.SnippetRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, repositoryStorage, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, repositoryStorage, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageMoveForSnippet'
type SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call struct {
	*mock.Call
}

// GetStorageMoveForSnippet is a helper method to define mock.On call
//   - snippet int
//   - repositoryStorage int
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) GetStorageMoveForSnippet(snippet interface{}, repositoryStorage interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call{Call: _e.mock.On("GetStorageMoveForSnippet",
		append([]interface{}{snippet, repositoryStorage}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call) Run(run func(snippet int, repositoryStorage int, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call) Return(_a0 *gitlab.SnippetRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call) RunAndReturn(run func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_GetStorageMoveForSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllStorageMoves provides a mock function with given fields: opts, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) RetrieveAllStorageMoves(opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllStorageMoves")
	}

	var r0 []*gitlab.SnippetRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(opts, options...)
	}
	if rf, ok := ret.Get(0).(func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) []*gitlab.SnippetRepositoryStorageMove); ok {
		r0 = rf(opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.SnippetRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllStorageMoves'
type SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call struct {
	*mock.Call
}

// RetrieveAllStorageMoves is a helper method to define mock.On call
//   - opts gitlab.RetrieveAllSnippetStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) RetrieveAllStorageMoves(opts interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call{Call: _e.mock.On("RetrieveAllStorageMoves",
		append([]interface{}{opts}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) Run(run func(opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(gitlab.RetrieveAllSnippetStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) Return(_a0 []*gitlab.SnippetRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call) RunAndReturn(run func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMoves_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllStorageMovesForSnippet provides a mock function with given fields: snippet, opts, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) RetrieveAllStorageMovesForSnippet(snippet int, opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllStorageMovesForSnippet")
	}

	var r0 []*gitlab.SnippetRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(snippet, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) []*gitlab.SnippetRepositoryStorageMove); ok {
		r0 = rf(snippet, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.SnippetRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllStorageMovesForSnippet'
type SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call struct {
	*mock.Call
}

// RetrieveAllStorageMovesForSnippet is a helper method to define mock.On call
//   - snippet int
//   - opts gitlab.RetrieveAllSnippetStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) RetrieveAllStorageMovesForSnippet(snippet interface{}, opts interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call{Call: _e.mock.On("RetrieveAllStorageMovesForSnippet",
		append([]interface{}{snippet, opts}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call) Run(run func(snippet int, opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.RetrieveAllSnippetStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call) Return(_a0 []*gitlab.SnippetRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call) RunAndReturn(run func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_RetrieveAllStorageMovesForSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleAllStorageMoves provides a mock function with given fields: opts, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) ScheduleAllStorageMoves(opts gitlab.ScheduleAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleAllStorageMoves")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(opts, options...)
	}
	if rf, ok := ret.Get(0).(func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(opts, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleAllStorageMoves'
type SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call struct {
	*mock.Call
}

// ScheduleAllStorageMoves is a helper method to define mock.On call
//   - opts gitlab.ScheduleAllSnippetStorageMovesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) ScheduleAllStorageMoves(opts interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call{Call: _e.mock.On("ScheduleAllStorageMoves",
		append([]interface{}{opts}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) Run(run func(opts gitlab.ScheduleAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(gitlab.ScheduleAllSnippetStorageMovesOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) Return(_a0 *gitlab.Response, _a1 error) *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call) RunAndReturn(run func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_ScheduleAllStorageMoves_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleStorageMoveForSnippet provides a mock function with given fields: snippet, opts, options
func (_m *SnippetRepositoryStorageMoveServiceInterface) ScheduleStorageMoveForSnippet(snippet int, opts gitlab.ScheduleStorageMoveForSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleStorageMoveForSnippet")
	}

	var r0 *gitlab.SnippetRepositoryStorageMove
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)); ok {
		return rf(snippet, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.SnippetRepositoryStorageMove); ok {
		r0 = rf(snippet, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.SnippetRepositoryStorageMove)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleStorageMoveForSnippet'
type SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call struct {
	*mock.Call
}

// ScheduleStorageMoveForSnippet is a helper method to define mock.On call
//   - snippet int
//   - opts gitlab.ScheduleStorageMoveForSnippetOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetRepositoryStorageMoveServiceInterface_Expecter) ScheduleStorageMoveForSnippet(snippet interface{}, opts interface{}, options ...interface{}) *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call {
	return &SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call{Call: _e.mock.On("ScheduleStorageMoveForSnippet",
		append([]interface{}{snippet, opts}, options...)...)}
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call) Run(run func(snippet int, opts gitlab.ScheduleStorageMoveForSnippetOptions, options ...gitlab.RequestOptionFunc)) *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.ScheduleStorageMoveForSnippetOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call) Return(_a0 *gitlab.SnippetRepositoryStorageMove, _a1 *gitlab.Response, _a2 error) *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call) RunAndReturn(run func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *SnippetRepositoryStorageMoveServiceInterface_ScheduleStorageMoveForSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnippetRepositoryStorageMoveServiceInterface creates a new instance of SnippetRepositoryStorageMoveServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnippetRepositoryStorageMoveServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnippetRepositoryStorageMoveServiceInterface {
	mock := &SnippetRepositoryStorageMoveServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
