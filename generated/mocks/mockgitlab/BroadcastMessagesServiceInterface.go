// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// BroadcastMessagesServiceInterface is an autogenerated mock type for the BroadcastMessagesServiceInterface type
type BroadcastMessagesServiceInterface struct {
	mock.Mock
}

type BroadcastMessagesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *BroadcastMessagesServiceInterface) EXPECT() *BroadcastMessagesServiceInterface_Expecter {
	return &BroadcastMessagesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateBroadcastMessage provides a mock function with given fields: opt, options
func (_m *BroadcastMessagesServiceInterface) CreateBroadcastMessage(opt *gitlab.CreateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBroadcastMessage")
	}

	var r0 *gitlab.BroadcastMessage
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) *gitlab.BroadcastMessage); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BroadcastMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBroadcastMessage'
type BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call struct {
	*mock.Call
}

// CreateBroadcastMessage is a helper method to define mock.On call
//   - opt *gitlab.CreateBroadcastMessageOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BroadcastMessagesServiceInterface_Expecter) CreateBroadcastMessage(opt interface{}, options ...interface{}) *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call {
	return &BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call{Call: _e.mock.On("CreateBroadcastMessage",
		append([]interface{}{opt}, options...)...)}
}

func (_c *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call) Run(run func(opt *gitlab.CreateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc)) *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CreateBroadcastMessageOptions), variadicArgs...)
	})
	return _c
}

func (_c *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call) Return(_a0 *gitlab.BroadcastMessage, _a1 *gitlab.Response, _a2 error) *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call) RunAndReturn(run func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *BroadcastMessagesServiceInterface_CreateBroadcastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBroadcastMessage provides a mock function with given fields: broadcast, options
func (_m *BroadcastMessagesServiceInterface) DeleteBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, broadcast)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBroadcastMessage")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(broadcast, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(broadcast, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(broadcast, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBroadcastMessage'
type BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call struct {
	*mock.Call
}

// DeleteBroadcastMessage is a helper method to define mock.On call
//   - broadcast int
//   - options ...gitlab.RequestOptionFunc
func (_e *BroadcastMessagesServiceInterface_Expecter) DeleteBroadcastMessage(broadcast interface{}, options ...interface{}) *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call {
	return &BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call{Call: _e.mock.On("DeleteBroadcastMessage",
		append([]interface{}{broadcast}, options...)...)}
}

func (_c *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call) Run(run func(broadcast int, options ...gitlab.RequestOptionFunc)) *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call) Return(_a0 *gitlab.Response, _a1 error) *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *BroadcastMessagesServiceInterface_DeleteBroadcastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetBroadcastMessage provides a mock function with given fields: broadcast, options
func (_m *BroadcastMessagesServiceInterface) GetBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, broadcast)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBroadcastMessage")
	}

	var r0 *gitlab.BroadcastMessage
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)); ok {
		return rf(broadcast, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.BroadcastMessage); ok {
		r0 = rf(broadcast, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BroadcastMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(broadcast, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(broadcast, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BroadcastMessagesServiceInterface_GetBroadcastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBroadcastMessage'
type BroadcastMessagesServiceInterface_GetBroadcastMessage_Call struct {
	*mock.Call
}

// GetBroadcastMessage is a helper method to define mock.On call
//   - broadcast int
//   - options ...gitlab.RequestOptionFunc
func (_e *BroadcastMessagesServiceInterface_Expecter) GetBroadcastMessage(broadcast interface{}, options ...interface{}) *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call {
	return &BroadcastMessagesServiceInterface_GetBroadcastMessage_Call{Call: _e.mock.On("GetBroadcastMessage",
		append([]interface{}{broadcast}, options...)...)}
}

func (_c *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call) Run(run func(broadcast int, options ...gitlab.RequestOptionFunc)) *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call) Return(_a0 *gitlab.BroadcastMessage, _a1 *gitlab.Response, _a2 error) *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *BroadcastMessagesServiceInterface_GetBroadcastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ListBroadcastMessages provides a mock function with given fields: opt, options
func (_m *BroadcastMessagesServiceInterface) ListBroadcastMessages(opt *gitlab.ListBroadcastMessagesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBroadcastMessages")
	}

	var r0 []*gitlab.BroadcastMessage
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) []*gitlab.BroadcastMessage); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BroadcastMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BroadcastMessagesServiceInterface_ListBroadcastMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBroadcastMessages'
type BroadcastMessagesServiceInterface_ListBroadcastMessages_Call struct {
	*mock.Call
}

// ListBroadcastMessages is a helper method to define mock.On call
//   - opt *gitlab.ListBroadcastMessagesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BroadcastMessagesServiceInterface_Expecter) ListBroadcastMessages(opt interface{}, options ...interface{}) *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call {
	return &BroadcastMessagesServiceInterface_ListBroadcastMessages_Call{Call: _e.mock.On("ListBroadcastMessages",
		append([]interface{}{opt}, options...)...)}
}

func (_c *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call) Run(run func(opt *gitlab.ListBroadcastMessagesOptions, options ...gitlab.RequestOptionFunc)) *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListBroadcastMessagesOptions), variadicArgs...)
	})
	return _c
}

func (_c *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call) Return(_a0 []*gitlab.BroadcastMessage, _a1 *gitlab.Response, _a2 error) *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call) RunAndReturn(run func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error)) *BroadcastMessagesServiceInterface_ListBroadcastMessages_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBroadcastMessage provides a mock function with given fields: broadcast, opt, options
func (_m *BroadcastMessagesServiceInterface) UpdateBroadcastMessage(broadcast int, opt *gitlab.UpdateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, broadcast, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBroadcastMessage")
	}

	var r0 *gitlab.BroadcastMessage
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)); ok {
		return rf(broadcast, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) *gitlab.BroadcastMessage); ok {
		r0 = rf(broadcast, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BroadcastMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(broadcast, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(broadcast, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBroadcastMessage'
type BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call struct {
	*mock.Call
}

// UpdateBroadcastMessage is a helper method to define mock.On call
//   - broadcast int
//   - opt *gitlab.UpdateBroadcastMessageOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *BroadcastMessagesServiceInterface_Expecter) UpdateBroadcastMessage(broadcast interface{}, opt interface{}, options ...interface{}) *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call {
	return &BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call{Call: _e.mock.On("UpdateBroadcastMessage",
		append([]interface{}{broadcast, opt}, options...)...)}
}

func (_c *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call) Run(run func(broadcast int, opt *gitlab.UpdateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc)) *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.UpdateBroadcastMessageOptions), variadicArgs...)
	})
	return _c
}

func (_c *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call) Return(_a0 *gitlab.BroadcastMessage, _a1 *gitlab.Response, _a2 error) *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call) RunAndReturn(run func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *BroadcastMessagesServiceInterface_UpdateBroadcastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewBroadcastMessagesServiceInterface creates a new instance of BroadcastMessagesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroadcastMessagesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BroadcastMessagesServiceInterface {
	mock := &BroadcastMessagesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
