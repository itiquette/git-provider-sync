// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupSCIMServiceInterface is an autogenerated mock type for the GroupSCIMServiceInterface type
type GroupSCIMServiceInterface struct {
	mock.Mock
}

type GroupSCIMServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupSCIMServiceInterface) EXPECT() *GroupSCIMServiceInterface_Expecter {
	return &GroupSCIMServiceInterface_Expecter{mock: &_m.Mock}
}

// DeleteSCIMIdentity provides a mock function with given fields: gid, uid, options
func (_m *GroupSCIMServiceInterface) DeleteSCIMIdentity(gid interface{}, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, uid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSCIMIdentity")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, uid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, uid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, uid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupSCIMServiceInterface_DeleteSCIMIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSCIMIdentity'
type GroupSCIMServiceInterface_DeleteSCIMIdentity_Call struct {
	*mock.Call
}

// DeleteSCIMIdentity is a helper method to define mock.On call
//   - gid interface{}
//   - uid string
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSCIMServiceInterface_Expecter) DeleteSCIMIdentity(gid interface{}, uid interface{}, options ...interface{}) *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call {
	return &GroupSCIMServiceInterface_DeleteSCIMIdentity_Call{Call: _e.mock.On("DeleteSCIMIdentity",
		append([]interface{}{gid, uid}, options...)...)}
}

func (_c *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call) Run(run func(gid interface{}, uid string, options ...gitlab.RequestOptionFunc)) *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupSCIMServiceInterface_DeleteSCIMIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetSCIMIdentitiesForGroup provides a mock function with given fields: gid, options
func (_m *GroupSCIMServiceInterface) GetSCIMIdentitiesForGroup(gid interface{}, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSCIMIdentitiesForGroup")
	}

	var r0 []*gitlab.GroupSCIMIdentity
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error)); ok {
		return rf(gid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []*gitlab.GroupSCIMIdentity); ok {
		r0 = rf(gid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupSCIMIdentity)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSCIMIdentitiesForGroup'
type GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call struct {
	*mock.Call
}

// GetSCIMIdentitiesForGroup is a helper method to define mock.On call
//   - gid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSCIMServiceInterface_Expecter) GetSCIMIdentitiesForGroup(gid interface{}, options ...interface{}) *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call {
	return &GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call{Call: _e.mock.On("GetSCIMIdentitiesForGroup",
		append([]interface{}{gid}, options...)...)}
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call) Run(run func(gid interface{}, options ...gitlab.RequestOptionFunc)) *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call) Return(_a0 []*gitlab.GroupSCIMIdentity, _a1 *gitlab.Response, _a2 error) *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *GroupSCIMServiceInterface_GetSCIMIdentitiesForGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetSCIMIdentity provides a mock function with given fields: gid, uid, options
func (_m *GroupSCIMServiceInterface) GetSCIMIdentity(gid interface{}, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, uid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSCIMIdentity")
	}

	var r0 *gitlab.GroupSCIMIdentity
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error)); ok {
		return rf(gid, uid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.GroupSCIMIdentity); ok {
		r0 = rf(gid, uid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupSCIMIdentity)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, uid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, uid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupSCIMServiceInterface_GetSCIMIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSCIMIdentity'
type GroupSCIMServiceInterface_GetSCIMIdentity_Call struct {
	*mock.Call
}

// GetSCIMIdentity is a helper method to define mock.On call
//   - gid interface{}
//   - uid string
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSCIMServiceInterface_Expecter) GetSCIMIdentity(gid interface{}, uid interface{}, options ...interface{}) *GroupSCIMServiceInterface_GetSCIMIdentity_Call {
	return &GroupSCIMServiceInterface_GetSCIMIdentity_Call{Call: _e.mock.On("GetSCIMIdentity",
		append([]interface{}{gid, uid}, options...)...)}
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentity_Call) Run(run func(gid interface{}, uid string, options ...gitlab.RequestOptionFunc)) *GroupSCIMServiceInterface_GetSCIMIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentity_Call) Return(_a0 *gitlab.GroupSCIMIdentity, _a1 *gitlab.Response, _a2 error) *GroupSCIMServiceInterface_GetSCIMIdentity_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupSCIMServiceInterface_GetSCIMIdentity_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *GroupSCIMServiceInterface_GetSCIMIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSCIMIdentity provides a mock function with given fields: gid, uid, opt, options
func (_m *GroupSCIMServiceInterface) UpdateSCIMIdentity(gid interface{}, uid string, opt *gitlab.UpdateSCIMIdentityOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, uid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSCIMIdentity")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, uid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, uid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, uid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupSCIMServiceInterface_UpdateSCIMIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSCIMIdentity'
type GroupSCIMServiceInterface_UpdateSCIMIdentity_Call struct {
	*mock.Call
}

// UpdateSCIMIdentity is a helper method to define mock.On call
//   - gid interface{}
//   - uid string
//   - opt *gitlab.UpdateSCIMIdentityOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSCIMServiceInterface_Expecter) UpdateSCIMIdentity(gid interface{}, uid interface{}, opt interface{}, options ...interface{}) *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call {
	return &GroupSCIMServiceInterface_UpdateSCIMIdentity_Call{Call: _e.mock.On("UpdateSCIMIdentity",
		append([]interface{}{gid, uid, opt}, options...)...)}
}

func (_c *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call) Run(run func(gid interface{}, uid string, opt *gitlab.UpdateSCIMIdentityOptions, options ...gitlab.RequestOptionFunc)) *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateSCIMIdentityOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupSCIMServiceInterface_UpdateSCIMIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupSCIMServiceInterface creates a new instance of GroupSCIMServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupSCIMServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupSCIMServiceInterface {
	mock := &GroupSCIMServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
