// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// DependencyListExportServiceInterface is an autogenerated mock type for the DependencyListExportServiceInterface type
type DependencyListExportServiceInterface struct {
	mock.Mock
}

type DependencyListExportServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DependencyListExportServiceInterface) EXPECT() *DependencyListExportServiceInterface_Expecter {
	return &DependencyListExportServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateDependencyListExport provides a mock function with given fields: pipelineID, opt, options
func (_m *DependencyListExportServiceInterface) CreateDependencyListExport(pipelineID int, opt *gitlab.CreateDependencyListExportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pipelineID, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDependencyListExport")
	}

	var r0 *gitlab.DependencyListExport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.CreateDependencyListExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error)); ok {
		return rf(pipelineID, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.CreateDependencyListExportOptions, ...gitlab.RequestOptionFunc) *gitlab.DependencyListExport); ok {
		r0 = rf(pipelineID, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DependencyListExport)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.CreateDependencyListExportOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pipelineID, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.CreateDependencyListExportOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pipelineID, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DependencyListExportServiceInterface_CreateDependencyListExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDependencyListExport'
type DependencyListExportServiceInterface_CreateDependencyListExport_Call struct {
	*mock.Call
}

// CreateDependencyListExport is a helper method to define mock.On call
//   - pipelineID int
//   - opt *gitlab.CreateDependencyListExportOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DependencyListExportServiceInterface_Expecter) CreateDependencyListExport(pipelineID interface{}, opt interface{}, options ...interface{}) *DependencyListExportServiceInterface_CreateDependencyListExport_Call {
	return &DependencyListExportServiceInterface_CreateDependencyListExport_Call{Call: _e.mock.On("CreateDependencyListExport",
		append([]interface{}{pipelineID, opt}, options...)...)}
}

func (_c *DependencyListExportServiceInterface_CreateDependencyListExport_Call) Run(run func(pipelineID int, opt *gitlab.CreateDependencyListExportOptions, options ...gitlab.RequestOptionFunc)) *DependencyListExportServiceInterface_CreateDependencyListExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.CreateDependencyListExportOptions), variadicArgs...)
	})
	return _c
}

func (_c *DependencyListExportServiceInterface_CreateDependencyListExport_Call) Return(_a0 *gitlab.DependencyListExport, _a1 *gitlab.Response, _a2 error) *DependencyListExportServiceInterface_CreateDependencyListExport_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DependencyListExportServiceInterface_CreateDependencyListExport_Call) RunAndReturn(run func(int, *gitlab.CreateDependencyListExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error)) *DependencyListExportServiceInterface_CreateDependencyListExport_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadDependencyListExport provides a mock function with given fields: id, options
func (_m *DependencyListExportServiceInterface) DownloadDependencyListExport(id int, options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDependencyListExport")
	}

	var r0 io.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)); ok {
		return rf(id, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) io.Reader); ok {
		r0 = rf(id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DependencyListExportServiceInterface_DownloadDependencyListExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadDependencyListExport'
type DependencyListExportServiceInterface_DownloadDependencyListExport_Call struct {
	*mock.Call
}

// DownloadDependencyListExport is a helper method to define mock.On call
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *DependencyListExportServiceInterface_Expecter) DownloadDependencyListExport(id interface{}, options ...interface{}) *DependencyListExportServiceInterface_DownloadDependencyListExport_Call {
	return &DependencyListExportServiceInterface_DownloadDependencyListExport_Call{Call: _e.mock.On("DownloadDependencyListExport",
		append([]interface{}{id}, options...)...)}
}

func (_c *DependencyListExportServiceInterface_DownloadDependencyListExport_Call) Run(run func(id int, options ...gitlab.RequestOptionFunc)) *DependencyListExportServiceInterface_DownloadDependencyListExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *DependencyListExportServiceInterface_DownloadDependencyListExport_Call) Return(_a0 io.Reader, _a1 *gitlab.Response, _a2 error) *DependencyListExportServiceInterface_DownloadDependencyListExport_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DependencyListExportServiceInterface_DownloadDependencyListExport_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)) *DependencyListExportServiceInterface_DownloadDependencyListExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyListExport provides a mock function with given fields: id, options
func (_m *DependencyListExportServiceInterface) GetDependencyListExport(id int, options ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyListExport")
	}

	var r0 *gitlab.DependencyListExport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error)); ok {
		return rf(id, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.DependencyListExport); ok {
		r0 = rf(id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DependencyListExport)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DependencyListExportServiceInterface_GetDependencyListExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyListExport'
type DependencyListExportServiceInterface_GetDependencyListExport_Call struct {
	*mock.Call
}

// GetDependencyListExport is a helper method to define mock.On call
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *DependencyListExportServiceInterface_Expecter) GetDependencyListExport(id interface{}, options ...interface{}) *DependencyListExportServiceInterface_GetDependencyListExport_Call {
	return &DependencyListExportServiceInterface_GetDependencyListExport_Call{Call: _e.mock.On("GetDependencyListExport",
		append([]interface{}{id}, options...)...)}
}

func (_c *DependencyListExportServiceInterface_GetDependencyListExport_Call) Run(run func(id int, options ...gitlab.RequestOptionFunc)) *DependencyListExportServiceInterface_GetDependencyListExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *DependencyListExportServiceInterface_GetDependencyListExport_Call) Return(_a0 *gitlab.DependencyListExport, _a1 *gitlab.Response, _a2 error) *DependencyListExportServiceInterface_GetDependencyListExport_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DependencyListExportServiceInterface_GetDependencyListExport_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.DependencyListExport, *gitlab.Response, error)) *DependencyListExportServiceInterface_GetDependencyListExport_Call {
	_c.Call.Return(run)
	return _c
}

// NewDependencyListExportServiceInterface creates a new instance of DependencyListExportServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencyListExportServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DependencyListExportServiceInterface {
	mock := &DependencyListExportServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
