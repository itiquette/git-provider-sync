// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// UsageDataServiceInterface is an autogenerated mock type for the UsageDataServiceInterface type
type UsageDataServiceInterface struct {
	mock.Mock
}

type UsageDataServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UsageDataServiceInterface) EXPECT() *UsageDataServiceInterface_Expecter {
	return &UsageDataServiceInterface_Expecter{mock: &_m.Mock}
}

// GetMetricDefinitionsAsYAML provides a mock function with given fields: options
func (_m *UsageDataServiceInterface) GetMetricDefinitionsAsYAML(options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricDefinitionsAsYAML")
	}

	var r0 io.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) io.Reader); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricDefinitionsAsYAML'
type UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call struct {
	*mock.Call
}

// GetMetricDefinitionsAsYAML is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) GetMetricDefinitionsAsYAML(options ...interface{}) *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call {
	return &UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call{Call: _e.mock.On("GetMetricDefinitionsAsYAML",
		append([]interface{}{}, options...)...)}
}

func (_c *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call) Return(_a0 io.Reader, _a1 *gitlab.Response, _a2 error) *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)) *UsageDataServiceInterface_GetMetricDefinitionsAsYAML_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonSQLMetrics provides a mock function with given fields: options
func (_m *UsageDataServiceInterface) GetNonSQLMetrics(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNonSQLMetrics")
	}

	var r0 *gitlab.ServicePingNonSqlMetrics
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) *gitlab.ServicePingNonSqlMetrics); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ServicePingNonSqlMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsageDataServiceInterface_GetNonSQLMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonSQLMetrics'
type UsageDataServiceInterface_GetNonSQLMetrics_Call struct {
	*mock.Call
}

// GetNonSQLMetrics is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) GetNonSQLMetrics(options ...interface{}) *UsageDataServiceInterface_GetNonSQLMetrics_Call {
	return &UsageDataServiceInterface_GetNonSQLMetrics_Call{Call: _e.mock.On("GetNonSQLMetrics",
		append([]interface{}{}, options...)...)}
}

func (_c *UsageDataServiceInterface_GetNonSQLMetrics_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_GetNonSQLMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_GetNonSQLMetrics_Call) Return(_a0 *gitlab.ServicePingNonSqlMetrics, _a1 *gitlab.Response, _a2 error) *UsageDataServiceInterface_GetNonSQLMetrics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UsageDataServiceInterface_GetNonSQLMetrics_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error)) *UsageDataServiceInterface_GetNonSQLMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueries provides a mock function with given fields: options
func (_m *UsageDataServiceInterface) GetQueries(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueries")
	}

	var r0 *gitlab.ServicePingQueries
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) *gitlab.ServicePingQueries); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ServicePingQueries)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsageDataServiceInterface_GetQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueries'
type UsageDataServiceInterface_GetQueries_Call struct {
	*mock.Call
}

// GetQueries is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) GetQueries(options ...interface{}) *UsageDataServiceInterface_GetQueries_Call {
	return &UsageDataServiceInterface_GetQueries_Call{Call: _e.mock.On("GetQueries",
		append([]interface{}{}, options...)...)}
}

func (_c *UsageDataServiceInterface_GetQueries_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_GetQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_GetQueries_Call) Return(_a0 *gitlab.ServicePingQueries, _a1 *gitlab.Response, _a2 error) *UsageDataServiceInterface_GetQueries_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UsageDataServiceInterface_GetQueries_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error)) *UsageDataServiceInterface_GetQueries_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicePing provides a mock function with given fields: options
func (_m *UsageDataServiceInterface) GetServicePing(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServicePing")
	}

	var r0 *gitlab.ServicePingData
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) *gitlab.ServicePingData); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ServicePingData)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsageDataServiceInterface_GetServicePing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicePing'
type UsageDataServiceInterface_GetServicePing_Call struct {
	*mock.Call
}

// GetServicePing is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) GetServicePing(options ...interface{}) *UsageDataServiceInterface_GetServicePing_Call {
	return &UsageDataServiceInterface_GetServicePing_Call{Call: _e.mock.On("GetServicePing",
		append([]interface{}{}, options...)...)}
}

func (_c *UsageDataServiceInterface_GetServicePing_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_GetServicePing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_GetServicePing_Call) Return(_a0 *gitlab.ServicePingData, _a1 *gitlab.Response, _a2 error) *UsageDataServiceInterface_GetServicePing_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UsageDataServiceInterface_GetServicePing_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error)) *UsageDataServiceInterface_GetServicePing_Call {
	_c.Call.Return(run)
	return _c
}

// TrackEvent provides a mock function with given fields: opt, options
func (_m *UsageDataServiceInterface) TrackEvent(opt *gitlab.TrackEventOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TrackEvent")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsageDataServiceInterface_TrackEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackEvent'
type UsageDataServiceInterface_TrackEvent_Call struct {
	*mock.Call
}

// TrackEvent is a helper method to define mock.On call
//   - opt *gitlab.TrackEventOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) TrackEvent(opt interface{}, options ...interface{}) *UsageDataServiceInterface_TrackEvent_Call {
	return &UsageDataServiceInterface_TrackEvent_Call{Call: _e.mock.On("TrackEvent",
		append([]interface{}{opt}, options...)...)}
}

func (_c *UsageDataServiceInterface_TrackEvent_Call) Run(run func(opt *gitlab.TrackEventOptions, options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_TrackEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.TrackEventOptions), variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_TrackEvent_Call) Return(_a0 *gitlab.Response, _a1 error) *UsageDataServiceInterface_TrackEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsageDataServiceInterface_TrackEvent_Call) RunAndReturn(run func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *UsageDataServiceInterface_TrackEvent_Call {
	_c.Call.Return(run)
	return _c
}

// TrackEvents provides a mock function with given fields: opt, options
func (_m *UsageDataServiceInterface) TrackEvents(opt *gitlab.TrackEventsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TrackEvents")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsageDataServiceInterface_TrackEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackEvents'
type UsageDataServiceInterface_TrackEvents_Call struct {
	*mock.Call
}

// TrackEvents is a helper method to define mock.On call
//   - opt *gitlab.TrackEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *UsageDataServiceInterface_Expecter) TrackEvents(opt interface{}, options ...interface{}) *UsageDataServiceInterface_TrackEvents_Call {
	return &UsageDataServiceInterface_TrackEvents_Call{Call: _e.mock.On("TrackEvents",
		append([]interface{}{opt}, options...)...)}
}

func (_c *UsageDataServiceInterface_TrackEvents_Call) Run(run func(opt *gitlab.TrackEventsOptions, options ...gitlab.RequestOptionFunc)) *UsageDataServiceInterface_TrackEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.TrackEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *UsageDataServiceInterface_TrackEvents_Call) Return(_a0 *gitlab.Response, _a1 error) *UsageDataServiceInterface_TrackEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsageDataServiceInterface_TrackEvents_Call) RunAndReturn(run func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *UsageDataServiceInterface_TrackEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsageDataServiceInterface creates a new instance of UsageDataServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsageDataServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsageDataServiceInterface {
	mock := &UsageDataServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
