// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ResourceStateEventsServiceInterface is an autogenerated mock type for the ResourceStateEventsServiceInterface type
type ResourceStateEventsServiceInterface struct {
	mock.Mock
}

type ResourceStateEventsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceStateEventsServiceInterface) EXPECT() *ResourceStateEventsServiceInterface_Expecter {
	return &ResourceStateEventsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetIssueStateEvent provides a mock function with given fields: pid, issue, event, options
func (_m *ResourceStateEventsServiceInterface) GetIssueStateEvent(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueStateEvent")
	}

	var r0 *gitlab.StateEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.StateEvent); ok {
		r0 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.StateEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceStateEventsServiceInterface_GetIssueStateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueStateEvent'
type ResourceStateEventsServiceInterface_GetIssueStateEvent_Call struct {
	*mock.Call
}

// GetIssueStateEvent is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceStateEventsServiceInterface_Expecter) GetIssueStateEvent(pid interface{}, issue interface{}, event interface{}, options ...interface{}) *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call {
	return &ResourceStateEventsServiceInterface_GetIssueStateEvent_Call{Call: _e.mock.On("GetIssueStateEvent",
		append([]interface{}{pid, issue, event}, options...)...)}
}

func (_c *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call) Run(run func(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc)) *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call) Return(_a0 *gitlab.StateEvent, _a1 *gitlab.Response, _a2 error) *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error)) *ResourceStateEventsServiceInterface_GetIssueStateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestStateEvent provides a mock function with given fields: pid, request, event, options
func (_m *ResourceStateEventsServiceInterface) GetMergeRequestStateEvent(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestStateEvent")
	}

	var r0 *gitlab.StateEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.StateEvent); ok {
		r0 = rf(pid, request, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.StateEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestStateEvent'
type ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call struct {
	*mock.Call
}

// GetMergeRequestStateEvent is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceStateEventsServiceInterface_Expecter) GetMergeRequestStateEvent(pid interface{}, request interface{}, event interface{}, options ...interface{}) *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call {
	return &ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call{Call: _e.mock.On("GetMergeRequestStateEvent",
		append([]interface{}{pid, request, event}, options...)...)}
}

func (_c *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call) Run(run func(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc)) *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call) Return(_a0 *gitlab.StateEvent, _a1 *gitlab.Response, _a2 error) *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.StateEvent, *gitlab.Response, error)) *ResourceStateEventsServiceInterface_GetMergeRequestStateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueStateEvents provides a mock function with given fields: pid, issue, opt, options
func (_m *ResourceStateEventsServiceInterface) ListIssueStateEvents(pid interface{}, issue int, opt *gitlab.ListStateEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueStateEvents")
	}

	var r0 []*gitlab.StateEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.StateEvent); ok {
		r0 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.StateEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceStateEventsServiceInterface_ListIssueStateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueStateEvents'
type ResourceStateEventsServiceInterface_ListIssueStateEvents_Call struct {
	*mock.Call
}

// ListIssueStateEvents is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - opt *gitlab.ListStateEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceStateEventsServiceInterface_Expecter) ListIssueStateEvents(pid interface{}, issue interface{}, opt interface{}, options ...interface{}) *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call {
	return &ResourceStateEventsServiceInterface_ListIssueStateEvents_Call{Call: _e.mock.On("ListIssueStateEvents",
		append([]interface{}{pid, issue, opt}, options...)...)}
}

func (_c *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call) Run(run func(pid interface{}, issue int, opt *gitlab.ListStateEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListStateEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call) Return(_a0 []*gitlab.StateEvent, _a1 *gitlab.Response, _a2 error) *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error)) *ResourceStateEventsServiceInterface_ListIssueStateEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeStateEvents provides a mock function with given fields: pid, request, opt, options
func (_m *ResourceStateEventsServiceInterface) ListMergeStateEvents(pid interface{}, request int, opt *gitlab.ListStateEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMergeStateEvents")
	}

	var r0 []*gitlab.StateEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.StateEvent); ok {
		r0 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.StateEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceStateEventsServiceInterface_ListMergeStateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeStateEvents'
type ResourceStateEventsServiceInterface_ListMergeStateEvents_Call struct {
	*mock.Call
}

// ListMergeStateEvents is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - opt *gitlab.ListStateEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceStateEventsServiceInterface_Expecter) ListMergeStateEvents(pid interface{}, request interface{}, opt interface{}, options ...interface{}) *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call {
	return &ResourceStateEventsServiceInterface_ListMergeStateEvents_Call{Call: _e.mock.On("ListMergeStateEvents",
		append([]interface{}{pid, request, opt}, options...)...)}
}

func (_c *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call) Run(run func(pid interface{}, request int, opt *gitlab.ListStateEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListStateEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call) Return(_a0 []*gitlab.StateEvent, _a1 *gitlab.Response, _a2 error) *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListStateEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.StateEvent, *gitlab.Response, error)) *ResourceStateEventsServiceInterface_ListMergeStateEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceStateEventsServiceInterface creates a new instance of ResourceStateEventsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceStateEventsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceStateEventsServiceInterface {
	mock := &ResourceStateEventsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
