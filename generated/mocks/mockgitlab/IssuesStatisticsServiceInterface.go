// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// IssuesStatisticsServiceInterface is an autogenerated mock type for the IssuesStatisticsServiceInterface type
type IssuesStatisticsServiceInterface struct {
	mock.Mock
}

type IssuesStatisticsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *IssuesStatisticsServiceInterface) EXPECT() *IssuesStatisticsServiceInterface_Expecter {
	return &IssuesStatisticsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupIssuesStatistics provides a mock function with given fields: gid, opt, options
func (_m *IssuesStatisticsServiceInterface) GetGroupIssuesStatistics(gid interface{}, opt *gitlab.GetGroupIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIssuesStatistics")
	}

	var r0 *gitlab.IssuesStatistics
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetGroupIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetGroupIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.IssuesStatistics); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssuesStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.GetGroupIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.GetGroupIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIssuesStatistics'
type IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call struct {
	*mock.Call
}

// GetGroupIssuesStatistics is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.GetGroupIssuesStatisticsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *IssuesStatisticsServiceInterface_Expecter) GetGroupIssuesStatistics(gid interface{}, opt interface{}, options ...interface{}) *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call {
	return &IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call{Call: _e.mock.On("GetGroupIssuesStatistics",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call) Run(run func(gid interface{}, opt *gitlab.GetGroupIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc)) *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.GetGroupIssuesStatisticsOptions), variadicArgs...)
	})
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call) Return(_a0 *gitlab.IssuesStatistics, _a1 *gitlab.Response, _a2 error) *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call) RunAndReturn(run func(interface{}, *gitlab.GetGroupIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)) *IssuesStatisticsServiceInterface_GetGroupIssuesStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuesStatistics provides a mock function with given fields: opt, options
func (_m *IssuesStatisticsServiceInterface) GetIssuesStatistics(opt *gitlab.GetIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIssuesStatistics")
	}

	var r0 *gitlab.IssuesStatistics
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.GetIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.GetIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.IssuesStatistics); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssuesStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.GetIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.GetIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesStatisticsServiceInterface_GetIssuesStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuesStatistics'
type IssuesStatisticsServiceInterface_GetIssuesStatistics_Call struct {
	*mock.Call
}

// GetIssuesStatistics is a helper method to define mock.On call
//   - opt *gitlab.GetIssuesStatisticsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *IssuesStatisticsServiceInterface_Expecter) GetIssuesStatistics(opt interface{}, options ...interface{}) *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call {
	return &IssuesStatisticsServiceInterface_GetIssuesStatistics_Call{Call: _e.mock.On("GetIssuesStatistics",
		append([]interface{}{opt}, options...)...)}
}

func (_c *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call) Run(run func(opt *gitlab.GetIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc)) *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.GetIssuesStatisticsOptions), variadicArgs...)
	})
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call) Return(_a0 *gitlab.IssuesStatistics, _a1 *gitlab.Response, _a2 error) *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call) RunAndReturn(run func(*gitlab.GetIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)) *IssuesStatisticsServiceInterface_GetIssuesStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectIssuesStatistics provides a mock function with given fields: pid, opt, options
func (_m *IssuesStatisticsServiceInterface) GetProjectIssuesStatistics(pid interface{}, opt *gitlab.GetProjectIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectIssuesStatistics")
	}

	var r0 *gitlab.IssuesStatistics
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.IssuesStatistics); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssuesStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.GetProjectIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.GetProjectIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectIssuesStatistics'
type IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call struct {
	*mock.Call
}

// GetProjectIssuesStatistics is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.GetProjectIssuesStatisticsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *IssuesStatisticsServiceInterface_Expecter) GetProjectIssuesStatistics(pid interface{}, opt interface{}, options ...interface{}) *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call {
	return &IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call{Call: _e.mock.On("GetProjectIssuesStatistics",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call) Run(run func(pid interface{}, opt *gitlab.GetProjectIssuesStatisticsOptions, options ...gitlab.RequestOptionFunc)) *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.GetProjectIssuesStatisticsOptions), variadicArgs...)
	})
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call) Return(_a0 *gitlab.IssuesStatistics, _a1 *gitlab.Response, _a2 error) *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call) RunAndReturn(run func(interface{}, *gitlab.GetProjectIssuesStatisticsOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesStatistics, *gitlab.Response, error)) *IssuesStatisticsServiceInterface_GetProjectIssuesStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// NewIssuesStatisticsServiceInterface creates a new instance of IssuesStatisticsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssuesStatisticsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssuesStatisticsServiceInterface {
	mock := &IssuesStatisticsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
