// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupSSHCertificatesServiceInterface is an autogenerated mock type for the GroupSSHCertificatesServiceInterface type
type GroupSSHCertificatesServiceInterface struct {
	mock.Mock
}

type GroupSSHCertificatesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupSSHCertificatesServiceInterface) EXPECT() *GroupSSHCertificatesServiceInterface_Expecter {
	return &GroupSSHCertificatesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupSSHCertificate provides a mock function with given fields: gid, opt, options
func (_m *GroupSSHCertificatesServiceInterface) CreateGroupSSHCertificate(gid interface{}, opt *gitlab.CreateGroupSSHCertificateOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupSSHCertificate")
	}

	var r0 *gitlab.GroupSSHCertificate
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupSSHCertificate); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupSSHCertificate)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupSSHCertificate'
type GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call struct {
	*mock.Call
}

// CreateGroupSSHCertificate is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupSSHCertificateOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSSHCertificatesServiceInterface_Expecter) CreateGroupSSHCertificate(gid interface{}, opt interface{}, options ...interface{}) *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call {
	return &GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call{Call: _e.mock.On("CreateGroupSSHCertificate",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupSSHCertificateOptions, options ...gitlab.RequestOptionFunc)) *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupSSHCertificateOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call) Return(_a0 *gitlab.GroupSSHCertificate, _a1 *gitlab.Response, _a2 error) *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *GroupSSHCertificatesServiceInterface_CreateGroupSSHCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupSSHCertificate provides a mock function with given fields: gid, cert, options
func (_m *GroupSSHCertificatesServiceInterface) DeleteGroupSSHCertificate(gid interface{}, cert int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, cert)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupSSHCertificate")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, cert, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, cert, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, cert, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupSSHCertificate'
type GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call struct {
	*mock.Call
}

// DeleteGroupSSHCertificate is a helper method to define mock.On call
//   - gid interface{}
//   - cert int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSSHCertificatesServiceInterface_Expecter) DeleteGroupSSHCertificate(gid interface{}, cert interface{}, options ...interface{}) *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call {
	return &GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call{Call: _e.mock.On("DeleteGroupSSHCertificate",
		append([]interface{}{gid, cert}, options...)...)}
}

func (_c *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call) Run(run func(gid interface{}, cert int, options ...gitlab.RequestOptionFunc)) *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupSSHCertificatesServiceInterface_DeleteGroupSSHCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupSSHCertificates provides a mock function with given fields: gid, options
func (_m *GroupSSHCertificatesServiceInterface) ListGroupSSHCertificates(gid interface{}, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupSSHCertificates")
	}

	var r0 []*gitlab.GroupSSHCertificate
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error)); ok {
		return rf(gid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []*gitlab.GroupSSHCertificate); ok {
		r0 = rf(gid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupSSHCertificate)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupSSHCertificates'
type GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call struct {
	*mock.Call
}

// ListGroupSSHCertificates is a helper method to define mock.On call
//   - gid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupSSHCertificatesServiceInterface_Expecter) ListGroupSSHCertificates(gid interface{}, options ...interface{}) *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call {
	return &GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call{Call: _e.mock.On("ListGroupSSHCertificates",
		append([]interface{}{gid}, options...)...)}
}

func (_c *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call) Run(run func(gid interface{}, options ...gitlab.RequestOptionFunc)) *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call) Return(_a0 []*gitlab.GroupSSHCertificate, _a1 *gitlab.Response, _a2 error) *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *GroupSSHCertificatesServiceInterface_ListGroupSSHCertificates_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupSSHCertificatesServiceInterface creates a new instance of GroupSSHCertificatesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupSSHCertificatesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupSSHCertificatesServiceInterface {
	mock := &GroupSSHCertificatesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
