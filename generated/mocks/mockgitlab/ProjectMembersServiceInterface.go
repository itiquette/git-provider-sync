// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProjectMembersServiceInterface is an autogenerated mock type for the ProjectMembersServiceInterface type
type ProjectMembersServiceInterface struct {
	mock.Mock
}

type ProjectMembersServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectMembersServiceInterface) EXPECT() *ProjectMembersServiceInterface_Expecter {
	return &ProjectMembersServiceInterface_Expecter{mock: &_m.Mock}
}

// AddProjectMember provides a mock function with given fields: pid, opt, options
func (_m *ProjectMembersServiceInterface) AddProjectMember(pid interface{}, opt *gitlab.AddProjectMemberOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectMember")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectMemberOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectMemberOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectMember); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddProjectMemberOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddProjectMemberOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_AddProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectMember'
type ProjectMembersServiceInterface_AddProjectMember_Call struct {
	*mock.Call
}

// AddProjectMember is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddProjectMemberOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) AddProjectMember(pid interface{}, opt interface{}, options ...interface{}) *ProjectMembersServiceInterface_AddProjectMember_Call {
	return &ProjectMembersServiceInterface_AddProjectMember_Call{Call: _e.mock.On("AddProjectMember",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_AddProjectMember_Call) Run(run func(pid interface{}, opt *gitlab.AddProjectMemberOptions, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_AddProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddProjectMemberOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_AddProjectMember_Call) Return(_a0 *gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_AddProjectMember_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_AddProjectMember_Call) RunAndReturn(run func(interface{}, *gitlab.AddProjectMemberOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_AddProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectMember provides a mock function with given fields: pid, user, options
func (_m *ProjectMembersServiceInterface) DeleteProjectMember(pid interface{}, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMember")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, user, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, user, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectMembersServiceInterface_DeleteProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectMember'
type ProjectMembersServiceInterface_DeleteProjectMember_Call struct {
	*mock.Call
}

// DeleteProjectMember is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) DeleteProjectMember(pid interface{}, user interface{}, options ...interface{}) *ProjectMembersServiceInterface_DeleteProjectMember_Call {
	return &ProjectMembersServiceInterface_DeleteProjectMember_Call{Call: _e.mock.On("DeleteProjectMember",
		append([]interface{}{pid, user}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_DeleteProjectMember_Call) Run(run func(pid interface{}, user int, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_DeleteProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_DeleteProjectMember_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectMembersServiceInterface_DeleteProjectMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectMembersServiceInterface_DeleteProjectMember_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectMembersServiceInterface_DeleteProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// EditProjectMember provides a mock function with given fields: pid, user, opt, options
func (_m *ProjectMembersServiceInterface) EditProjectMember(pid interface{}, user int, opt *gitlab.EditProjectMemberOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditProjectMember")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectMemberOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, user, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectMemberOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectMember); ok {
		r0 = rf(pid, user, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditProjectMemberOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, user, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditProjectMemberOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, user, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_EditProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditProjectMember'
type ProjectMembersServiceInterface_EditProjectMember_Call struct {
	*mock.Call
}

// EditProjectMember is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - opt *gitlab.EditProjectMemberOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) EditProjectMember(pid interface{}, user interface{}, opt interface{}, options ...interface{}) *ProjectMembersServiceInterface_EditProjectMember_Call {
	return &ProjectMembersServiceInterface_EditProjectMember_Call{Call: _e.mock.On("EditProjectMember",
		append([]interface{}{pid, user, opt}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_EditProjectMember_Call) Run(run func(pid interface{}, user int, opt *gitlab.EditProjectMemberOptions, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_EditProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.EditProjectMemberOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_EditProjectMember_Call) Return(_a0 *gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_EditProjectMember_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_EditProjectMember_Call) RunAndReturn(run func(interface{}, int, *gitlab.EditProjectMemberOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_EditProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetInheritedProjectMember provides a mock function with given fields: pid, user, options
func (_m *ProjectMembersServiceInterface) GetInheritedProjectMember(pid interface{}, user int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInheritedProjectMember")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, user, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectMember); ok {
		r0 = rf(pid, user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, user, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, user, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_GetInheritedProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInheritedProjectMember'
type ProjectMembersServiceInterface_GetInheritedProjectMember_Call struct {
	*mock.Call
}

// GetInheritedProjectMember is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) GetInheritedProjectMember(pid interface{}, user interface{}, options ...interface{}) *ProjectMembersServiceInterface_GetInheritedProjectMember_Call {
	return &ProjectMembersServiceInterface_GetInheritedProjectMember_Call{Call: _e.mock.On("GetInheritedProjectMember",
		append([]interface{}{pid, user}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_GetInheritedProjectMember_Call) Run(run func(pid interface{}, user int, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_GetInheritedProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_GetInheritedProjectMember_Call) Return(_a0 *gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_GetInheritedProjectMember_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_GetInheritedProjectMember_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_GetInheritedProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMember provides a mock function with given fields: pid, user, options
func (_m *ProjectMembersServiceInterface) GetProjectMember(pid interface{}, user int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMember")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, user, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectMember); ok {
		r0 = rf(pid, user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, user, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, user, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_GetProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMember'
type ProjectMembersServiceInterface_GetProjectMember_Call struct {
	*mock.Call
}

// GetProjectMember is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) GetProjectMember(pid interface{}, user interface{}, options ...interface{}) *ProjectMembersServiceInterface_GetProjectMember_Call {
	return &ProjectMembersServiceInterface_GetProjectMember_Call{Call: _e.mock.On("GetProjectMember",
		append([]interface{}{pid, user}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_GetProjectMember_Call) Run(run func(pid interface{}, user int, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_GetProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_GetProjectMember_Call) Return(_a0 *gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_GetProjectMember_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_GetProjectMember_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_GetProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllProjectMembers provides a mock function with given fields: pid, opt, options
func (_m *ProjectMembersServiceInterface) ListAllProjectMembers(pid interface{}, opt *gitlab.ListProjectMembersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllProjectMembers")
	}

	var r0 []*gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectMember); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_ListAllProjectMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllProjectMembers'
type ProjectMembersServiceInterface_ListAllProjectMembers_Call struct {
	*mock.Call
}

// ListAllProjectMembers is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectMembersOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) ListAllProjectMembers(pid interface{}, opt interface{}, options ...interface{}) *ProjectMembersServiceInterface_ListAllProjectMembers_Call {
	return &ProjectMembersServiceInterface_ListAllProjectMembers_Call{Call: _e.mock.On("ListAllProjectMembers",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_ListAllProjectMembers_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectMembersOptions, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_ListAllProjectMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectMembersOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_ListAllProjectMembers_Call) Return(_a0 []*gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_ListAllProjectMembers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_ListAllProjectMembers_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_ListAllProjectMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMembers provides a mock function with given fields: pid, opt, options
func (_m *ProjectMembersServiceInterface) ListProjectMembers(pid interface{}, opt *gitlab.ListProjectMembersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMembers")
	}

	var r0 []*gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectMember); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMembersServiceInterface_ListProjectMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMembers'
type ProjectMembersServiceInterface_ListProjectMembers_Call struct {
	*mock.Call
}

// ListProjectMembers is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectMembersOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMembersServiceInterface_Expecter) ListProjectMembers(pid interface{}, opt interface{}, options ...interface{}) *ProjectMembersServiceInterface_ListProjectMembers_Call {
	return &ProjectMembersServiceInterface_ListProjectMembers_Call{Call: _e.mock.On("ListProjectMembers",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProjectMembersServiceInterface_ListProjectMembers_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectMembersOptions, options ...gitlab.RequestOptionFunc)) *ProjectMembersServiceInterface_ListProjectMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectMembersOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMembersServiceInterface_ListProjectMembers_Call) Return(_a0 []*gitlab.ProjectMember, _a1 *gitlab.Response, _a2 error) *ProjectMembersServiceInterface_ListProjectMembers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMembersServiceInterface_ListProjectMembers_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectMembersOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMember, *gitlab.Response, error)) *ProjectMembersServiceInterface_ListProjectMembers_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectMembersServiceInterface creates a new instance of ProjectMembersServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMembersServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMembersServiceInterface {
	mock := &ProjectMembersServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
