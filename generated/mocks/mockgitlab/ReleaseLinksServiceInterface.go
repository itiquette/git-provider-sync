// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ReleaseLinksServiceInterface is an autogenerated mock type for the ReleaseLinksServiceInterface type
type ReleaseLinksServiceInterface struct {
	mock.Mock
}

type ReleaseLinksServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleaseLinksServiceInterface) EXPECT() *ReleaseLinksServiceInterface_Expecter {
	return &ReleaseLinksServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateReleaseLink provides a mock function with given fields: pid, tagName, opt, options
func (_m *ReleaseLinksServiceInterface) CreateReleaseLink(pid interface{}, tagName string, opt *gitlab.CreateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReleaseLink")
	}

	var r0 *gitlab.ReleaseLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)); ok {
		return rf(pid, tagName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.ReleaseLink); ok {
		r0 = rf(pid, tagName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ReleaseLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleaseLinksServiceInterface_CreateReleaseLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReleaseLink'
type ReleaseLinksServiceInterface_CreateReleaseLink_Call struct {
	*mock.Call
}

// CreateReleaseLink is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - opt *gitlab.CreateReleaseLinkOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleaseLinksServiceInterface_Expecter) CreateReleaseLink(pid interface{}, tagName interface{}, opt interface{}, options ...interface{}) *ReleaseLinksServiceInterface_CreateReleaseLink_Call {
	return &ReleaseLinksServiceInterface_CreateReleaseLink_Call{Call: _e.mock.On("CreateReleaseLink",
		append([]interface{}{pid, tagName, opt}, options...)...)}
}

func (_c *ReleaseLinksServiceInterface_CreateReleaseLink_Call) Run(run func(pid interface{}, tagName string, opt *gitlab.CreateReleaseLinkOptions, options ...gitlab.RequestOptionFunc)) *ReleaseLinksServiceInterface_CreateReleaseLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.CreateReleaseLinkOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleaseLinksServiceInterface_CreateReleaseLink_Call) Return(_a0 *gitlab.ReleaseLink, _a1 *gitlab.Response, _a2 error) *ReleaseLinksServiceInterface_CreateReleaseLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleaseLinksServiceInterface_CreateReleaseLink_Call) RunAndReturn(run func(interface{}, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *ReleaseLinksServiceInterface_CreateReleaseLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReleaseLink provides a mock function with given fields: pid, tagName, link, options
func (_m *ReleaseLinksServiceInterface) DeleteReleaseLink(pid interface{}, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, link)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReleaseLink")
	}

	var r0 *gitlab.ReleaseLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)); ok {
		return rf(pid, tagName, link, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) *gitlab.ReleaseLink); ok {
		r0 = rf(pid, tagName, link, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ReleaseLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, link, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, link, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleaseLinksServiceInterface_DeleteReleaseLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReleaseLink'
type ReleaseLinksServiceInterface_DeleteReleaseLink_Call struct {
	*mock.Call
}

// DeleteReleaseLink is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - link int
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleaseLinksServiceInterface_Expecter) DeleteReleaseLink(pid interface{}, tagName interface{}, link interface{}, options ...interface{}) *ReleaseLinksServiceInterface_DeleteReleaseLink_Call {
	return &ReleaseLinksServiceInterface_DeleteReleaseLink_Call{Call: _e.mock.On("DeleteReleaseLink",
		append([]interface{}{pid, tagName, link}, options...)...)}
}

func (_c *ReleaseLinksServiceInterface_DeleteReleaseLink_Call) Run(run func(pid interface{}, tagName string, link int, options ...gitlab.RequestOptionFunc)) *ReleaseLinksServiceInterface_DeleteReleaseLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ReleaseLinksServiceInterface_DeleteReleaseLink_Call) Return(_a0 *gitlab.ReleaseLink, _a1 *gitlab.Response, _a2 error) *ReleaseLinksServiceInterface_DeleteReleaseLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleaseLinksServiceInterface_DeleteReleaseLink_Call) RunAndReturn(run func(interface{}, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *ReleaseLinksServiceInterface_DeleteReleaseLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseLink provides a mock function with given fields: pid, tagName, link, options
func (_m *ReleaseLinksServiceInterface) GetReleaseLink(pid interface{}, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, link)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseLink")
	}

	var r0 *gitlab.ReleaseLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)); ok {
		return rf(pid, tagName, link, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) *gitlab.ReleaseLink); ok {
		r0 = rf(pid, tagName, link, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ReleaseLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, link, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, link, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleaseLinksServiceInterface_GetReleaseLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseLink'
type ReleaseLinksServiceInterface_GetReleaseLink_Call struct {
	*mock.Call
}

// GetReleaseLink is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - link int
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleaseLinksServiceInterface_Expecter) GetReleaseLink(pid interface{}, tagName interface{}, link interface{}, options ...interface{}) *ReleaseLinksServiceInterface_GetReleaseLink_Call {
	return &ReleaseLinksServiceInterface_GetReleaseLink_Call{Call: _e.mock.On("GetReleaseLink",
		append([]interface{}{pid, tagName, link}, options...)...)}
}

func (_c *ReleaseLinksServiceInterface_GetReleaseLink_Call) Run(run func(pid interface{}, tagName string, link int, options ...gitlab.RequestOptionFunc)) *ReleaseLinksServiceInterface_GetReleaseLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ReleaseLinksServiceInterface_GetReleaseLink_Call) Return(_a0 *gitlab.ReleaseLink, _a1 *gitlab.Response, _a2 error) *ReleaseLinksServiceInterface_GetReleaseLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleaseLinksServiceInterface_GetReleaseLink_Call) RunAndReturn(run func(interface{}, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *ReleaseLinksServiceInterface_GetReleaseLink_Call {
	_c.Call.Return(run)
	return _c
}

// ListReleaseLinks provides a mock function with given fields: pid, tagName, opt, options
func (_m *ReleaseLinksServiceInterface) ListReleaseLinks(pid interface{}, tagName string, opt *gitlab.ListReleaseLinksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReleaseLinks")
	}

	var r0 []*gitlab.ReleaseLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error)); ok {
		return rf(pid, tagName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) []*gitlab.ReleaseLink); ok {
		r0 = rf(pid, tagName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ReleaseLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleaseLinksServiceInterface_ListReleaseLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReleaseLinks'
type ReleaseLinksServiceInterface_ListReleaseLinks_Call struct {
	*mock.Call
}

// ListReleaseLinks is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - opt *gitlab.ListReleaseLinksOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleaseLinksServiceInterface_Expecter) ListReleaseLinks(pid interface{}, tagName interface{}, opt interface{}, options ...interface{}) *ReleaseLinksServiceInterface_ListReleaseLinks_Call {
	return &ReleaseLinksServiceInterface_ListReleaseLinks_Call{Call: _e.mock.On("ListReleaseLinks",
		append([]interface{}{pid, tagName, opt}, options...)...)}
}

func (_c *ReleaseLinksServiceInterface_ListReleaseLinks_Call) Run(run func(pid interface{}, tagName string, opt *gitlab.ListReleaseLinksOptions, options ...gitlab.RequestOptionFunc)) *ReleaseLinksServiceInterface_ListReleaseLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.ListReleaseLinksOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleaseLinksServiceInterface_ListReleaseLinks_Call) Return(_a0 []*gitlab.ReleaseLink, _a1 *gitlab.Response, _a2 error) *ReleaseLinksServiceInterface_ListReleaseLinks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleaseLinksServiceInterface_ListReleaseLinks_Call) RunAndReturn(run func(interface{}, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error)) *ReleaseLinksServiceInterface_ListReleaseLinks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReleaseLink provides a mock function with given fields: pid, tagName, link, opt, options
func (_m *ReleaseLinksServiceInterface) UpdateReleaseLink(pid interface{}, tagName string, link int, opt *gitlab.UpdateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, link, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReleaseLink")
	}

	var r0 *gitlab.ReleaseLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)); ok {
		return rf(pid, tagName, link, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.ReleaseLink); ok {
		r0 = rf(pid, tagName, link, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ReleaseLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, link, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, link, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleaseLinksServiceInterface_UpdateReleaseLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReleaseLink'
type ReleaseLinksServiceInterface_UpdateReleaseLink_Call struct {
	*mock.Call
}

// UpdateReleaseLink is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - link int
//   - opt *gitlab.UpdateReleaseLinkOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleaseLinksServiceInterface_Expecter) UpdateReleaseLink(pid interface{}, tagName interface{}, link interface{}, opt interface{}, options ...interface{}) *ReleaseLinksServiceInterface_UpdateReleaseLink_Call {
	return &ReleaseLinksServiceInterface_UpdateReleaseLink_Call{Call: _e.mock.On("UpdateReleaseLink",
		append([]interface{}{pid, tagName, link, opt}, options...)...)}
}

func (_c *ReleaseLinksServiceInterface_UpdateReleaseLink_Call) Run(run func(pid interface{}, tagName string, link int, opt *gitlab.UpdateReleaseLinkOptions, options ...gitlab.RequestOptionFunc)) *ReleaseLinksServiceInterface_UpdateReleaseLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(int), args[3].(*gitlab.UpdateReleaseLinkOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleaseLinksServiceInterface_UpdateReleaseLink_Call) Return(_a0 *gitlab.ReleaseLink, _a1 *gitlab.Response, _a2 error) *ReleaseLinksServiceInterface_UpdateReleaseLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleaseLinksServiceInterface_UpdateReleaseLink_Call) RunAndReturn(run func(interface{}, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *ReleaseLinksServiceInterface_UpdateReleaseLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewReleaseLinksServiceInterface creates a new instance of ReleaseLinksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseLinksServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseLinksServiceInterface {
	mock := &ReleaseLinksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
