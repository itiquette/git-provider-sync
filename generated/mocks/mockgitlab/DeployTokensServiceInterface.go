// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// DeployTokensServiceInterface is an autogenerated mock type for the DeployTokensServiceInterface type
type DeployTokensServiceInterface struct {
	mock.Mock
}

type DeployTokensServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DeployTokensServiceInterface) EXPECT() *DeployTokensServiceInterface_Expecter {
	return &DeployTokensServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupDeployToken provides a mock function with given fields: gid, opt, options
func (_m *DeployTokensServiceInterface) CreateGroupDeployToken(gid interface{}, opt *gitlab.CreateGroupDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupDeployToken")
	}

	var r0 *gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.DeployToken); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_CreateGroupDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupDeployToken'
type DeployTokensServiceInterface_CreateGroupDeployToken_Call struct {
	*mock.Call
}

// CreateGroupDeployToken is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupDeployTokenOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) CreateGroupDeployToken(gid interface{}, opt interface{}, options ...interface{}) *DeployTokensServiceInterface_CreateGroupDeployToken_Call {
	return &DeployTokensServiceInterface_CreateGroupDeployToken_Call{Call: _e.mock.On("CreateGroupDeployToken",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *DeployTokensServiceInterface_CreateGroupDeployToken_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupDeployTokenOptions, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_CreateGroupDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupDeployTokenOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_CreateGroupDeployToken_Call) Return(_a0 *gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_CreateGroupDeployToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_CreateGroupDeployToken_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_CreateGroupDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectDeployToken provides a mock function with given fields: pid, opt, options
func (_m *DeployTokensServiceInterface) CreateProjectDeployToken(pid interface{}, opt *gitlab.CreateProjectDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectDeployToken")
	}

	var r0 *gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.DeployToken); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_CreateProjectDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectDeployToken'
type DeployTokensServiceInterface_CreateProjectDeployToken_Call struct {
	*mock.Call
}

// CreateProjectDeployToken is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateProjectDeployTokenOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) CreateProjectDeployToken(pid interface{}, opt interface{}, options ...interface{}) *DeployTokensServiceInterface_CreateProjectDeployToken_Call {
	return &DeployTokensServiceInterface_CreateProjectDeployToken_Call{Call: _e.mock.On("CreateProjectDeployToken",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *DeployTokensServiceInterface_CreateProjectDeployToken_Call) Run(run func(pid interface{}, opt *gitlab.CreateProjectDeployTokenOptions, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_CreateProjectDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateProjectDeployTokenOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_CreateProjectDeployToken_Call) Return(_a0 *gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_CreateProjectDeployToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_CreateProjectDeployToken_Call) RunAndReturn(run func(interface{}, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_CreateProjectDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupDeployToken provides a mock function with given fields: gid, deployToken, options
func (_m *DeployTokensServiceInterface) DeleteGroupDeployToken(gid interface{}, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, deployToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupDeployToken")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, deployToken, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, deployToken, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, deployToken, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployTokensServiceInterface_DeleteGroupDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupDeployToken'
type DeployTokensServiceInterface_DeleteGroupDeployToken_Call struct {
	*mock.Call
}

// DeleteGroupDeployToken is a helper method to define mock.On call
//   - gid interface{}
//   - deployToken int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) DeleteGroupDeployToken(gid interface{}, deployToken interface{}, options ...interface{}) *DeployTokensServiceInterface_DeleteGroupDeployToken_Call {
	return &DeployTokensServiceInterface_DeleteGroupDeployToken_Call{Call: _e.mock.On("DeleteGroupDeployToken",
		append([]interface{}{gid, deployToken}, options...)...)}
}

func (_c *DeployTokensServiceInterface_DeleteGroupDeployToken_Call) Run(run func(gid interface{}, deployToken int, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_DeleteGroupDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_DeleteGroupDeployToken_Call) Return(_a0 *gitlab.Response, _a1 error) *DeployTokensServiceInterface_DeleteGroupDeployToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeployTokensServiceInterface_DeleteGroupDeployToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *DeployTokensServiceInterface_DeleteGroupDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectDeployToken provides a mock function with given fields: pid, deployToken, options
func (_m *DeployTokensServiceInterface) DeleteProjectDeployToken(pid interface{}, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectDeployToken")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, deployToken, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, deployToken, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, deployToken, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployTokensServiceInterface_DeleteProjectDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectDeployToken'
type DeployTokensServiceInterface_DeleteProjectDeployToken_Call struct {
	*mock.Call
}

// DeleteProjectDeployToken is a helper method to define mock.On call
//   - pid interface{}
//   - deployToken int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) DeleteProjectDeployToken(pid interface{}, deployToken interface{}, options ...interface{}) *DeployTokensServiceInterface_DeleteProjectDeployToken_Call {
	return &DeployTokensServiceInterface_DeleteProjectDeployToken_Call{Call: _e.mock.On("DeleteProjectDeployToken",
		append([]interface{}{pid, deployToken}, options...)...)}
}

func (_c *DeployTokensServiceInterface_DeleteProjectDeployToken_Call) Run(run func(pid interface{}, deployToken int, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_DeleteProjectDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_DeleteProjectDeployToken_Call) Return(_a0 *gitlab.Response, _a1 error) *DeployTokensServiceInterface_DeleteProjectDeployToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeployTokensServiceInterface_DeleteProjectDeployToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *DeployTokensServiceInterface_DeleteProjectDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupDeployToken provides a mock function with given fields: gid, deployToken, options
func (_m *DeployTokensServiceInterface) GetGroupDeployToken(gid interface{}, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, deployToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupDeployToken")
	}

	var r0 *gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(gid, deployToken, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.DeployToken); ok {
		r0 = rf(gid, deployToken, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, deployToken, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, deployToken, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_GetGroupDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupDeployToken'
type DeployTokensServiceInterface_GetGroupDeployToken_Call struct {
	*mock.Call
}

// GetGroupDeployToken is a helper method to define mock.On call
//   - gid interface{}
//   - deployToken int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) GetGroupDeployToken(gid interface{}, deployToken interface{}, options ...interface{}) *DeployTokensServiceInterface_GetGroupDeployToken_Call {
	return &DeployTokensServiceInterface_GetGroupDeployToken_Call{Call: _e.mock.On("GetGroupDeployToken",
		append([]interface{}{gid, deployToken}, options...)...)}
}

func (_c *DeployTokensServiceInterface_GetGroupDeployToken_Call) Run(run func(gid interface{}, deployToken int, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_GetGroupDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_GetGroupDeployToken_Call) Return(_a0 *gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_GetGroupDeployToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_GetGroupDeployToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_GetGroupDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectDeployToken provides a mock function with given fields: pid, deployToken, options
func (_m *DeployTokensServiceInterface) GetProjectDeployToken(pid interface{}, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDeployToken")
	}

	var r0 *gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(pid, deployToken, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.DeployToken); ok {
		r0 = rf(pid, deployToken, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, deployToken, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, deployToken, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_GetProjectDeployToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectDeployToken'
type DeployTokensServiceInterface_GetProjectDeployToken_Call struct {
	*mock.Call
}

// GetProjectDeployToken is a helper method to define mock.On call
//   - pid interface{}
//   - deployToken int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) GetProjectDeployToken(pid interface{}, deployToken interface{}, options ...interface{}) *DeployTokensServiceInterface_GetProjectDeployToken_Call {
	return &DeployTokensServiceInterface_GetProjectDeployToken_Call{Call: _e.mock.On("GetProjectDeployToken",
		append([]interface{}{pid, deployToken}, options...)...)}
}

func (_c *DeployTokensServiceInterface_GetProjectDeployToken_Call) Run(run func(pid interface{}, deployToken int, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_GetProjectDeployToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_GetProjectDeployToken_Call) Return(_a0 *gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_GetProjectDeployToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_GetProjectDeployToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_GetProjectDeployToken_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllDeployTokens provides a mock function with given fields: options
func (_m *DeployTokensServiceInterface) ListAllDeployTokens(options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllDeployTokens")
	}

	var r0 []*gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) []*gitlab.DeployToken); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_ListAllDeployTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllDeployTokens'
type DeployTokensServiceInterface_ListAllDeployTokens_Call struct {
	*mock.Call
}

// ListAllDeployTokens is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) ListAllDeployTokens(options ...interface{}) *DeployTokensServiceInterface_ListAllDeployTokens_Call {
	return &DeployTokensServiceInterface_ListAllDeployTokens_Call{Call: _e.mock.On("ListAllDeployTokens",
		append([]interface{}{}, options...)...)}
}

func (_c *DeployTokensServiceInterface_ListAllDeployTokens_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_ListAllDeployTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_ListAllDeployTokens_Call) Return(_a0 []*gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_ListAllDeployTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_ListAllDeployTokens_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_ListAllDeployTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupDeployTokens provides a mock function with given fields: gid, opt, options
func (_m *DeployTokensServiceInterface) ListGroupDeployTokens(gid interface{}, opt *gitlab.ListGroupDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupDeployTokens")
	}

	var r0 []*gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) []*gitlab.DeployToken); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_ListGroupDeployTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupDeployTokens'
type DeployTokensServiceInterface_ListGroupDeployTokens_Call struct {
	*mock.Call
}

// ListGroupDeployTokens is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupDeployTokensOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) ListGroupDeployTokens(gid interface{}, opt interface{}, options ...interface{}) *DeployTokensServiceInterface_ListGroupDeployTokens_Call {
	return &DeployTokensServiceInterface_ListGroupDeployTokens_Call{Call: _e.mock.On("ListGroupDeployTokens",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *DeployTokensServiceInterface_ListGroupDeployTokens_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupDeployTokensOptions, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_ListGroupDeployTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupDeployTokensOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_ListGroupDeployTokens_Call) Return(_a0 []*gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_ListGroupDeployTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_ListGroupDeployTokens_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_ListGroupDeployTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectDeployTokens provides a mock function with given fields: pid, opt, options
func (_m *DeployTokensServiceInterface) ListProjectDeployTokens(pid interface{}, opt *gitlab.ListProjectDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectDeployTokens")
	}

	var r0 []*gitlab.DeployToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) []*gitlab.DeployToken); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.DeployToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployTokensServiceInterface_ListProjectDeployTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectDeployTokens'
type DeployTokensServiceInterface_ListProjectDeployTokens_Call struct {
	*mock.Call
}

// ListProjectDeployTokens is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectDeployTokensOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployTokensServiceInterface_Expecter) ListProjectDeployTokens(pid interface{}, opt interface{}, options ...interface{}) *DeployTokensServiceInterface_ListProjectDeployTokens_Call {
	return &DeployTokensServiceInterface_ListProjectDeployTokens_Call{Call: _e.mock.On("ListProjectDeployTokens",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *DeployTokensServiceInterface_ListProjectDeployTokens_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectDeployTokensOptions, options ...gitlab.RequestOptionFunc)) *DeployTokensServiceInterface_ListProjectDeployTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectDeployTokensOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployTokensServiceInterface_ListProjectDeployTokens_Call) Return(_a0 []*gitlab.DeployToken, _a1 *gitlab.Response, _a2 error) *DeployTokensServiceInterface_ListProjectDeployTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployTokensServiceInterface_ListProjectDeployTokens_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *DeployTokensServiceInterface_ListProjectDeployTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeployTokensServiceInterface creates a new instance of DeployTokensServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeployTokensServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeployTokensServiceInterface {
	mock := &DeployTokensServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
