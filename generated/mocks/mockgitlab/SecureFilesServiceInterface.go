// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// SecureFilesServiceInterface is an autogenerated mock type for the SecureFilesServiceInterface type
type SecureFilesServiceInterface struct {
	mock.Mock
}

type SecureFilesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SecureFilesServiceInterface) EXPECT() *SecureFilesServiceInterface_Expecter {
	return &SecureFilesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateSecureFile provides a mock function with given fields: pid, content, opt, options
func (_m *SecureFilesServiceInterface) CreateSecureFile(pid interface{}, content io.Reader, opt *gitlab.CreateSecureFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, content, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecureFile")
	}

	var r0 *gitlab.SecureFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, *gitlab.CreateSecureFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error)); ok {
		return rf(pid, content, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, *gitlab.CreateSecureFileOptions, ...gitlab.RequestOptionFunc) *gitlab.SecureFile); ok {
		r0 = rf(pid, content, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.SecureFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, io.Reader, *gitlab.CreateSecureFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, content, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, io.Reader, *gitlab.CreateSecureFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, content, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SecureFilesServiceInterface_CreateSecureFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecureFile'
type SecureFilesServiceInterface_CreateSecureFile_Call struct {
	*mock.Call
}

// CreateSecureFile is a helper method to define mock.On call
//   - pid interface{}
//   - content io.Reader
//   - opt *gitlab.CreateSecureFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SecureFilesServiceInterface_Expecter) CreateSecureFile(pid interface{}, content interface{}, opt interface{}, options ...interface{}) *SecureFilesServiceInterface_CreateSecureFile_Call {
	return &SecureFilesServiceInterface_CreateSecureFile_Call{Call: _e.mock.On("CreateSecureFile",
		append([]interface{}{pid, content, opt}, options...)...)}
}

func (_c *SecureFilesServiceInterface_CreateSecureFile_Call) Run(run func(pid interface{}, content io.Reader, opt *gitlab.CreateSecureFileOptions, options ...gitlab.RequestOptionFunc)) *SecureFilesServiceInterface_CreateSecureFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(io.Reader), args[2].(*gitlab.CreateSecureFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *SecureFilesServiceInterface_CreateSecureFile_Call) Return(_a0 *gitlab.SecureFile, _a1 *gitlab.Response, _a2 error) *SecureFilesServiceInterface_CreateSecureFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SecureFilesServiceInterface_CreateSecureFile_Call) RunAndReturn(run func(interface{}, io.Reader, *gitlab.CreateSecureFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error)) *SecureFilesServiceInterface_CreateSecureFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadSecureFile provides a mock function with given fields: pid, id, options
func (_m *SecureFilesServiceInterface) DownloadSecureFile(pid interface{}, id int, options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadSecureFile")
	}

	var r0 io.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)); ok {
		return rf(pid, id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) io.Reader); ok {
		r0 = rf(pid, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SecureFilesServiceInterface_DownloadSecureFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadSecureFile'
type SecureFilesServiceInterface_DownloadSecureFile_Call struct {
	*mock.Call
}

// DownloadSecureFile is a helper method to define mock.On call
//   - pid interface{}
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *SecureFilesServiceInterface_Expecter) DownloadSecureFile(pid interface{}, id interface{}, options ...interface{}) *SecureFilesServiceInterface_DownloadSecureFile_Call {
	return &SecureFilesServiceInterface_DownloadSecureFile_Call{Call: _e.mock.On("DownloadSecureFile",
		append([]interface{}{pid, id}, options...)...)}
}

func (_c *SecureFilesServiceInterface_DownloadSecureFile_Call) Run(run func(pid interface{}, id int, options ...gitlab.RequestOptionFunc)) *SecureFilesServiceInterface_DownloadSecureFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *SecureFilesServiceInterface_DownloadSecureFile_Call) Return(_a0 io.Reader, _a1 *gitlab.Response, _a2 error) *SecureFilesServiceInterface_DownloadSecureFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SecureFilesServiceInterface_DownloadSecureFile_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)) *SecureFilesServiceInterface_DownloadSecureFile_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectSecureFiles provides a mock function with given fields: pid, opt, options
func (_m *SecureFilesServiceInterface) ListProjectSecureFiles(pid interface{}, opt *gitlab.ListProjectSecureFilesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SecureFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectSecureFiles")
	}

	var r0 []*gitlab.SecureFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectSecureFilesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SecureFile, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectSecureFilesOptions, ...gitlab.RequestOptionFunc) []*gitlab.SecureFile); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.SecureFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectSecureFilesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectSecureFilesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SecureFilesServiceInterface_ListProjectSecureFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectSecureFiles'
type SecureFilesServiceInterface_ListProjectSecureFiles_Call struct {
	*mock.Call
}

// ListProjectSecureFiles is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectSecureFilesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SecureFilesServiceInterface_Expecter) ListProjectSecureFiles(pid interface{}, opt interface{}, options ...interface{}) *SecureFilesServiceInterface_ListProjectSecureFiles_Call {
	return &SecureFilesServiceInterface_ListProjectSecureFiles_Call{Call: _e.mock.On("ListProjectSecureFiles",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *SecureFilesServiceInterface_ListProjectSecureFiles_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectSecureFilesOptions, options ...gitlab.RequestOptionFunc)) *SecureFilesServiceInterface_ListProjectSecureFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectSecureFilesOptions), variadicArgs...)
	})
	return _c
}

func (_c *SecureFilesServiceInterface_ListProjectSecureFiles_Call) Return(_a0 []*gitlab.SecureFile, _a1 *gitlab.Response, _a2 error) *SecureFilesServiceInterface_ListProjectSecureFiles_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SecureFilesServiceInterface_ListProjectSecureFiles_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectSecureFilesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SecureFile, *gitlab.Response, error)) *SecureFilesServiceInterface_ListProjectSecureFiles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSecureFile provides a mock function with given fields: pid, id, options
func (_m *SecureFilesServiceInterface) RemoveSecureFile(pid interface{}, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSecureFile")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, id, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecureFilesServiceInterface_RemoveSecureFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSecureFile'
type SecureFilesServiceInterface_RemoveSecureFile_Call struct {
	*mock.Call
}

// RemoveSecureFile is a helper method to define mock.On call
//   - pid interface{}
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *SecureFilesServiceInterface_Expecter) RemoveSecureFile(pid interface{}, id interface{}, options ...interface{}) *SecureFilesServiceInterface_RemoveSecureFile_Call {
	return &SecureFilesServiceInterface_RemoveSecureFile_Call{Call: _e.mock.On("RemoveSecureFile",
		append([]interface{}{pid, id}, options...)...)}
}

func (_c *SecureFilesServiceInterface_RemoveSecureFile_Call) Run(run func(pid interface{}, id int, options ...gitlab.RequestOptionFunc)) *SecureFilesServiceInterface_RemoveSecureFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *SecureFilesServiceInterface_RemoveSecureFile_Call) Return(_a0 *gitlab.Response, _a1 error) *SecureFilesServiceInterface_RemoveSecureFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecureFilesServiceInterface_RemoveSecureFile_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *SecureFilesServiceInterface_RemoveSecureFile_Call {
	_c.Call.Return(run)
	return _c
}

// ShowSecureFileDetails provides a mock function with given fields: pid, id, options
func (_m *SecureFilesServiceInterface) ShowSecureFileDetails(pid interface{}, id int, options ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShowSecureFileDetails")
	}

	var r0 *gitlab.SecureFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error)); ok {
		return rf(pid, id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.SecureFile); ok {
		r0 = rf(pid, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.SecureFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SecureFilesServiceInterface_ShowSecureFileDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowSecureFileDetails'
type SecureFilesServiceInterface_ShowSecureFileDetails_Call struct {
	*mock.Call
}

// ShowSecureFileDetails is a helper method to define mock.On call
//   - pid interface{}
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *SecureFilesServiceInterface_Expecter) ShowSecureFileDetails(pid interface{}, id interface{}, options ...interface{}) *SecureFilesServiceInterface_ShowSecureFileDetails_Call {
	return &SecureFilesServiceInterface_ShowSecureFileDetails_Call{Call: _e.mock.On("ShowSecureFileDetails",
		append([]interface{}{pid, id}, options...)...)}
}

func (_c *SecureFilesServiceInterface_ShowSecureFileDetails_Call) Run(run func(pid interface{}, id int, options ...gitlab.RequestOptionFunc)) *SecureFilesServiceInterface_ShowSecureFileDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *SecureFilesServiceInterface_ShowSecureFileDetails_Call) Return(_a0 *gitlab.SecureFile, _a1 *gitlab.Response, _a2 error) *SecureFilesServiceInterface_ShowSecureFileDetails_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SecureFilesServiceInterface_ShowSecureFileDetails_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.SecureFile, *gitlab.Response, error)) *SecureFilesServiceInterface_ShowSecureFileDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecureFilesServiceInterface creates a new instance of SecureFilesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecureFilesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecureFilesServiceInterface {
	mock := &SecureFilesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
