// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// DeployKeysServiceInterface is an autogenerated mock type for the DeployKeysServiceInterface type
type DeployKeysServiceInterface struct {
	mock.Mock
}

type DeployKeysServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DeployKeysServiceInterface) EXPECT() *DeployKeysServiceInterface_Expecter {
	return &DeployKeysServiceInterface_Expecter{mock: &_m.Mock}
}

// AddDeployKey provides a mock function with given fields: pid, opt, options
func (_m *DeployKeysServiceInterface) AddDeployKey(pid interface{}, opt *gitlab.AddDeployKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddDeployKey")
	}

	var r0 *gitlab.ProjectDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddDeployKeyOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddDeployKeyOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectDeployKey); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddDeployKeyOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddDeployKeyOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_AddDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeployKey'
type DeployKeysServiceInterface_AddDeployKey_Call struct {
	*mock.Call
}

// AddDeployKey is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddDeployKeyOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) AddDeployKey(pid interface{}, opt interface{}, options ...interface{}) *DeployKeysServiceInterface_AddDeployKey_Call {
	return &DeployKeysServiceInterface_AddDeployKey_Call{Call: _e.mock.On("AddDeployKey",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *DeployKeysServiceInterface_AddDeployKey_Call) Run(run func(pid interface{}, opt *gitlab.AddDeployKeyOptions, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_AddDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddDeployKeyOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_AddDeployKey_Call) Return(_a0 *gitlab.ProjectDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_AddDeployKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_AddDeployKey_Call) RunAndReturn(run func(interface{}, *gitlab.AddDeployKeyOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_AddDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeployKey provides a mock function with given fields: pid, deployKey, options
func (_m *DeployKeysServiceInterface) DeleteDeployKey(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployKey")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, deployKey, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, deployKey, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, deployKey, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployKeysServiceInterface_DeleteDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeployKey'
type DeployKeysServiceInterface_DeleteDeployKey_Call struct {
	*mock.Call
}

// DeleteDeployKey is a helper method to define mock.On call
//   - pid interface{}
//   - deployKey int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) DeleteDeployKey(pid interface{}, deployKey interface{}, options ...interface{}) *DeployKeysServiceInterface_DeleteDeployKey_Call {
	return &DeployKeysServiceInterface_DeleteDeployKey_Call{Call: _e.mock.On("DeleteDeployKey",
		append([]interface{}{pid, deployKey}, options...)...)}
}

func (_c *DeployKeysServiceInterface_DeleteDeployKey_Call) Run(run func(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_DeleteDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_DeleteDeployKey_Call) Return(_a0 *gitlab.Response, _a1 error) *DeployKeysServiceInterface_DeleteDeployKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeployKeysServiceInterface_DeleteDeployKey_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *DeployKeysServiceInterface_DeleteDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// EnableDeployKey provides a mock function with given fields: pid, deployKey, options
func (_m *DeployKeysServiceInterface) EnableDeployKey(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableDeployKey")
	}

	var r0 *gitlab.ProjectDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)); ok {
		return rf(pid, deployKey, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectDeployKey); ok {
		r0 = rf(pid, deployKey, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, deployKey, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, deployKey, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_EnableDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableDeployKey'
type DeployKeysServiceInterface_EnableDeployKey_Call struct {
	*mock.Call
}

// EnableDeployKey is a helper method to define mock.On call
//   - pid interface{}
//   - deployKey int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) EnableDeployKey(pid interface{}, deployKey interface{}, options ...interface{}) *DeployKeysServiceInterface_EnableDeployKey_Call {
	return &DeployKeysServiceInterface_EnableDeployKey_Call{Call: _e.mock.On("EnableDeployKey",
		append([]interface{}{pid, deployKey}, options...)...)}
}

func (_c *DeployKeysServiceInterface_EnableDeployKey_Call) Run(run func(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_EnableDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_EnableDeployKey_Call) Return(_a0 *gitlab.ProjectDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_EnableDeployKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_EnableDeployKey_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_EnableDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployKey provides a mock function with given fields: pid, deployKey, options
func (_m *DeployKeysServiceInterface) GetDeployKey(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployKey")
	}

	var r0 *gitlab.ProjectDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)); ok {
		return rf(pid, deployKey, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.ProjectDeployKey); ok {
		r0 = rf(pid, deployKey, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, deployKey, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, deployKey, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_GetDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployKey'
type DeployKeysServiceInterface_GetDeployKey_Call struct {
	*mock.Call
}

// GetDeployKey is a helper method to define mock.On call
//   - pid interface{}
//   - deployKey int
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) GetDeployKey(pid interface{}, deployKey interface{}, options ...interface{}) *DeployKeysServiceInterface_GetDeployKey_Call {
	return &DeployKeysServiceInterface_GetDeployKey_Call{Call: _e.mock.On("GetDeployKey",
		append([]interface{}{pid, deployKey}, options...)...)}
}

func (_c *DeployKeysServiceInterface_GetDeployKey_Call) Run(run func(pid interface{}, deployKey int, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_GetDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_GetDeployKey_Call) Return(_a0 *gitlab.ProjectDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_GetDeployKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_GetDeployKey_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_GetDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllDeployKeys provides a mock function with given fields: opt, options
func (_m *DeployKeysServiceInterface) ListAllDeployKeys(opt *gitlab.ListInstanceDeployKeysOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllDeployKeys")
	}

	var r0 []*gitlab.InstanceDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListInstanceDeployKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceDeployKey, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListInstanceDeployKeysOptions, ...gitlab.RequestOptionFunc) []*gitlab.InstanceDeployKey); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.InstanceDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListInstanceDeployKeysOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListInstanceDeployKeysOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_ListAllDeployKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllDeployKeys'
type DeployKeysServiceInterface_ListAllDeployKeys_Call struct {
	*mock.Call
}

// ListAllDeployKeys is a helper method to define mock.On call
//   - opt *gitlab.ListInstanceDeployKeysOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) ListAllDeployKeys(opt interface{}, options ...interface{}) *DeployKeysServiceInterface_ListAllDeployKeys_Call {
	return &DeployKeysServiceInterface_ListAllDeployKeys_Call{Call: _e.mock.On("ListAllDeployKeys",
		append([]interface{}{opt}, options...)...)}
}

func (_c *DeployKeysServiceInterface_ListAllDeployKeys_Call) Run(run func(opt *gitlab.ListInstanceDeployKeysOptions, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_ListAllDeployKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListInstanceDeployKeysOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_ListAllDeployKeys_Call) Return(_a0 []*gitlab.InstanceDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_ListAllDeployKeys_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_ListAllDeployKeys_Call) RunAndReturn(run func(*gitlab.ListInstanceDeployKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_ListAllDeployKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectDeployKeys provides a mock function with given fields: pid, opt, options
func (_m *DeployKeysServiceInterface) ListProjectDeployKeys(pid interface{}, opt *gitlab.ListProjectDeployKeysOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectDeployKeys")
	}

	var r0 []*gitlab.ProjectDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectDeployKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectDeployKey, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectDeployKeysOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectDeployKey); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectDeployKeysOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectDeployKeysOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_ListProjectDeployKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectDeployKeys'
type DeployKeysServiceInterface_ListProjectDeployKeys_Call struct {
	*mock.Call
}

// ListProjectDeployKeys is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectDeployKeysOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) ListProjectDeployKeys(pid interface{}, opt interface{}, options ...interface{}) *DeployKeysServiceInterface_ListProjectDeployKeys_Call {
	return &DeployKeysServiceInterface_ListProjectDeployKeys_Call{Call: _e.mock.On("ListProjectDeployKeys",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *DeployKeysServiceInterface_ListProjectDeployKeys_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectDeployKeysOptions, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_ListProjectDeployKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectDeployKeysOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_ListProjectDeployKeys_Call) Return(_a0 []*gitlab.ProjectDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_ListProjectDeployKeys_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_ListProjectDeployKeys_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectDeployKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_ListProjectDeployKeys_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeployKey provides a mock function with given fields: pid, deployKey, opt, options
func (_m *DeployKeysServiceInterface) UpdateDeployKey(pid interface{}, deployKey int, opt *gitlab.UpdateDeployKeyOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, deployKey, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployKey")
	}

	var r0 *gitlab.ProjectDeployKey
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateDeployKeyOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)); ok {
		return rf(pid, deployKey, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateDeployKeyOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectDeployKey); ok {
		r0 = rf(pid, deployKey, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectDeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateDeployKeyOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, deployKey, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateDeployKeyOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, deployKey, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployKeysServiceInterface_UpdateDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeployKey'
type DeployKeysServiceInterface_UpdateDeployKey_Call struct {
	*mock.Call
}

// UpdateDeployKey is a helper method to define mock.On call
//   - pid interface{}
//   - deployKey int
//   - opt *gitlab.UpdateDeployKeyOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DeployKeysServiceInterface_Expecter) UpdateDeployKey(pid interface{}, deployKey interface{}, opt interface{}, options ...interface{}) *DeployKeysServiceInterface_UpdateDeployKey_Call {
	return &DeployKeysServiceInterface_UpdateDeployKey_Call{Call: _e.mock.On("UpdateDeployKey",
		append([]interface{}{pid, deployKey, opt}, options...)...)}
}

func (_c *DeployKeysServiceInterface_UpdateDeployKey_Call) Run(run func(pid interface{}, deployKey int, opt *gitlab.UpdateDeployKeyOptions, options ...gitlab.RequestOptionFunc)) *DeployKeysServiceInterface_UpdateDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateDeployKeyOptions), variadicArgs...)
	})
	return _c
}

func (_c *DeployKeysServiceInterface_UpdateDeployKey_Call) Return(_a0 *gitlab.ProjectDeployKey, _a1 *gitlab.Response, _a2 error) *DeployKeysServiceInterface_UpdateDeployKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeployKeysServiceInterface_UpdateDeployKey_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateDeployKeyOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectDeployKey, *gitlab.Response, error)) *DeployKeysServiceInterface_UpdateDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeployKeysServiceInterface creates a new instance of DeployKeysServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeployKeysServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeployKeysServiceInterface {
	mock := &DeployKeysServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
