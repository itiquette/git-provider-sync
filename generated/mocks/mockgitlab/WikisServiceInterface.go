// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// WikisServiceInterface is an autogenerated mock type for the WikisServiceInterface type
type WikisServiceInterface struct {
	mock.Mock
}

type WikisServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *WikisServiceInterface) EXPECT() *WikisServiceInterface_Expecter {
	return &WikisServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateWikiPage provides a mock function with given fields: pid, opt, options
func (_m *WikisServiceInterface) CreateWikiPage(pid interface{}, opt *gitlab.CreateWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWikiPage")
	}

	var r0 *gitlab.Wiki
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Wiki); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateWikiPageOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WikisServiceInterface_CreateWikiPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWikiPage'
type WikisServiceInterface_CreateWikiPage_Call struct {
	*mock.Call
}

// CreateWikiPage is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateWikiPageOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) CreateWikiPage(pid interface{}, opt interface{}, options ...interface{}) *WikisServiceInterface_CreateWikiPage_Call {
	return &WikisServiceInterface_CreateWikiPage_Call{Call: _e.mock.On("CreateWikiPage",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *WikisServiceInterface_CreateWikiPage_Call) Run(run func(pid interface{}, opt *gitlab.CreateWikiPageOptions, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_CreateWikiPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateWikiPageOptions), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_CreateWikiPage_Call) Return(_a0 *gitlab.Wiki, _a1 *gitlab.Response, _a2 error) *WikisServiceInterface_CreateWikiPage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WikisServiceInterface_CreateWikiPage_Call) RunAndReturn(run func(interface{}, *gitlab.CreateWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)) *WikisServiceInterface_CreateWikiPage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWikiPage provides a mock function with given fields: pid, slug, options
func (_m *WikisServiceInterface) DeleteWikiPage(pid interface{}, slug string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, slug)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWikiPage")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, slug, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, slug, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, slug, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WikisServiceInterface_DeleteWikiPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWikiPage'
type WikisServiceInterface_DeleteWikiPage_Call struct {
	*mock.Call
}

// DeleteWikiPage is a helper method to define mock.On call
//   - pid interface{}
//   - slug string
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) DeleteWikiPage(pid interface{}, slug interface{}, options ...interface{}) *WikisServiceInterface_DeleteWikiPage_Call {
	return &WikisServiceInterface_DeleteWikiPage_Call{Call: _e.mock.On("DeleteWikiPage",
		append([]interface{}{pid, slug}, options...)...)}
}

func (_c *WikisServiceInterface_DeleteWikiPage_Call) Run(run func(pid interface{}, slug string, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_DeleteWikiPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_DeleteWikiPage_Call) Return(_a0 *gitlab.Response, _a1 error) *WikisServiceInterface_DeleteWikiPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WikisServiceInterface_DeleteWikiPage_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *WikisServiceInterface_DeleteWikiPage_Call {
	_c.Call.Return(run)
	return _c
}

// EditWikiPage provides a mock function with given fields: pid, slug, opt, options
func (_m *WikisServiceInterface) EditWikiPage(pid interface{}, slug string, opt *gitlab.EditWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, slug, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditWikiPage")
	}

	var r0 *gitlab.Wiki
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.EditWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)); ok {
		return rf(pid, slug, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.EditWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Wiki); ok {
		r0 = rf(pid, slug, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.EditWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, slug, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.EditWikiPageOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, slug, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WikisServiceInterface_EditWikiPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditWikiPage'
type WikisServiceInterface_EditWikiPage_Call struct {
	*mock.Call
}

// EditWikiPage is a helper method to define mock.On call
//   - pid interface{}
//   - slug string
//   - opt *gitlab.EditWikiPageOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) EditWikiPage(pid interface{}, slug interface{}, opt interface{}, options ...interface{}) *WikisServiceInterface_EditWikiPage_Call {
	return &WikisServiceInterface_EditWikiPage_Call{Call: _e.mock.On("EditWikiPage",
		append([]interface{}{pid, slug, opt}, options...)...)}
}

func (_c *WikisServiceInterface_EditWikiPage_Call) Run(run func(pid interface{}, slug string, opt *gitlab.EditWikiPageOptions, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_EditWikiPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.EditWikiPageOptions), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_EditWikiPage_Call) Return(_a0 *gitlab.Wiki, _a1 *gitlab.Response, _a2 error) *WikisServiceInterface_EditWikiPage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WikisServiceInterface_EditWikiPage_Call) RunAndReturn(run func(interface{}, string, *gitlab.EditWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)) *WikisServiceInterface_EditWikiPage_Call {
	_c.Call.Return(run)
	return _c
}

// GetWikiPage provides a mock function with given fields: pid, slug, opt, options
func (_m *WikisServiceInterface) GetWikiPage(pid interface{}, slug string, opt *gitlab.GetWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, slug, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWikiPage")
	}

	var r0 *gitlab.Wiki
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)); ok {
		return rf(pid, slug, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Wiki); ok {
		r0 = rf(pid, slug, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetWikiPageOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, slug, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetWikiPageOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, slug, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WikisServiceInterface_GetWikiPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWikiPage'
type WikisServiceInterface_GetWikiPage_Call struct {
	*mock.Call
}

// GetWikiPage is a helper method to define mock.On call
//   - pid interface{}
//   - slug string
//   - opt *gitlab.GetWikiPageOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) GetWikiPage(pid interface{}, slug interface{}, opt interface{}, options ...interface{}) *WikisServiceInterface_GetWikiPage_Call {
	return &WikisServiceInterface_GetWikiPage_Call{Call: _e.mock.On("GetWikiPage",
		append([]interface{}{pid, slug, opt}, options...)...)}
}

func (_c *WikisServiceInterface_GetWikiPage_Call) Run(run func(pid interface{}, slug string, opt *gitlab.GetWikiPageOptions, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_GetWikiPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetWikiPageOptions), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_GetWikiPage_Call) Return(_a0 *gitlab.Wiki, _a1 *gitlab.Response, _a2 error) *WikisServiceInterface_GetWikiPage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WikisServiceInterface_GetWikiPage_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.Wiki, *gitlab.Response, error)) *WikisServiceInterface_GetWikiPage_Call {
	_c.Call.Return(run)
	return _c
}

// ListWikis provides a mock function with given fields: pid, opt, options
func (_m *WikisServiceInterface) ListWikis(pid interface{}, opt *gitlab.ListWikisOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWikis")
	}

	var r0 []*gitlab.Wiki
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListWikisOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListWikisOptions, ...gitlab.RequestOptionFunc) []*gitlab.Wiki); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListWikisOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListWikisOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WikisServiceInterface_ListWikis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWikis'
type WikisServiceInterface_ListWikis_Call struct {
	*mock.Call
}

// ListWikis is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListWikisOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) ListWikis(pid interface{}, opt interface{}, options ...interface{}) *WikisServiceInterface_ListWikis_Call {
	return &WikisServiceInterface_ListWikis_Call{Call: _e.mock.On("ListWikis",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *WikisServiceInterface_ListWikis_Call) Run(run func(pid interface{}, opt *gitlab.ListWikisOptions, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_ListWikis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListWikisOptions), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_ListWikis_Call) Return(_a0 []*gitlab.Wiki, _a1 *gitlab.Response, _a2 error) *WikisServiceInterface_ListWikis_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WikisServiceInterface_ListWikis_Call) RunAndReturn(run func(interface{}, *gitlab.ListWikisOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Wiki, *gitlab.Response, error)) *WikisServiceInterface_ListWikis_Call {
	_c.Call.Return(run)
	return _c
}

// UploadWikiAttachment provides a mock function with given fields: pid, content, filename, opt, options
func (_m *WikisServiceInterface) UploadWikiAttachment(pid interface{}, content io.Reader, filename string, opt *gitlab.UploadWikiAttachmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.WikiAttachment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, content, filename, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadWikiAttachment")
	}

	var r0 *gitlab.WikiAttachment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, string, *gitlab.UploadWikiAttachmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.WikiAttachment, *gitlab.Response, error)); ok {
		return rf(pid, content, filename, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, string, *gitlab.UploadWikiAttachmentOptions, ...gitlab.RequestOptionFunc) *gitlab.WikiAttachment); ok {
		r0 = rf(pid, content, filename, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.WikiAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, io.Reader, string, *gitlab.UploadWikiAttachmentOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, content, filename, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, io.Reader, string, *gitlab.UploadWikiAttachmentOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, content, filename, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WikisServiceInterface_UploadWikiAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadWikiAttachment'
type WikisServiceInterface_UploadWikiAttachment_Call struct {
	*mock.Call
}

// UploadWikiAttachment is a helper method to define mock.On call
//   - pid interface{}
//   - content io.Reader
//   - filename string
//   - opt *gitlab.UploadWikiAttachmentOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *WikisServiceInterface_Expecter) UploadWikiAttachment(pid interface{}, content interface{}, filename interface{}, opt interface{}, options ...interface{}) *WikisServiceInterface_UploadWikiAttachment_Call {
	return &WikisServiceInterface_UploadWikiAttachment_Call{Call: _e.mock.On("UploadWikiAttachment",
		append([]interface{}{pid, content, filename, opt}, options...)...)}
}

func (_c *WikisServiceInterface_UploadWikiAttachment_Call) Run(run func(pid interface{}, content io.Reader, filename string, opt *gitlab.UploadWikiAttachmentOptions, options ...gitlab.RequestOptionFunc)) *WikisServiceInterface_UploadWikiAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(io.Reader), args[2].(string), args[3].(*gitlab.UploadWikiAttachmentOptions), variadicArgs...)
	})
	return _c
}

func (_c *WikisServiceInterface_UploadWikiAttachment_Call) Return(_a0 *gitlab.WikiAttachment, _a1 *gitlab.Response, _a2 error) *WikisServiceInterface_UploadWikiAttachment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WikisServiceInterface_UploadWikiAttachment_Call) RunAndReturn(run func(interface{}, io.Reader, string, *gitlab.UploadWikiAttachmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.WikiAttachment, *gitlab.Response, error)) *WikisServiceInterface_UploadWikiAttachment_Call {
	_c.Call.Return(run)
	return _c
}

// NewWikisServiceInterface creates a new instance of WikisServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWikisServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WikisServiceInterface {
	mock := &WikisServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
