// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupIssueBoardsServiceInterface is an autogenerated mock type for the GroupIssueBoardsServiceInterface type
type GroupIssueBoardsServiceInterface struct {
	mock.Mock
}

type GroupIssueBoardsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupIssueBoardsServiceInterface) EXPECT() *GroupIssueBoardsServiceInterface_Expecter {
	return &GroupIssueBoardsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupIssueBoard provides a mock function with given fields: gid, opt, options
func (_m *GroupIssueBoardsServiceInterface) CreateGroupIssueBoard(gid interface{}, opt *gitlab.CreateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupIssueBoard")
	}

	var r0 *gitlab.GroupIssueBoard
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupIssueBoard); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupIssueBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupIssueBoard'
type GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call struct {
	*mock.Call
}

// CreateGroupIssueBoard is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupIssueBoardOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) CreateGroupIssueBoard(gid interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call {
	return &GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call{Call: _e.mock.On("CreateGroupIssueBoard",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupIssueBoardOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call) Return(_a0 *gitlab.GroupIssueBoard, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupIssueBoardList provides a mock function with given fields: gid, board, opt, options
func (_m *GroupIssueBoardsServiceInterface) CreateGroupIssueBoardList(gid interface{}, board int, opt *gitlab.CreateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupIssueBoardList")
	}

	var r0 *gitlab.BoardList
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)); ok {
		return rf(gid, board, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) *gitlab.BoardList); ok {
		r0 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BoardList)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupIssueBoardList'
type GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call struct {
	*mock.Call
}

// CreateGroupIssueBoardList is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - opt *gitlab.CreateGroupIssueBoardListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) CreateGroupIssueBoardList(gid interface{}, board interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call {
	return &GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call{Call: _e.mock.On("CreateGroupIssueBoardList",
		append([]interface{}{gid, board, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call) Run(run func(gid interface{}, board int, opt *gitlab.CreateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.CreateGroupIssueBoardListOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call) Return(_a0 *gitlab.BoardList, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call) RunAndReturn(run func(interface{}, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_CreateGroupIssueBoardList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupIssueBoardList provides a mock function with given fields: gid, board, list, options
func (_m *GroupIssueBoardsServiceInterface) DeleteGroupIssueBoardList(gid interface{}, board int, list int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, list)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupIssueBoardList")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, board, list, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, board, list, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, board, list, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupIssueBoardList'
type GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call struct {
	*mock.Call
}

// DeleteGroupIssueBoardList is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - list int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) DeleteGroupIssueBoardList(gid interface{}, board interface{}, list interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call {
	return &GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call{Call: _e.mock.On("DeleteGroupIssueBoardList",
		append([]interface{}{gid, board, list}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call) Run(run func(gid interface{}, board int, list int, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupIssueBoardsServiceInterface_DeleteGroupIssueBoardList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueBoard provides a mock function with given fields: gid, board, options
func (_m *GroupIssueBoardsServiceInterface) DeleteIssueBoard(gid interface{}, board int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueBoard")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, board, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, board, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, board, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueBoard'
type GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call struct {
	*mock.Call
}

// DeleteIssueBoard is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) DeleteIssueBoard(gid interface{}, board interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call {
	return &GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call{Call: _e.mock.On("DeleteIssueBoard",
		append([]interface{}{gid, board}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call) Run(run func(gid interface{}, board int, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupIssueBoardsServiceInterface_DeleteIssueBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIssueBoard provides a mock function with given fields: gid, board, options
func (_m *GroupIssueBoardsServiceInterface) GetGroupIssueBoard(gid interface{}, board int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIssueBoard")
	}

	var r0 *gitlab.GroupIssueBoard
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)); ok {
		return rf(gid, board, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.GroupIssueBoard); ok {
		r0 = rf(gid, board, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupIssueBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIssueBoard'
type GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call struct {
	*mock.Call
}

// GetGroupIssueBoard is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) GetGroupIssueBoard(gid interface{}, board interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call {
	return &GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call{Call: _e.mock.On("GetGroupIssueBoard",
		append([]interface{}{gid, board}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call) Run(run func(gid interface{}, board int, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call) Return(_a0 *gitlab.GroupIssueBoard, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_GetGroupIssueBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIssueBoardList provides a mock function with given fields: gid, board, list, options
func (_m *GroupIssueBoardsServiceInterface) GetGroupIssueBoardList(gid interface{}, board int, list int, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, list)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIssueBoardList")
	}

	var r0 *gitlab.BoardList
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)); ok {
		return rf(gid, board, list, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.BoardList); ok {
		r0 = rf(gid, board, list, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BoardList)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, list, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, list, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIssueBoardList'
type GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call struct {
	*mock.Call
}

// GetGroupIssueBoardList is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - list int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) GetGroupIssueBoardList(gid interface{}, board interface{}, list interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call {
	return &GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call{Call: _e.mock.On("GetGroupIssueBoardList",
		append([]interface{}{gid, board, list}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call) Run(run func(gid interface{}, board int, list int, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call) Return(_a0 *gitlab.BoardList, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_GetGroupIssueBoardList_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupIssueBoardLists provides a mock function with given fields: gid, board, opt, options
func (_m *GroupIssueBoardsServiceInterface) ListGroupIssueBoardLists(gid interface{}, board int, opt *gitlab.ListGroupIssueBoardListsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupIssueBoardLists")
	}

	var r0 []*gitlab.BoardList
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)); ok {
		return rf(gid, board, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) []*gitlab.BoardList); ok {
		r0 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BoardList)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupIssueBoardLists'
type GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call struct {
	*mock.Call
}

// ListGroupIssueBoardLists is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - opt *gitlab.ListGroupIssueBoardListsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) ListGroupIssueBoardLists(gid interface{}, board interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call {
	return &GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call{Call: _e.mock.On("ListGroupIssueBoardLists",
		append([]interface{}{gid, board, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call) Run(run func(gid interface{}, board int, opt *gitlab.ListGroupIssueBoardListsOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListGroupIssueBoardListsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call) Return(_a0 []*gitlab.BoardList, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_ListGroupIssueBoardLists_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupIssueBoards provides a mock function with given fields: gid, opt, options
func (_m *GroupIssueBoardsServiceInterface) ListGroupIssueBoards(gid interface{}, opt *gitlab.ListGroupIssueBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupIssueBoards")
	}

	var r0 []*gitlab.GroupIssueBoard
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupIssueBoard); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupIssueBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupIssueBoards'
type GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call struct {
	*mock.Call
}

// ListGroupIssueBoards is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupIssueBoardsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) ListGroupIssueBoards(gid interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call {
	return &GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call{Call: _e.mock.On("ListGroupIssueBoards",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupIssueBoardsOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupIssueBoardsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call) Return(_a0 []*gitlab.GroupIssueBoard, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_ListGroupIssueBoards_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueBoard provides a mock function with given fields: gid, board, opt, options
func (_m *GroupIssueBoardsServiceInterface) UpdateIssueBoard(gid interface{}, board int, opt *gitlab.UpdateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueBoard")
	}

	var r0 *gitlab.GroupIssueBoard
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)); ok {
		return rf(gid, board, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupIssueBoard); ok {
		r0 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupIssueBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueBoard'
type GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call struct {
	*mock.Call
}

// UpdateIssueBoard is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - opt *gitlab.UpdateGroupIssueBoardOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) UpdateIssueBoard(gid interface{}, board interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call {
	return &GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call{Call: _e.mock.On("UpdateIssueBoard",
		append([]interface{}{gid, board, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call) Run(run func(gid interface{}, board int, opt *gitlab.UpdateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateGroupIssueBoardOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call) Return(_a0 *gitlab.GroupIssueBoard, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_UpdateIssueBoard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssueBoardList provides a mock function with given fields: gid, board, list, opt, options
func (_m *GroupIssueBoardsServiceInterface) UpdateIssueBoardList(gid interface{}, board int, list int, opt *gitlab.UpdateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, board, list, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueBoardList")
	}

	var r0 []*gitlab.BoardList
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)); ok {
		return rf(gid, board, list, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) []*gitlab.BoardList); ok {
		r0 = rf(gid, board, list, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BoardList)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, board, list, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, board, list, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssueBoardList'
type GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call struct {
	*mock.Call
}

// UpdateIssueBoardList is a helper method to define mock.On call
//   - gid interface{}
//   - board int
//   - list int
//   - opt *gitlab.UpdateGroupIssueBoardListOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupIssueBoardsServiceInterface_Expecter) UpdateIssueBoardList(gid interface{}, board interface{}, list interface{}, opt interface{}, options ...interface{}) *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call {
	return &GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call{Call: _e.mock.On("UpdateIssueBoardList",
		append([]interface{}{gid, board, list, opt}, options...)...)}
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call) Run(run func(gid interface{}, board int, list int, opt *gitlab.UpdateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc)) *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), args[3].(*gitlab.UpdateGroupIssueBoardListOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call) Return(_a0 []*gitlab.BoardList, _a1 *gitlab.Response, _a2 error) *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call) RunAndReturn(run func(interface{}, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *GroupIssueBoardsServiceInterface_UpdateIssueBoardList_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupIssueBoardsServiceInterface creates a new instance of GroupIssueBoardsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupIssueBoardsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupIssueBoardsServiceInterface {
	mock := &GroupIssueBoardsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
