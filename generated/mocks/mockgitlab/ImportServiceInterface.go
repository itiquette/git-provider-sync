// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ImportServiceInterface is an autogenerated mock type for the ImportServiceInterface type
type ImportServiceInterface struct {
	mock.Mock
}

type ImportServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ImportServiceInterface) EXPECT() *ImportServiceInterface_Expecter {
	return &ImportServiceInterface_Expecter{mock: &_m.Mock}
}

// CancelGitHubProjectImport provides a mock function with given fields: opt, options
func (_m *ImportServiceInterface) CancelGitHubProjectImport(opt *gitlab.CancelGitHubProjectImportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CancelledGitHubImport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelGitHubProjectImport")
	}

	var r0 *gitlab.CancelledGitHubImport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CancelGitHubProjectImportOptions, ...gitlab.RequestOptionFunc) (*gitlab.CancelledGitHubImport, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CancelGitHubProjectImportOptions, ...gitlab.RequestOptionFunc) *gitlab.CancelledGitHubImport); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CancelledGitHubImport)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CancelGitHubProjectImportOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CancelGitHubProjectImportOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportServiceInterface_CancelGitHubProjectImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelGitHubProjectImport'
type ImportServiceInterface_CancelGitHubProjectImport_Call struct {
	*mock.Call
}

// CancelGitHubProjectImport is a helper method to define mock.On call
//   - opt *gitlab.CancelGitHubProjectImportOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ImportServiceInterface_Expecter) CancelGitHubProjectImport(opt interface{}, options ...interface{}) *ImportServiceInterface_CancelGitHubProjectImport_Call {
	return &ImportServiceInterface_CancelGitHubProjectImport_Call{Call: _e.mock.On("CancelGitHubProjectImport",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ImportServiceInterface_CancelGitHubProjectImport_Call) Run(run func(opt *gitlab.CancelGitHubProjectImportOptions, options ...gitlab.RequestOptionFunc)) *ImportServiceInterface_CancelGitHubProjectImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CancelGitHubProjectImportOptions), variadicArgs...)
	})
	return _c
}

func (_c *ImportServiceInterface_CancelGitHubProjectImport_Call) Return(_a0 *gitlab.CancelledGitHubImport, _a1 *gitlab.Response, _a2 error) *ImportServiceInterface_CancelGitHubProjectImport_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ImportServiceInterface_CancelGitHubProjectImport_Call) RunAndReturn(run func(*gitlab.CancelGitHubProjectImportOptions, ...gitlab.RequestOptionFunc) (*gitlab.CancelledGitHubImport, *gitlab.Response, error)) *ImportServiceInterface_CancelGitHubProjectImport_Call {
	_c.Call.Return(run)
	return _c
}

// ImportGitHubGistsIntoGitLabSnippets provides a mock function with given fields: opt, options
func (_m *ImportServiceInterface) ImportGitHubGistsIntoGitLabSnippets(opt *gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportGitHubGistsIntoGitLabSnippets")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportGitHubGistsIntoGitLabSnippets'
type ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call struct {
	*mock.Call
}

// ImportGitHubGistsIntoGitLabSnippets is a helper method to define mock.On call
//   - opt *gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ImportServiceInterface_Expecter) ImportGitHubGistsIntoGitLabSnippets(opt interface{}, options ...interface{}) *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call {
	return &ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call{Call: _e.mock.On("ImportGitHubGistsIntoGitLabSnippets",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call) Run(run func(opt *gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, options ...gitlab.RequestOptionFunc)) *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call) Return(_a0 *gitlab.Response, _a1 error) *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call) RunAndReturn(run func(*gitlab.ImportGitHubGistsIntoGitLabSnippetsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ImportServiceInterface_ImportGitHubGistsIntoGitLabSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// ImportRepositoryFromBitbucketCloud provides a mock function with given fields: opt, options
func (_m *ImportServiceInterface) ImportRepositoryFromBitbucketCloud(opt *gitlab.ImportRepositoryFromBitbucketCloudOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BitbucketCloudImport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportRepositoryFromBitbucketCloud")
	}

	var r0 *gitlab.BitbucketCloudImport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromBitbucketCloudOptions, ...gitlab.RequestOptionFunc) (*gitlab.BitbucketCloudImport, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromBitbucketCloudOptions, ...gitlab.RequestOptionFunc) *gitlab.BitbucketCloudImport); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BitbucketCloudImport)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ImportRepositoryFromBitbucketCloudOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ImportRepositoryFromBitbucketCloudOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportRepositoryFromBitbucketCloud'
type ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call struct {
	*mock.Call
}

// ImportRepositoryFromBitbucketCloud is a helper method to define mock.On call
//   - opt *gitlab.ImportRepositoryFromBitbucketCloudOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ImportServiceInterface_Expecter) ImportRepositoryFromBitbucketCloud(opt interface{}, options ...interface{}) *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call {
	return &ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call{Call: _e.mock.On("ImportRepositoryFromBitbucketCloud",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call) Run(run func(opt *gitlab.ImportRepositoryFromBitbucketCloudOptions, options ...gitlab.RequestOptionFunc)) *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ImportRepositoryFromBitbucketCloudOptions), variadicArgs...)
	})
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call) Return(_a0 *gitlab.BitbucketCloudImport, _a1 *gitlab.Response, _a2 error) *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call) RunAndReturn(run func(*gitlab.ImportRepositoryFromBitbucketCloudOptions, ...gitlab.RequestOptionFunc) (*gitlab.BitbucketCloudImport, *gitlab.Response, error)) *ImportServiceInterface_ImportRepositoryFromBitbucketCloud_Call {
	_c.Call.Return(run)
	return _c
}

// ImportRepositoryFromBitbucketServer provides a mock function with given fields: opt, options
func (_m *ImportServiceInterface) ImportRepositoryFromBitbucketServer(opt *gitlab.ImportRepositoryFromBitbucketServerOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BitbucketServerImport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportRepositoryFromBitbucketServer")
	}

	var r0 *gitlab.BitbucketServerImport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromBitbucketServerOptions, ...gitlab.RequestOptionFunc) (*gitlab.BitbucketServerImport, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromBitbucketServerOptions, ...gitlab.RequestOptionFunc) *gitlab.BitbucketServerImport); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.BitbucketServerImport)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ImportRepositoryFromBitbucketServerOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ImportRepositoryFromBitbucketServerOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportRepositoryFromBitbucketServer'
type ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call struct {
	*mock.Call
}

// ImportRepositoryFromBitbucketServer is a helper method to define mock.On call
//   - opt *gitlab.ImportRepositoryFromBitbucketServerOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ImportServiceInterface_Expecter) ImportRepositoryFromBitbucketServer(opt interface{}, options ...interface{}) *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call {
	return &ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call{Call: _e.mock.On("ImportRepositoryFromBitbucketServer",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call) Run(run func(opt *gitlab.ImportRepositoryFromBitbucketServerOptions, options ...gitlab.RequestOptionFunc)) *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ImportRepositoryFromBitbucketServerOptions), variadicArgs...)
	})
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call) Return(_a0 *gitlab.BitbucketServerImport, _a1 *gitlab.Response, _a2 error) *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call) RunAndReturn(run func(*gitlab.ImportRepositoryFromBitbucketServerOptions, ...gitlab.RequestOptionFunc) (*gitlab.BitbucketServerImport, *gitlab.Response, error)) *ImportServiceInterface_ImportRepositoryFromBitbucketServer_Call {
	_c.Call.Return(run)
	return _c
}

// ImportRepositoryFromGitHub provides a mock function with given fields: opt, options
func (_m *ImportServiceInterface) ImportRepositoryFromGitHub(opt *gitlab.ImportRepositoryFromGitHubOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GitHubImport, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportRepositoryFromGitHub")
	}

	var r0 *gitlab.GitHubImport
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromGitHubOptions, ...gitlab.RequestOptionFunc) (*gitlab.GitHubImport, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ImportRepositoryFromGitHubOptions, ...gitlab.RequestOptionFunc) *gitlab.GitHubImport); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GitHubImport)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ImportRepositoryFromGitHubOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ImportRepositoryFromGitHubOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportServiceInterface_ImportRepositoryFromGitHub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportRepositoryFromGitHub'
type ImportServiceInterface_ImportRepositoryFromGitHub_Call struct {
	*mock.Call
}

// ImportRepositoryFromGitHub is a helper method to define mock.On call
//   - opt *gitlab.ImportRepositoryFromGitHubOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ImportServiceInterface_Expecter) ImportRepositoryFromGitHub(opt interface{}, options ...interface{}) *ImportServiceInterface_ImportRepositoryFromGitHub_Call {
	return &ImportServiceInterface_ImportRepositoryFromGitHub_Call{Call: _e.mock.On("ImportRepositoryFromGitHub",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ImportServiceInterface_ImportRepositoryFromGitHub_Call) Run(run func(opt *gitlab.ImportRepositoryFromGitHubOptions, options ...gitlab.RequestOptionFunc)) *ImportServiceInterface_ImportRepositoryFromGitHub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ImportRepositoryFromGitHubOptions), variadicArgs...)
	})
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromGitHub_Call) Return(_a0 *gitlab.GitHubImport, _a1 *gitlab.Response, _a2 error) *ImportServiceInterface_ImportRepositoryFromGitHub_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ImportServiceInterface_ImportRepositoryFromGitHub_Call) RunAndReturn(run func(*gitlab.ImportRepositoryFromGitHubOptions, ...gitlab.RequestOptionFunc) (*gitlab.GitHubImport, *gitlab.Response, error)) *ImportServiceInterface_ImportRepositoryFromGitHub_Call {
	_c.Call.Return(run)
	return _c
}

// NewImportServiceInterface creates a new instance of ImportServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImportServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImportServiceInterface {
	mock := &ImportServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
