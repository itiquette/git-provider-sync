// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// JobsServiceInterface is an autogenerated mock type for the JobsServiceInterface type
type JobsServiceInterface struct {
	mock.Mock
}

type JobsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *JobsServiceInterface) EXPECT() *JobsServiceInterface_Expecter {
	return &JobsServiceInterface_Expecter{mock: &_m.Mock}
}

// CancelJob provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) CancelJob(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_CancelJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJob'
type JobsServiceInterface_CancelJob_Call struct {
	*mock.Call
}

// CancelJob is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) CancelJob(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_CancelJob_Call {
	return &JobsServiceInterface_CancelJob_Call{Call: _e.mock.On("CancelJob",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_CancelJob_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_CancelJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_CancelJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_CancelJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_CancelJob_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_CancelJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArtifacts provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) DeleteArtifacts(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtifacts")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobsServiceInterface_DeleteArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArtifacts'
type JobsServiceInterface_DeleteArtifacts_Call struct {
	*mock.Call
}

// DeleteArtifacts is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) DeleteArtifacts(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_DeleteArtifacts_Call {
	return &JobsServiceInterface_DeleteArtifacts_Call{Call: _e.mock.On("DeleteArtifacts",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_DeleteArtifacts_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_DeleteArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_DeleteArtifacts_Call) Return(_a0 *gitlab.Response, _a1 error) *JobsServiceInterface_DeleteArtifacts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobsServiceInterface_DeleteArtifacts_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *JobsServiceInterface_DeleteArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectArtifacts provides a mock function with given fields: pid, options
func (_m *JobsServiceInterface) DeleteProjectArtifacts(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectArtifacts")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobsServiceInterface_DeleteProjectArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectArtifacts'
type JobsServiceInterface_DeleteProjectArtifacts_Call struct {
	*mock.Call
}

// DeleteProjectArtifacts is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) DeleteProjectArtifacts(pid interface{}, options ...interface{}) *JobsServiceInterface_DeleteProjectArtifacts_Call {
	return &JobsServiceInterface_DeleteProjectArtifacts_Call{Call: _e.mock.On("DeleteProjectArtifacts",
		append([]interface{}{pid}, options...)...)}
}

func (_c *JobsServiceInterface_DeleteProjectArtifacts_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_DeleteProjectArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_DeleteProjectArtifacts_Call) Return(_a0 *gitlab.Response, _a1 error) *JobsServiceInterface_DeleteProjectArtifacts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobsServiceInterface_DeleteProjectArtifacts_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *JobsServiceInterface_DeleteProjectArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadArtifactsFile provides a mock function with given fields: pid, refName, opt, options
func (_m *JobsServiceInterface) DownloadArtifactsFile(pid interface{}, refName string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, refName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadArtifactsFile")
	}

	var r0 *bytes.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)); ok {
		return rf(pid, refName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, refName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, refName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, refName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_DownloadArtifactsFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadArtifactsFile'
type JobsServiceInterface_DownloadArtifactsFile_Call struct {
	*mock.Call
}

// DownloadArtifactsFile is a helper method to define mock.On call
//   - pid interface{}
//   - refName string
//   - opt *gitlab.DownloadArtifactsFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) DownloadArtifactsFile(pid interface{}, refName interface{}, opt interface{}, options ...interface{}) *JobsServiceInterface_DownloadArtifactsFile_Call {
	return &JobsServiceInterface_DownloadArtifactsFile_Call{Call: _e.mock.On("DownloadArtifactsFile",
		append([]interface{}{pid, refName, opt}, options...)...)}
}

func (_c *JobsServiceInterface_DownloadArtifactsFile_Call) Run(run func(pid interface{}, refName string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_DownloadArtifactsFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.DownloadArtifactsFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_DownloadArtifactsFile_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_DownloadArtifactsFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_DownloadArtifactsFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *JobsServiceInterface_DownloadArtifactsFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadSingleArtifactsFile provides a mock function with given fields: pid, jobID, artifactPath, options
func (_m *JobsServiceInterface) DownloadSingleArtifactsFile(pid interface{}, jobID int, artifactPath string, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID, artifactPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadSingleArtifactsFile")
	}

	var r0 *bytes.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, string, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)); ok {
		return rf(pid, jobID, artifactPath, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, string, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, jobID, artifactPath, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, artifactPath, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, artifactPath, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_DownloadSingleArtifactsFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadSingleArtifactsFile'
type JobsServiceInterface_DownloadSingleArtifactsFile_Call struct {
	*mock.Call
}

// DownloadSingleArtifactsFile is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - artifactPath string
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) DownloadSingleArtifactsFile(pid interface{}, jobID interface{}, artifactPath interface{}, options ...interface{}) *JobsServiceInterface_DownloadSingleArtifactsFile_Call {
	return &JobsServiceInterface_DownloadSingleArtifactsFile_Call{Call: _e.mock.On("DownloadSingleArtifactsFile",
		append([]interface{}{pid, jobID, artifactPath}, options...)...)}
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFile_Call) Run(run func(pid interface{}, jobID int, artifactPath string, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_DownloadSingleArtifactsFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFile_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_DownloadSingleArtifactsFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFile_Call) RunAndReturn(run func(interface{}, int, string, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *JobsServiceInterface_DownloadSingleArtifactsFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadSingleArtifactsFileByTagOrBranch provides a mock function with given fields: pid, refName, artifactPath, opt, options
func (_m *JobsServiceInterface) DownloadSingleArtifactsFileByTagOrBranch(pid interface{}, refName string, artifactPath string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, refName, artifactPath, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadSingleArtifactsFileByTagOrBranch")
	}

	var r0 *bytes.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)); ok {
		return rf(pid, refName, artifactPath, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, refName, artifactPath, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, refName, artifactPath, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, refName, artifactPath, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadSingleArtifactsFileByTagOrBranch'
type JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call struct {
	*mock.Call
}

// DownloadSingleArtifactsFileByTagOrBranch is a helper method to define mock.On call
//   - pid interface{}
//   - refName string
//   - artifactPath string
//   - opt *gitlab.DownloadArtifactsFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) DownloadSingleArtifactsFileByTagOrBranch(pid interface{}, refName interface{}, artifactPath interface{}, opt interface{}, options ...interface{}) *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call {
	return &JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call{Call: _e.mock.On("DownloadSingleArtifactsFileByTagOrBranch",
		append([]interface{}{pid, refName, artifactPath, opt}, options...)...)}
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call) Run(run func(pid interface{}, refName string, artifactPath string, opt *gitlab.DownloadArtifactsFileOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), args[3].(*gitlab.DownloadArtifactsFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call) RunAndReturn(run func(interface{}, string, string, *gitlab.DownloadArtifactsFileOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *JobsServiceInterface_DownloadSingleArtifactsFileByTagOrBranch_Call {
	_c.Call.Return(run)
	return _c
}

// EraseJob provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) EraseJob(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EraseJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_EraseJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EraseJob'
type JobsServiceInterface_EraseJob_Call struct {
	*mock.Call
}

// EraseJob is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) EraseJob(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_EraseJob_Call {
	return &JobsServiceInterface_EraseJob_Call{Call: _e.mock.On("EraseJob",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_EraseJob_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_EraseJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_EraseJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_EraseJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_EraseJob_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_EraseJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) GetJob(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type JobsServiceInterface_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) GetJob(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_GetJob_Call {
	return &JobsServiceInterface_GetJob_Call{Call: _e.mock.On("GetJob",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_GetJob_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_GetJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_GetJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_GetJob_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobArtifacts provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) GetJobArtifacts(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobArtifacts")
	}

	var r0 *bytes.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_GetJobArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobArtifacts'
type JobsServiceInterface_GetJobArtifacts_Call struct {
	*mock.Call
}

// GetJobArtifacts is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) GetJobArtifacts(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_GetJobArtifacts_Call {
	return &JobsServiceInterface_GetJobArtifacts_Call{Call: _e.mock.On("GetJobArtifacts",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_GetJobArtifacts_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_GetJobArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_GetJobArtifacts_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_GetJobArtifacts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_GetJobArtifacts_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *JobsServiceInterface_GetJobArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobTokensJob provides a mock function with given fields: opts, options
func (_m *JobsServiceInterface) GetJobTokensJob(opts *gitlab.GetJobTokensJobOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobTokensJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.GetJobTokensJobOptions, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(opts, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.GetJobTokensJobOptions, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.GetJobTokensJobOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.GetJobTokensJobOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_GetJobTokensJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobTokensJob'
type JobsServiceInterface_GetJobTokensJob_Call struct {
	*mock.Call
}

// GetJobTokensJob is a helper method to define mock.On call
//   - opts *gitlab.GetJobTokensJobOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) GetJobTokensJob(opts interface{}, options ...interface{}) *JobsServiceInterface_GetJobTokensJob_Call {
	return &JobsServiceInterface_GetJobTokensJob_Call{Call: _e.mock.On("GetJobTokensJob",
		append([]interface{}{opts}, options...)...)}
}

func (_c *JobsServiceInterface_GetJobTokensJob_Call) Run(run func(opts *gitlab.GetJobTokensJobOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_GetJobTokensJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.GetJobTokensJobOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_GetJobTokensJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_GetJobTokensJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_GetJobTokensJob_Call) RunAndReturn(run func(*gitlab.GetJobTokensJobOptions, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_GetJobTokensJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetTraceFile provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) GetTraceFile(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTraceFile")
	}

	var r0 *bytes.Reader
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *bytes.Reader); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_GetTraceFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTraceFile'
type JobsServiceInterface_GetTraceFile_Call struct {
	*mock.Call
}

// GetTraceFile is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) GetTraceFile(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_GetTraceFile_Call {
	return &JobsServiceInterface_GetTraceFile_Call{Call: _e.mock.On("GetTraceFile",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_GetTraceFile_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_GetTraceFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_GetTraceFile_Call) Return(_a0 *bytes.Reader, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_GetTraceFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_GetTraceFile_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *JobsServiceInterface_GetTraceFile_Call {
	_c.Call.Return(run)
	return _c
}

// KeepArtifacts provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) KeepArtifacts(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for KeepArtifacts")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_KeepArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeepArtifacts'
type JobsServiceInterface_KeepArtifacts_Call struct {
	*mock.Call
}

// KeepArtifacts is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) KeepArtifacts(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_KeepArtifacts_Call {
	return &JobsServiceInterface_KeepArtifacts_Call{Call: _e.mock.On("KeepArtifacts",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_KeepArtifacts_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_KeepArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_KeepArtifacts_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_KeepArtifacts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_KeepArtifacts_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_KeepArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineBridges provides a mock function with given fields: pid, pipelineID, opts, options
func (_m *JobsServiceInterface) ListPipelineBridges(pid interface{}, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Bridge, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, pipelineID, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineBridges")
	}

	var r0 []*gitlab.Bridge
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Bridge, *gitlab.Response, error)); ok {
		return rf(pid, pipelineID, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Bridge); ok {
		r0 = rf(pid, pipelineID, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Bridge)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, pipelineID, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, pipelineID, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_ListPipelineBridges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineBridges'
type JobsServiceInterface_ListPipelineBridges_Call struct {
	*mock.Call
}

// ListPipelineBridges is a helper method to define mock.On call
//   - pid interface{}
//   - pipelineID int
//   - opts *gitlab.ListJobsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) ListPipelineBridges(pid interface{}, pipelineID interface{}, opts interface{}, options ...interface{}) *JobsServiceInterface_ListPipelineBridges_Call {
	return &JobsServiceInterface_ListPipelineBridges_Call{Call: _e.mock.On("ListPipelineBridges",
		append([]interface{}{pid, pipelineID, opts}, options...)...)}
}

func (_c *JobsServiceInterface_ListPipelineBridges_Call) Run(run func(pid interface{}, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_ListPipelineBridges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListJobsOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_ListPipelineBridges_Call) Return(_a0 []*gitlab.Bridge, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_ListPipelineBridges_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_ListPipelineBridges_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Bridge, *gitlab.Response, error)) *JobsServiceInterface_ListPipelineBridges_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineJobs provides a mock function with given fields: pid, pipelineID, opts, options
func (_m *JobsServiceInterface) ListPipelineJobs(pid interface{}, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, pipelineID, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineJobs")
	}

	var r0 []*gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, pipelineID, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Job); ok {
		r0 = rf(pid, pipelineID, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, pipelineID, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, pipelineID, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_ListPipelineJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineJobs'
type JobsServiceInterface_ListPipelineJobs_Call struct {
	*mock.Call
}

// ListPipelineJobs is a helper method to define mock.On call
//   - pid interface{}
//   - pipelineID int
//   - opts *gitlab.ListJobsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) ListPipelineJobs(pid interface{}, pipelineID interface{}, opts interface{}, options ...interface{}) *JobsServiceInterface_ListPipelineJobs_Call {
	return &JobsServiceInterface_ListPipelineJobs_Call{Call: _e.mock.On("ListPipelineJobs",
		append([]interface{}{pid, pipelineID, opts}, options...)...)}
}

func (_c *JobsServiceInterface_ListPipelineJobs_Call) Run(run func(pid interface{}, pipelineID int, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_ListPipelineJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListJobsOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_ListPipelineJobs_Call) Return(_a0 []*gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_ListPipelineJobs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_ListPipelineJobs_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_ListPipelineJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectJobs provides a mock function with given fields: pid, opts, options
func (_m *JobsServiceInterface) ListProjectJobs(pid interface{}, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectJobs")
	}

	var r0 []*gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Job); ok {
		r0 = rf(pid, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_ListProjectJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectJobs'
type JobsServiceInterface_ListProjectJobs_Call struct {
	*mock.Call
}

// ListProjectJobs is a helper method to define mock.On call
//   - pid interface{}
//   - opts *gitlab.ListJobsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) ListProjectJobs(pid interface{}, opts interface{}, options ...interface{}) *JobsServiceInterface_ListProjectJobs_Call {
	return &JobsServiceInterface_ListProjectJobs_Call{Call: _e.mock.On("ListProjectJobs",
		append([]interface{}{pid, opts}, options...)...)}
}

func (_c *JobsServiceInterface_ListProjectJobs_Call) Run(run func(pid interface{}, opts *gitlab.ListJobsOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_ListProjectJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListJobsOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_ListProjectJobs_Call) Return(_a0 []*gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_ListProjectJobs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_ListProjectJobs_Call) RunAndReturn(run func(interface{}, *gitlab.ListJobsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_ListProjectJobs_Call {
	_c.Call.Return(run)
	return _c
}

// PlayJob provides a mock function with given fields: pid, jobID, opt, options
func (_m *JobsServiceInterface) PlayJob(pid interface{}, jobID int, opt *gitlab.PlayJobOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PlayJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.PlayJobOptions, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.PlayJobOptions, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.PlayJobOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.PlayJobOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_PlayJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayJob'
type JobsServiceInterface_PlayJob_Call struct {
	*mock.Call
}

// PlayJob is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - opt *gitlab.PlayJobOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) PlayJob(pid interface{}, jobID interface{}, opt interface{}, options ...interface{}) *JobsServiceInterface_PlayJob_Call {
	return &JobsServiceInterface_PlayJob_Call{Call: _e.mock.On("PlayJob",
		append([]interface{}{pid, jobID, opt}, options...)...)}
}

func (_c *JobsServiceInterface_PlayJob_Call) Run(run func(pid interface{}, jobID int, opt *gitlab.PlayJobOptions, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_PlayJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.PlayJobOptions), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_PlayJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_PlayJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_PlayJob_Call) RunAndReturn(run func(interface{}, int, *gitlab.PlayJobOptions, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_PlayJob_Call {
	_c.Call.Return(run)
	return _c
}

// RetryJob provides a mock function with given fields: pid, jobID, options
func (_m *JobsServiceInterface) RetryJob(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, jobID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetryJob")
	}

	var r0 *gitlab.Job
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)); ok {
		return rf(pid, jobID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Job); ok {
		r0 = rf(pid, jobID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, jobID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, jobID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsServiceInterface_RetryJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetryJob'
type JobsServiceInterface_RetryJob_Call struct {
	*mock.Call
}

// RetryJob is a helper method to define mock.On call
//   - pid interface{}
//   - jobID int
//   - options ...gitlab.RequestOptionFunc
func (_e *JobsServiceInterface_Expecter) RetryJob(pid interface{}, jobID interface{}, options ...interface{}) *JobsServiceInterface_RetryJob_Call {
	return &JobsServiceInterface_RetryJob_Call{Call: _e.mock.On("RetryJob",
		append([]interface{}{pid, jobID}, options...)...)}
}

func (_c *JobsServiceInterface_RetryJob_Call) Run(run func(pid interface{}, jobID int, options ...gitlab.RequestOptionFunc)) *JobsServiceInterface_RetryJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *JobsServiceInterface_RetryJob_Call) Return(_a0 *gitlab.Job, _a1 *gitlab.Response, _a2 error) *JobsServiceInterface_RetryJob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JobsServiceInterface_RetryJob_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Job, *gitlab.Response, error)) *JobsServiceInterface_RetryJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobsServiceInterface creates a new instance of JobsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobsServiceInterface {
	mock := &JobsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
