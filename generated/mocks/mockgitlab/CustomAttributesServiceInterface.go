// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// CustomAttributesServiceInterface is an autogenerated mock type for the CustomAttributesServiceInterface type
type CustomAttributesServiceInterface struct {
	mock.Mock
}

type CustomAttributesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomAttributesServiceInterface) EXPECT() *CustomAttributesServiceInterface_Expecter {
	return &CustomAttributesServiceInterface_Expecter{mock: &_m.Mock}
}

// DeleteCustomGroupAttribute provides a mock function with given fields: group, key, options
func (_m *CustomAttributesServiceInterface) DeleteCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomGroupAttribute")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(group, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(group, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(group, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomGroupAttribute'
type CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call struct {
	*mock.Call
}

// DeleteCustomGroupAttribute is a helper method to define mock.On call
//   - group int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) DeleteCustomGroupAttribute(group interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call {
	return &CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call{Call: _e.mock.On("DeleteCustomGroupAttribute",
		append([]interface{}{group, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call) Run(run func(group int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call) Return(_a0 *gitlab.Response, _a1 error) *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *CustomAttributesServiceInterface_DeleteCustomGroupAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomProjectAttribute provides a mock function with given fields: project, key, options
func (_m *CustomAttributesServiceInterface) DeleteCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, project, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomProjectAttribute")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(project, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(project, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(project, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomProjectAttribute'
type CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call struct {
	*mock.Call
}

// DeleteCustomProjectAttribute is a helper method to define mock.On call
//   - project int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) DeleteCustomProjectAttribute(project interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call {
	return &CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call{Call: _e.mock.On("DeleteCustomProjectAttribute",
		append([]interface{}{project, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call) Run(run func(project int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call) Return(_a0 *gitlab.Response, _a1 error) *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *CustomAttributesServiceInterface_DeleteCustomProjectAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomUserAttribute provides a mock function with given fields: user, key, options
func (_m *CustomAttributesServiceInterface) DeleteCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomUserAttribute")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(user, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(user, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(user, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomUserAttribute'
type CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call struct {
	*mock.Call
}

// DeleteCustomUserAttribute is a helper method to define mock.On call
//   - user int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) DeleteCustomUserAttribute(user interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call {
	return &CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call{Call: _e.mock.On("DeleteCustomUserAttribute",
		append([]interface{}{user, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call) Run(run func(user int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call) Return(_a0 *gitlab.Response, _a1 error) *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *CustomAttributesServiceInterface_DeleteCustomUserAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomGroupAttribute provides a mock function with given fields: group, key, options
func (_m *CustomAttributesServiceInterface) GetCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomGroupAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(group, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(group, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, key, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, key, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_GetCustomGroupAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomGroupAttribute'
type CustomAttributesServiceInterface_GetCustomGroupAttribute_Call struct {
	*mock.Call
}

// GetCustomGroupAttribute is a helper method to define mock.On call
//   - group int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) GetCustomGroupAttribute(group interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call {
	return &CustomAttributesServiceInterface_GetCustomGroupAttribute_Call{Call: _e.mock.On("GetCustomGroupAttribute",
		append([]interface{}{group, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call) Run(run func(group int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_GetCustomGroupAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomProjectAttribute provides a mock function with given fields: project, key, options
func (_m *CustomAttributesServiceInterface) GetCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, project, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomProjectAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(project, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(project, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(project, key, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(project, key, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_GetCustomProjectAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomProjectAttribute'
type CustomAttributesServiceInterface_GetCustomProjectAttribute_Call struct {
	*mock.Call
}

// GetCustomProjectAttribute is a helper method to define mock.On call
//   - project int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) GetCustomProjectAttribute(project interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call {
	return &CustomAttributesServiceInterface_GetCustomProjectAttribute_Call{Call: _e.mock.On("GetCustomProjectAttribute",
		append([]interface{}{project, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call) Run(run func(project int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_GetCustomProjectAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomUserAttribute provides a mock function with given fields: user, key, options
func (_m *CustomAttributesServiceInterface) GetCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomUserAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(user, key, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(user, key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(user, key, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(user, key, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_GetCustomUserAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomUserAttribute'
type CustomAttributesServiceInterface_GetCustomUserAttribute_Call struct {
	*mock.Call
}

// GetCustomUserAttribute is a helper method to define mock.On call
//   - user int
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) GetCustomUserAttribute(user interface{}, key interface{}, options ...interface{}) *CustomAttributesServiceInterface_GetCustomUserAttribute_Call {
	return &CustomAttributesServiceInterface_GetCustomUserAttribute_Call{Call: _e.mock.On("GetCustomUserAttribute",
		append([]interface{}{user, key}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_GetCustomUserAttribute_Call) Run(run func(user int, key string, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_GetCustomUserAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomUserAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_GetCustomUserAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_GetCustomUserAttribute_Call) RunAndReturn(run func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_GetCustomUserAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomGroupAttributes provides a mock function with given fields: group, options
func (_m *CustomAttributesServiceInterface) ListCustomGroupAttributes(group int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomGroupAttributes")
	}

	var r0 []*gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(group, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) []*gitlab.CustomAttribute); ok {
		r0 = rf(group, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_ListCustomGroupAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomGroupAttributes'
type CustomAttributesServiceInterface_ListCustomGroupAttributes_Call struct {
	*mock.Call
}

// ListCustomGroupAttributes is a helper method to define mock.On call
//   - group int
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) ListCustomGroupAttributes(group interface{}, options ...interface{}) *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call {
	return &CustomAttributesServiceInterface_ListCustomGroupAttributes_Call{Call: _e.mock.On("ListCustomGroupAttributes",
		append([]interface{}{group}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call) Run(run func(group int, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call) Return(_a0 []*gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_ListCustomGroupAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomProjectAttributes provides a mock function with given fields: project, options
func (_m *CustomAttributesServiceInterface) ListCustomProjectAttributes(project int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, project)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomProjectAttributes")
	}

	var r0 []*gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(project, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) []*gitlab.CustomAttribute); ok {
		r0 = rf(project, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(project, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(project, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_ListCustomProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomProjectAttributes'
type CustomAttributesServiceInterface_ListCustomProjectAttributes_Call struct {
	*mock.Call
}

// ListCustomProjectAttributes is a helper method to define mock.On call
//   - project int
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) ListCustomProjectAttributes(project interface{}, options ...interface{}) *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call {
	return &CustomAttributesServiceInterface_ListCustomProjectAttributes_Call{Call: _e.mock.On("ListCustomProjectAttributes",
		append([]interface{}{project}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call) Run(run func(project int, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call) Return(_a0 []*gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_ListCustomProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomUserAttributes provides a mock function with given fields: user, options
func (_m *CustomAttributesServiceInterface) ListCustomUserAttributes(user int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomUserAttributes")
	}

	var r0 []*gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(user, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) []*gitlab.CustomAttribute); ok {
		r0 = rf(user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(user, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(user, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_ListCustomUserAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomUserAttributes'
type CustomAttributesServiceInterface_ListCustomUserAttributes_Call struct {
	*mock.Call
}

// ListCustomUserAttributes is a helper method to define mock.On call
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) ListCustomUserAttributes(user interface{}, options ...interface{}) *CustomAttributesServiceInterface_ListCustomUserAttributes_Call {
	return &CustomAttributesServiceInterface_ListCustomUserAttributes_Call{Call: _e.mock.On("ListCustomUserAttributes",
		append([]interface{}{user}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_ListCustomUserAttributes_Call) Run(run func(user int, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_ListCustomUserAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomUserAttributes_Call) Return(_a0 []*gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_ListCustomUserAttributes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_ListCustomUserAttributes_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_ListCustomUserAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomGroupAttribute provides a mock function with given fields: group, c, options
func (_m *CustomAttributesServiceInterface) SetCustomGroupAttribute(group int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomGroupAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(group, c, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(group, c, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(group, c, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(group, c, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_SetCustomGroupAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomGroupAttribute'
type CustomAttributesServiceInterface_SetCustomGroupAttribute_Call struct {
	*mock.Call
}

// SetCustomGroupAttribute is a helper method to define mock.On call
//   - group int
//   - c gitlab.CustomAttribute
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) SetCustomGroupAttribute(group interface{}, c interface{}, options ...interface{}) *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call {
	return &CustomAttributesServiceInterface_SetCustomGroupAttribute_Call{Call: _e.mock.On("SetCustomGroupAttribute",
		append([]interface{}{group, c}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call) Run(run func(group int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.CustomAttribute), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call) RunAndReturn(run func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_SetCustomGroupAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomProjectAttribute provides a mock function with given fields: project, c, options
func (_m *CustomAttributesServiceInterface) SetCustomProjectAttribute(project int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, project, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomProjectAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(project, c, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(project, c, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(project, c, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(project, c, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_SetCustomProjectAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomProjectAttribute'
type CustomAttributesServiceInterface_SetCustomProjectAttribute_Call struct {
	*mock.Call
}

// SetCustomProjectAttribute is a helper method to define mock.On call
//   - project int
//   - c gitlab.CustomAttribute
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) SetCustomProjectAttribute(project interface{}, c interface{}, options ...interface{}) *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call {
	return &CustomAttributesServiceInterface_SetCustomProjectAttribute_Call{Call: _e.mock.On("SetCustomProjectAttribute",
		append([]interface{}{project, c}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call) Run(run func(project int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.CustomAttribute), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call) RunAndReturn(run func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_SetCustomProjectAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomUserAttribute provides a mock function with given fields: user, c, options
func (_m *CustomAttributesServiceInterface) SetCustomUserAttribute(user int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomUserAttribute")
	}

	var r0 *gitlab.CustomAttribute
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)); ok {
		return rf(user, c, options...)
	}
	if rf, ok := ret.Get(0).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.CustomAttribute); ok {
		r0 = rf(user, c, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CustomAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(user, c, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(user, c, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomAttributesServiceInterface_SetCustomUserAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomUserAttribute'
type CustomAttributesServiceInterface_SetCustomUserAttribute_Call struct {
	*mock.Call
}

// SetCustomUserAttribute is a helper method to define mock.On call
//   - user int
//   - c gitlab.CustomAttribute
//   - options ...gitlab.RequestOptionFunc
func (_e *CustomAttributesServiceInterface_Expecter) SetCustomUserAttribute(user interface{}, c interface{}, options ...interface{}) *CustomAttributesServiceInterface_SetCustomUserAttribute_Call {
	return &CustomAttributesServiceInterface_SetCustomUserAttribute_Call{Call: _e.mock.On("SetCustomUserAttribute",
		append([]interface{}{user, c}, options...)...)}
}

func (_c *CustomAttributesServiceInterface_SetCustomUserAttribute_Call) Run(run func(user int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc)) *CustomAttributesServiceInterface_SetCustomUserAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(gitlab.CustomAttribute), variadicArgs...)
	})
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomUserAttribute_Call) Return(_a0 *gitlab.CustomAttribute, _a1 *gitlab.Response, _a2 error) *CustomAttributesServiceInterface_SetCustomUserAttribute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomAttributesServiceInterface_SetCustomUserAttribute_Call) RunAndReturn(run func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *CustomAttributesServiceInterface_SetCustomUserAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomAttributesServiceInterface creates a new instance of CustomAttributesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomAttributesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomAttributesServiceInterface {
	mock := &CustomAttributesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
