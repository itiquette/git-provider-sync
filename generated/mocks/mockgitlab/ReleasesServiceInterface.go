// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ReleasesServiceInterface is an autogenerated mock type for the ReleasesServiceInterface type
type ReleasesServiceInterface struct {
	mock.Mock
}

type ReleasesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleasesServiceInterface) EXPECT() *ReleasesServiceInterface_Expecter {
	return &ReleasesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateRelease provides a mock function with given fields: pid, opts, options
func (_m *ReleasesServiceInterface) CreateRelease(pid interface{}, opts *gitlab.CreateReleaseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelease")
	}

	var r0 *gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) *gitlab.Release); ok {
		r0 = rf(pid, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_CreateRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRelease'
type ReleasesServiceInterface_CreateRelease_Call struct {
	*mock.Call
}

// CreateRelease is a helper method to define mock.On call
//   - pid interface{}
//   - opts *gitlab.CreateReleaseOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) CreateRelease(pid interface{}, opts interface{}, options ...interface{}) *ReleasesServiceInterface_CreateRelease_Call {
	return &ReleasesServiceInterface_CreateRelease_Call{Call: _e.mock.On("CreateRelease",
		append([]interface{}{pid, opts}, options...)...)}
}

func (_c *ReleasesServiceInterface_CreateRelease_Call) Run(run func(pid interface{}, opts *gitlab.CreateReleaseOptions, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_CreateRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateReleaseOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_CreateRelease_Call) Return(_a0 *gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_CreateRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_CreateRelease_Call) RunAndReturn(run func(interface{}, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_CreateRelease_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRelease provides a mock function with given fields: pid, tagName, options
func (_m *ReleasesServiceInterface) DeleteRelease(pid interface{}, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelease")
	}

	var r0 *gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, tagName, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Release); ok {
		r0 = rf(pid, tagName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_DeleteRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRelease'
type ReleasesServiceInterface_DeleteRelease_Call struct {
	*mock.Call
}

// DeleteRelease is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) DeleteRelease(pid interface{}, tagName interface{}, options ...interface{}) *ReleasesServiceInterface_DeleteRelease_Call {
	return &ReleasesServiceInterface_DeleteRelease_Call{Call: _e.mock.On("DeleteRelease",
		append([]interface{}{pid, tagName}, options...)...)}
}

func (_c *ReleasesServiceInterface_DeleteRelease_Call) Run(run func(pid interface{}, tagName string, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_DeleteRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_DeleteRelease_Call) Return(_a0 *gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_DeleteRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_DeleteRelease_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_DeleteRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRelease provides a mock function with given fields: pid, options
func (_m *ReleasesServiceInterface) GetLatestRelease(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRelease")
	}

	var r0 *gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Release); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_GetLatestRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRelease'
type ReleasesServiceInterface_GetLatestRelease_Call struct {
	*mock.Call
}

// GetLatestRelease is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) GetLatestRelease(pid interface{}, options ...interface{}) *ReleasesServiceInterface_GetLatestRelease_Call {
	return &ReleasesServiceInterface_GetLatestRelease_Call{Call: _e.mock.On("GetLatestRelease",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ReleasesServiceInterface_GetLatestRelease_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_GetLatestRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_GetLatestRelease_Call) Return(_a0 *gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_GetLatestRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_GetLatestRelease_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_GetLatestRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelease provides a mock function with given fields: pid, tagName, options
func (_m *ReleasesServiceInterface) GetRelease(pid interface{}, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelease")
	}

	var r0 *gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, tagName, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Release); ok {
		r0 = rf(pid, tagName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_GetRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelease'
type ReleasesServiceInterface_GetRelease_Call struct {
	*mock.Call
}

// GetRelease is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) GetRelease(pid interface{}, tagName interface{}, options ...interface{}) *ReleasesServiceInterface_GetRelease_Call {
	return &ReleasesServiceInterface_GetRelease_Call{Call: _e.mock.On("GetRelease",
		append([]interface{}{pid, tagName}, options...)...)}
}

func (_c *ReleasesServiceInterface_GetRelease_Call) Run(run func(pid interface{}, tagName string, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_GetRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_GetRelease_Call) Return(_a0 *gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_GetRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_GetRelease_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_GetRelease_Call {
	_c.Call.Return(run)
	return _c
}

// ListReleases provides a mock function with given fields: pid, opt, options
func (_m *ReleasesServiceInterface) ListReleases(pid interface{}, opt *gitlab.ListReleasesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReleases")
	}

	var r0 []*gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Release); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_ListReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReleases'
type ReleasesServiceInterface_ListReleases_Call struct {
	*mock.Call
}

// ListReleases is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListReleasesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) ListReleases(pid interface{}, opt interface{}, options ...interface{}) *ReleasesServiceInterface_ListReleases_Call {
	return &ReleasesServiceInterface_ListReleases_Call{Call: _e.mock.On("ListReleases",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ReleasesServiceInterface_ListReleases_Call) Run(run func(pid interface{}, opt *gitlab.ListReleasesOptions, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_ListReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListReleasesOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_ListReleases_Call) Return(_a0 []*gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_ListReleases_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_ListReleases_Call) RunAndReturn(run func(interface{}, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_ListReleases_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRelease provides a mock function with given fields: pid, tagName, opts, options
func (_m *ReleasesServiceInterface) UpdateRelease(pid interface{}, tagName string, opts *gitlab.UpdateReleaseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, tagName, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelease")
	}

	var r0 *gitlab.Release
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)); ok {
		return rf(pid, tagName, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) *gitlab.Release); ok {
		r0 = rf(pid, tagName, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, tagName, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, tagName, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReleasesServiceInterface_UpdateRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRelease'
type ReleasesServiceInterface_UpdateRelease_Call struct {
	*mock.Call
}

// UpdateRelease is a helper method to define mock.On call
//   - pid interface{}
//   - tagName string
//   - opts *gitlab.UpdateReleaseOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ReleasesServiceInterface_Expecter) UpdateRelease(pid interface{}, tagName interface{}, opts interface{}, options ...interface{}) *ReleasesServiceInterface_UpdateRelease_Call {
	return &ReleasesServiceInterface_UpdateRelease_Call{Call: _e.mock.On("UpdateRelease",
		append([]interface{}{pid, tagName, opts}, options...)...)}
}

func (_c *ReleasesServiceInterface_UpdateRelease_Call) Run(run func(pid interface{}, tagName string, opts *gitlab.UpdateReleaseOptions, options ...gitlab.RequestOptionFunc)) *ReleasesServiceInterface_UpdateRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateReleaseOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReleasesServiceInterface_UpdateRelease_Call) Return(_a0 *gitlab.Release, _a1 *gitlab.Response, _a2 error) *ReleasesServiceInterface_UpdateRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReleasesServiceInterface_UpdateRelease_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *ReleasesServiceInterface_UpdateRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewReleasesServiceInterface creates a new instance of ReleasesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleasesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleasesServiceInterface {
	mock := &ReleasesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
