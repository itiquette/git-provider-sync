// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// SnippetsServiceInterface is an autogenerated mock type for the SnippetsServiceInterface type
type SnippetsServiceInterface struct {
	mock.Mock
}

type SnippetsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SnippetsServiceInterface) EXPECT() *SnippetsServiceInterface_Expecter {
	return &SnippetsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateSnippet provides a mock function with given fields: opt, options
func (_m *SnippetsServiceInterface) CreateSnippet(opt *gitlab.CreateSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnippet")
	}

	var r0 *gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CreateSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CreateSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.Snippet); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CreateSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CreateSnippetOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_CreateSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnippet'
type SnippetsServiceInterface_CreateSnippet_Call struct {
	*mock.Call
}

// CreateSnippet is a helper method to define mock.On call
//   - opt *gitlab.CreateSnippetOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) CreateSnippet(opt interface{}, options ...interface{}) *SnippetsServiceInterface_CreateSnippet_Call {
	return &SnippetsServiceInterface_CreateSnippet_Call{Call: _e.mock.On("CreateSnippet",
		append([]interface{}{opt}, options...)...)}
}

func (_c *SnippetsServiceInterface_CreateSnippet_Call) Run(run func(opt *gitlab.CreateSnippetOptions, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_CreateSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CreateSnippetOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_CreateSnippet_Call) Return(_a0 *gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_CreateSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_CreateSnippet_Call) RunAndReturn(run func(*gitlab.CreateSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_CreateSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnippet provides a mock function with given fields: snippet, options
func (_m *SnippetsServiceInterface) DeleteSnippet(snippet int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnippet")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(snippet, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(snippet, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(snippet, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnippetsServiceInterface_DeleteSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnippet'
type SnippetsServiceInterface_DeleteSnippet_Call struct {
	*mock.Call
}

// DeleteSnippet is a helper method to define mock.On call
//   - snippet int
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) DeleteSnippet(snippet interface{}, options ...interface{}) *SnippetsServiceInterface_DeleteSnippet_Call {
	return &SnippetsServiceInterface_DeleteSnippet_Call{Call: _e.mock.On("DeleteSnippet",
		append([]interface{}{snippet}, options...)...)}
}

func (_c *SnippetsServiceInterface_DeleteSnippet_Call) Run(run func(snippet int, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_DeleteSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_DeleteSnippet_Call) Return(_a0 *gitlab.Response, _a1 error) *SnippetsServiceInterface_DeleteSnippet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SnippetsServiceInterface_DeleteSnippet_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *SnippetsServiceInterface_DeleteSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// ExploreSnippets provides a mock function with given fields: opt, options
func (_m *SnippetsServiceInterface) ExploreSnippets(opt *gitlab.ExploreSnippetsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExploreSnippets")
	}

	var r0 []*gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ExploreSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ExploreSnippetsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Snippet); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ExploreSnippetsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ExploreSnippetsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_ExploreSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExploreSnippets'
type SnippetsServiceInterface_ExploreSnippets_Call struct {
	*mock.Call
}

// ExploreSnippets is a helper method to define mock.On call
//   - opt *gitlab.ExploreSnippetsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) ExploreSnippets(opt interface{}, options ...interface{}) *SnippetsServiceInterface_ExploreSnippets_Call {
	return &SnippetsServiceInterface_ExploreSnippets_Call{Call: _e.mock.On("ExploreSnippets",
		append([]interface{}{opt}, options...)...)}
}

func (_c *SnippetsServiceInterface_ExploreSnippets_Call) Run(run func(opt *gitlab.ExploreSnippetsOptions, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_ExploreSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ExploreSnippetsOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_ExploreSnippets_Call) Return(_a0 []*gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_ExploreSnippets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_ExploreSnippets_Call) RunAndReturn(run func(*gitlab.ExploreSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_ExploreSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnippet provides a mock function with given fields: snippet, options
func (_m *SnippetsServiceInterface) GetSnippet(snippet int, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnippet")
	}

	var r0 *gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(snippet, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Snippet); ok {
		r0 = rf(snippet, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_GetSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnippet'
type SnippetsServiceInterface_GetSnippet_Call struct {
	*mock.Call
}

// GetSnippet is a helper method to define mock.On call
//   - snippet int
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) GetSnippet(snippet interface{}, options ...interface{}) *SnippetsServiceInterface_GetSnippet_Call {
	return &SnippetsServiceInterface_GetSnippet_Call{Call: _e.mock.On("GetSnippet",
		append([]interface{}{snippet}, options...)...)}
}

func (_c *SnippetsServiceInterface_GetSnippet_Call) Run(run func(snippet int, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_GetSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_GetSnippet_Call) Return(_a0 *gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_GetSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_GetSnippet_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_GetSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllSnippets provides a mock function with given fields: opt, options
func (_m *SnippetsServiceInterface) ListAllSnippets(opt *gitlab.ListAllSnippetsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllSnippets")
	}

	var r0 []*gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListAllSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListAllSnippetsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Snippet); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListAllSnippetsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListAllSnippetsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_ListAllSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllSnippets'
type SnippetsServiceInterface_ListAllSnippets_Call struct {
	*mock.Call
}

// ListAllSnippets is a helper method to define mock.On call
//   - opt *gitlab.ListAllSnippetsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) ListAllSnippets(opt interface{}, options ...interface{}) *SnippetsServiceInterface_ListAllSnippets_Call {
	return &SnippetsServiceInterface_ListAllSnippets_Call{Call: _e.mock.On("ListAllSnippets",
		append([]interface{}{opt}, options...)...)}
}

func (_c *SnippetsServiceInterface_ListAllSnippets_Call) Run(run func(opt *gitlab.ListAllSnippetsOptions, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_ListAllSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListAllSnippetsOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_ListAllSnippets_Call) Return(_a0 []*gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_ListAllSnippets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_ListAllSnippets_Call) RunAndReturn(run func(*gitlab.ListAllSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_ListAllSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnippets provides a mock function with given fields: opt, options
func (_m *SnippetsServiceInterface) ListSnippets(opt *gitlab.ListSnippetsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSnippets")
	}

	var r0 []*gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListSnippetsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Snippet); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListSnippetsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListSnippetsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_ListSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnippets'
type SnippetsServiceInterface_ListSnippets_Call struct {
	*mock.Call
}

// ListSnippets is a helper method to define mock.On call
//   - opt *gitlab.ListSnippetsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) ListSnippets(opt interface{}, options ...interface{}) *SnippetsServiceInterface_ListSnippets_Call {
	return &SnippetsServiceInterface_ListSnippets_Call{Call: _e.mock.On("ListSnippets",
		append([]interface{}{opt}, options...)...)}
}

func (_c *SnippetsServiceInterface_ListSnippets_Call) Run(run func(opt *gitlab.ListSnippetsOptions, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_ListSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListSnippetsOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_ListSnippets_Call) Return(_a0 []*gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_ListSnippets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_ListSnippets_Call) RunAndReturn(run func(*gitlab.ListSnippetsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_ListSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// SnippetContent provides a mock function with given fields: snippet, options
func (_m *SnippetsServiceInterface) SnippetContent(snippet int, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnippetContent")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(snippet, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(snippet, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_SnippetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SnippetContent'
type SnippetsServiceInterface_SnippetContent_Call struct {
	*mock.Call
}

// SnippetContent is a helper method to define mock.On call
//   - snippet int
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) SnippetContent(snippet interface{}, options ...interface{}) *SnippetsServiceInterface_SnippetContent_Call {
	return &SnippetsServiceInterface_SnippetContent_Call{Call: _e.mock.On("SnippetContent",
		append([]interface{}{snippet}, options...)...)}
}

func (_c *SnippetsServiceInterface_SnippetContent_Call) Run(run func(snippet int, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_SnippetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_SnippetContent_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_SnippetContent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_SnippetContent_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *SnippetsServiceInterface_SnippetContent_Call {
	_c.Call.Return(run)
	return _c
}

// SnippetFileContent provides a mock function with given fields: snippet, ref, filename, options
func (_m *SnippetsServiceInterface) SnippetFileContent(snippet int, ref string, filename string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet, ref, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnippetFileContent")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(snippet, ref, filename, options...)
	}
	if rf, ok := ret.Get(0).(func(int, string, string, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(snippet, ref, filename, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, ref, filename, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, string, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, ref, filename, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_SnippetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SnippetFileContent'
type SnippetsServiceInterface_SnippetFileContent_Call struct {
	*mock.Call
}

// SnippetFileContent is a helper method to define mock.On call
//   - snippet int
//   - ref string
//   - filename string
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) SnippetFileContent(snippet interface{}, ref interface{}, filename interface{}, options ...interface{}) *SnippetsServiceInterface_SnippetFileContent_Call {
	return &SnippetsServiceInterface_SnippetFileContent_Call{Call: _e.mock.On("SnippetFileContent",
		append([]interface{}{snippet, ref, filename}, options...)...)}
}

func (_c *SnippetsServiceInterface_SnippetFileContent_Call) Run(run func(snippet int, ref string, filename string, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_SnippetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_SnippetFileContent_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_SnippetFileContent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_SnippetFileContent_Call) RunAndReturn(run func(int, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *SnippetsServiceInterface_SnippetFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSnippet provides a mock function with given fields: snippet, opt, options
func (_m *SnippetsServiceInterface) UpdateSnippet(snippet int, opt *gitlab.UpdateSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, snippet, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnippet")
	}

	var r0 *gitlab.Snippet
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)); ok {
		return rf(snippet, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.Snippet); ok {
		r0 = rf(snippet, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.UpdateSnippetOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(snippet, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.UpdateSnippetOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(snippet, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnippetsServiceInterface_UpdateSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSnippet'
type SnippetsServiceInterface_UpdateSnippet_Call struct {
	*mock.Call
}

// UpdateSnippet is a helper method to define mock.On call
//   - snippet int
//   - opt *gitlab.UpdateSnippetOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SnippetsServiceInterface_Expecter) UpdateSnippet(snippet interface{}, opt interface{}, options ...interface{}) *SnippetsServiceInterface_UpdateSnippet_Call {
	return &SnippetsServiceInterface_UpdateSnippet_Call{Call: _e.mock.On("UpdateSnippet",
		append([]interface{}{snippet, opt}, options...)...)}
}

func (_c *SnippetsServiceInterface_UpdateSnippet_Call) Run(run func(snippet int, opt *gitlab.UpdateSnippetOptions, options ...gitlab.RequestOptionFunc)) *SnippetsServiceInterface_UpdateSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.UpdateSnippetOptions), variadicArgs...)
	})
	return _c
}

func (_c *SnippetsServiceInterface_UpdateSnippet_Call) Return(_a0 *gitlab.Snippet, _a1 *gitlab.Response, _a2 error) *SnippetsServiceInterface_UpdateSnippet_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnippetsServiceInterface_UpdateSnippet_Call) RunAndReturn(run func(int, *gitlab.UpdateSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.Snippet, *gitlab.Response, error)) *SnippetsServiceInterface_UpdateSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnippetsServiceInterface creates a new instance of SnippetsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnippetsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnippetsServiceInterface {
	mock := &SnippetsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
