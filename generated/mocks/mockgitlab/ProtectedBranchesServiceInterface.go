// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ProtectedBranchesServiceInterface is an autogenerated mock type for the ProtectedBranchesServiceInterface type
type ProtectedBranchesServiceInterface struct {
	mock.Mock
}

type ProtectedBranchesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProtectedBranchesServiceInterface) EXPECT() *ProtectedBranchesServiceInterface_Expecter {
	return &ProtectedBranchesServiceInterface_Expecter{mock: &_m.Mock}
}

// GetProtectedBranch provides a mock function with given fields: pid, branch, options
func (_m *ProtectedBranchesServiceInterface) GetProtectedBranch(pid interface{}, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectedBranch")
	}

	var r0 *gitlab.ProtectedBranch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)); ok {
		return rf(pid, branch, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.ProtectedBranch); ok {
		r0 = rf(pid, branch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, branch, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, branch, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedBranchesServiceInterface_GetProtectedBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtectedBranch'
type ProtectedBranchesServiceInterface_GetProtectedBranch_Call struct {
	*mock.Call
}

// GetProtectedBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) GetProtectedBranch(pid interface{}, branch interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_GetProtectedBranch_Call {
	return &ProtectedBranchesServiceInterface_GetProtectedBranch_Call{Call: _e.mock.On("GetProtectedBranch",
		append([]interface{}{pid, branch}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_GetProtectedBranch_Call) Run(run func(pid interface{}, branch string, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_GetProtectedBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_GetProtectedBranch_Call) Return(_a0 *gitlab.ProtectedBranch, _a1 *gitlab.Response, _a2 error) *ProtectedBranchesServiceInterface_GetProtectedBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_GetProtectedBranch_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)) *ProtectedBranchesServiceInterface_GetProtectedBranch_Call {
	_c.Call.Return(run)
	return _c
}

// ListProtectedBranches provides a mock function with given fields: pid, opt, options
func (_m *ProtectedBranchesServiceInterface) ListProtectedBranches(pid interface{}, opt *gitlab.ListProtectedBranchesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedBranch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectedBranches")
	}

	var r0 []*gitlab.ProtectedBranch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedBranch, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProtectedBranchesOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProtectedBranch); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProtectedBranchesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProtectedBranchesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedBranchesServiceInterface_ListProtectedBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProtectedBranches'
type ProtectedBranchesServiceInterface_ListProtectedBranches_Call struct {
	*mock.Call
}

// ListProtectedBranches is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProtectedBranchesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) ListProtectedBranches(pid interface{}, opt interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_ListProtectedBranches_Call {
	return &ProtectedBranchesServiceInterface_ListProtectedBranches_Call{Call: _e.mock.On("ListProtectedBranches",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_ListProtectedBranches_Call) Run(run func(pid interface{}, opt *gitlab.ListProtectedBranchesOptions, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_ListProtectedBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProtectedBranchesOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_ListProtectedBranches_Call) Return(_a0 []*gitlab.ProtectedBranch, _a1 *gitlab.Response, _a2 error) *ProtectedBranchesServiceInterface_ListProtectedBranches_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_ListProtectedBranches_Call) RunAndReturn(run func(interface{}, *gitlab.ListProtectedBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedBranch, *gitlab.Response, error)) *ProtectedBranchesServiceInterface_ListProtectedBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectRepositoryBranches provides a mock function with given fields: pid, opt, options
func (_m *ProtectedBranchesServiceInterface) ProtectRepositoryBranches(pid interface{}, opt *gitlab.ProtectRepositoryBranchesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProtectRepositoryBranches")
	}

	var r0 *gitlab.ProtectedBranch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryBranchesOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectRepositoryBranchesOptions, ...gitlab.RequestOptionFunc) *gitlab.ProtectedBranch); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ProtectRepositoryBranchesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ProtectRepositoryBranchesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectRepositoryBranches'
type ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call struct {
	*mock.Call
}

// ProtectRepositoryBranches is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ProtectRepositoryBranchesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) ProtectRepositoryBranches(pid interface{}, opt interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call {
	return &ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call{Call: _e.mock.On("ProtectRepositoryBranches",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call) Run(run func(pid interface{}, opt *gitlab.ProtectRepositoryBranchesOptions, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ProtectRepositoryBranchesOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call) Return(_a0 *gitlab.ProtectedBranch, _a1 *gitlab.Response, _a2 error) *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call) RunAndReturn(run func(interface{}, *gitlab.ProtectRepositoryBranchesOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)) *ProtectedBranchesServiceInterface_ProtectRepositoryBranches_Call {
	_c.Call.Return(run)
	return _c
}

// RequireCodeOwnerApprovals provides a mock function with given fields: pid, branch, opt, options
func (_m *ProtectedBranchesServiceInterface) RequireCodeOwnerApprovals(pid interface{}, branch string, opt *gitlab.RequireCodeOwnerApprovalsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequireCodeOwnerApprovals")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.RequireCodeOwnerApprovalsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, branch, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.RequireCodeOwnerApprovalsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, branch, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.RequireCodeOwnerApprovalsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, branch, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequireCodeOwnerApprovals'
type ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call struct {
	*mock.Call
}

// RequireCodeOwnerApprovals is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - opt *gitlab.RequireCodeOwnerApprovalsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) RequireCodeOwnerApprovals(pid interface{}, branch interface{}, opt interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call {
	return &ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call{Call: _e.mock.On("RequireCodeOwnerApprovals",
		append([]interface{}{pid, branch, opt}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call) Run(run func(pid interface{}, branch string, opt *gitlab.RequireCodeOwnerApprovalsOptions, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.RequireCodeOwnerApprovalsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call) Return(_a0 *gitlab.Response, _a1 error) *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call) RunAndReturn(run func(interface{}, string, *gitlab.RequireCodeOwnerApprovalsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProtectedBranchesServiceInterface_RequireCodeOwnerApprovals_Call {
	_c.Call.Return(run)
	return _c
}

// UnprotectRepositoryBranches provides a mock function with given fields: pid, branch, options
func (_m *ProtectedBranchesServiceInterface) UnprotectRepositoryBranches(pid interface{}, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnprotectRepositoryBranches")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, branch, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, branch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, branch, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprotectRepositoryBranches'
type ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call struct {
	*mock.Call
}

// UnprotectRepositoryBranches is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) UnprotectRepositoryBranches(pid interface{}, branch interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call {
	return &ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call{Call: _e.mock.On("UnprotectRepositoryBranches",
		append([]interface{}{pid, branch}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call) Run(run func(pid interface{}, branch string, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call) Return(_a0 *gitlab.Response, _a1 error) *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProtectedBranchesServiceInterface_UnprotectRepositoryBranches_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProtectedBranch provides a mock function with given fields: pid, branch, opt, options
func (_m *ProtectedBranchesServiceInterface) UpdateProtectedBranch(pid interface{}, branch string, opt *gitlab.UpdateProtectedBranchOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, branch, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectedBranch")
	}

	var r0 *gitlab.ProtectedBranch
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProtectedBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)); ok {
		return rf(pid, branch, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateProtectedBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.ProtectedBranch); ok {
		r0 = rf(pid, branch, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateProtectedBranchOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, branch, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateProtectedBranchOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, branch, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProtectedBranch'
type ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call struct {
	*mock.Call
}

// UpdateProtectedBranch is a helper method to define mock.On call
//   - pid interface{}
//   - branch string
//   - opt *gitlab.UpdateProtectedBranchOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ProtectedBranchesServiceInterface_Expecter) UpdateProtectedBranch(pid interface{}, branch interface{}, opt interface{}, options ...interface{}) *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call {
	return &ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call{Call: _e.mock.On("UpdateProtectedBranch",
		append([]interface{}{pid, branch, opt}, options...)...)}
}

func (_c *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call) Run(run func(pid interface{}, branch string, opt *gitlab.UpdateProtectedBranchOptions, options ...gitlab.RequestOptionFunc)) *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateProtectedBranchOptions), variadicArgs...)
	})
	return _c
}

func (_c *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call) Return(_a0 *gitlab.ProtectedBranch, _a1 *gitlab.Response, _a2 error) *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateProtectedBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedBranch, *gitlab.Response, error)) *ProtectedBranchesServiceInterface_UpdateProtectedBranch_Call {
	_c.Call.Return(run)
	return _c
}

// NewProtectedBranchesServiceInterface creates a new instance of ProtectedBranchesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectedBranchesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectedBranchesServiceInterface {
	mock := &ProtectedBranchesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
