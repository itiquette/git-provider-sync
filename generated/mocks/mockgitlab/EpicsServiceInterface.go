// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// EpicsServiceInterface is an autogenerated mock type for the EpicsServiceInterface type
type EpicsServiceInterface struct {
	mock.Mock
}

type EpicsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EpicsServiceInterface) EXPECT() *EpicsServiceInterface_Expecter {
	return &EpicsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateEpic provides a mock function with given fields: gid, opt, options
func (_m *EpicsServiceInterface) CreateEpic(gid interface{}, opt *gitlab.CreateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEpic")
	}

	var r0 *gitlab.Epic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) *gitlab.Epic); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Epic)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicsServiceInterface_CreateEpic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEpic'
type EpicsServiceInterface_CreateEpic_Call struct {
	*mock.Call
}

// CreateEpic is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateEpicOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) CreateEpic(gid interface{}, opt interface{}, options ...interface{}) *EpicsServiceInterface_CreateEpic_Call {
	return &EpicsServiceInterface_CreateEpic_Call{Call: _e.mock.On("CreateEpic",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *EpicsServiceInterface_CreateEpic_Call) Run(run func(gid interface{}, opt *gitlab.CreateEpicOptions, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_CreateEpic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateEpicOptions), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_CreateEpic_Call) Return(_a0 *gitlab.Epic, _a1 *gitlab.Response, _a2 error) *EpicsServiceInterface_CreateEpic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicsServiceInterface_CreateEpic_Call) RunAndReturn(run func(interface{}, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *EpicsServiceInterface_CreateEpic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEpic provides a mock function with given fields: gid, epic, options
func (_m *EpicsServiceInterface) DeleteEpic(gid interface{}, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEpic")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, epic, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, epic, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, epic, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EpicsServiceInterface_DeleteEpic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEpic'
type EpicsServiceInterface_DeleteEpic_Call struct {
	*mock.Call
}

// DeleteEpic is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) DeleteEpic(gid interface{}, epic interface{}, options ...interface{}) *EpicsServiceInterface_DeleteEpic_Call {
	return &EpicsServiceInterface_DeleteEpic_Call{Call: _e.mock.On("DeleteEpic",
		append([]interface{}{gid, epic}, options...)...)}
}

func (_c *EpicsServiceInterface_DeleteEpic_Call) Run(run func(gid interface{}, epic int, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_DeleteEpic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_DeleteEpic_Call) Return(_a0 *gitlab.Response, _a1 error) *EpicsServiceInterface_DeleteEpic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EpicsServiceInterface_DeleteEpic_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *EpicsServiceInterface_DeleteEpic_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpic provides a mock function with given fields: gid, epic, options
func (_m *EpicsServiceInterface) GetEpic(gid interface{}, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEpic")
	}

	var r0 *gitlab.Epic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)); ok {
		return rf(gid, epic, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Epic); ok {
		r0 = rf(gid, epic, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Epic)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicsServiceInterface_GetEpic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpic'
type EpicsServiceInterface_GetEpic_Call struct {
	*mock.Call
}

// GetEpic is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) GetEpic(gid interface{}, epic interface{}, options ...interface{}) *EpicsServiceInterface_GetEpic_Call {
	return &EpicsServiceInterface_GetEpic_Call{Call: _e.mock.On("GetEpic",
		append([]interface{}{gid, epic}, options...)...)}
}

func (_c *EpicsServiceInterface_GetEpic_Call) Run(run func(gid interface{}, epic int, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_GetEpic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_GetEpic_Call) Return(_a0 *gitlab.Epic, _a1 *gitlab.Response, _a2 error) *EpicsServiceInterface_GetEpic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicsServiceInterface_GetEpic_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *EpicsServiceInterface_GetEpic_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpicLinks provides a mock function with given fields: gid, epic, options
func (_m *EpicsServiceInterface) GetEpicLinks(gid interface{}, epic int, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEpicLinks")
	}

	var r0 []*gitlab.Epic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)); ok {
		return rf(gid, epic, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) []*gitlab.Epic); ok {
		r0 = rf(gid, epic, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Epic)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicsServiceInterface_GetEpicLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpicLinks'
type EpicsServiceInterface_GetEpicLinks_Call struct {
	*mock.Call
}

// GetEpicLinks is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) GetEpicLinks(gid interface{}, epic interface{}, options ...interface{}) *EpicsServiceInterface_GetEpicLinks_Call {
	return &EpicsServiceInterface_GetEpicLinks_Call{Call: _e.mock.On("GetEpicLinks",
		append([]interface{}{gid, epic}, options...)...)}
}

func (_c *EpicsServiceInterface_GetEpicLinks_Call) Run(run func(gid interface{}, epic int, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_GetEpicLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_GetEpicLinks_Call) Return(_a0 []*gitlab.Epic, _a1 *gitlab.Response, _a2 error) *EpicsServiceInterface_GetEpicLinks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicsServiceInterface_GetEpicLinks_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *EpicsServiceInterface_GetEpicLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupEpics provides a mock function with given fields: gid, opt, options
func (_m *EpicsServiceInterface) ListGroupEpics(gid interface{}, opt *gitlab.ListGroupEpicsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupEpics")
	}

	var r0 []*gitlab.Epic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Epic); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Epic)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicsServiceInterface_ListGroupEpics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupEpics'
type EpicsServiceInterface_ListGroupEpics_Call struct {
	*mock.Call
}

// ListGroupEpics is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupEpicsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) ListGroupEpics(gid interface{}, opt interface{}, options ...interface{}) *EpicsServiceInterface_ListGroupEpics_Call {
	return &EpicsServiceInterface_ListGroupEpics_Call{Call: _e.mock.On("ListGroupEpics",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *EpicsServiceInterface_ListGroupEpics_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupEpicsOptions, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_ListGroupEpics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupEpicsOptions), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_ListGroupEpics_Call) Return(_a0 []*gitlab.Epic, _a1 *gitlab.Response, _a2 error) *EpicsServiceInterface_ListGroupEpics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicsServiceInterface_ListGroupEpics_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *EpicsServiceInterface_ListGroupEpics_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEpic provides a mock function with given fields: gid, epic, opt, options
func (_m *EpicsServiceInterface) UpdateEpic(gid interface{}, epic int, opt *gitlab.UpdateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEpic")
	}

	var r0 *gitlab.Epic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)); ok {
		return rf(gid, epic, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) *gitlab.Epic); ok {
		r0 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Epic)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EpicsServiceInterface_UpdateEpic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEpic'
type EpicsServiceInterface_UpdateEpic_Call struct {
	*mock.Call
}

// UpdateEpic is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - opt *gitlab.UpdateEpicOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *EpicsServiceInterface_Expecter) UpdateEpic(gid interface{}, epic interface{}, opt interface{}, options ...interface{}) *EpicsServiceInterface_UpdateEpic_Call {
	return &EpicsServiceInterface_UpdateEpic_Call{Call: _e.mock.On("UpdateEpic",
		append([]interface{}{gid, epic, opt}, options...)...)}
}

func (_c *EpicsServiceInterface_UpdateEpic_Call) Run(run func(gid interface{}, epic int, opt *gitlab.UpdateEpicOptions, options ...gitlab.RequestOptionFunc)) *EpicsServiceInterface_UpdateEpic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateEpicOptions), variadicArgs...)
	})
	return _c
}

func (_c *EpicsServiceInterface_UpdateEpic_Call) Return(_a0 *gitlab.Epic, _a1 *gitlab.Response, _a2 error) *EpicsServiceInterface_UpdateEpic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EpicsServiceInterface_UpdateEpic_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *EpicsServiceInterface_UpdateEpic_Call {
	_c.Call.Return(run)
	return _c
}

// NewEpicsServiceInterface creates a new instance of EpicsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEpicsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EpicsServiceInterface {
	mock := &EpicsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
