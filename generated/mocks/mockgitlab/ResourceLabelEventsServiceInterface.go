// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ResourceLabelEventsServiceInterface is an autogenerated mock type for the ResourceLabelEventsServiceInterface type
type ResourceLabelEventsServiceInterface struct {
	mock.Mock
}

type ResourceLabelEventsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceLabelEventsServiceInterface) EXPECT() *ResourceLabelEventsServiceInterface_Expecter {
	return &ResourceLabelEventsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupEpicLabelEvent provides a mock function with given fields: gid, epic, event, options
func (_m *ResourceLabelEventsServiceInterface) GetGroupEpicLabelEvent(gid interface{}, epic int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupEpicLabelEvent")
	}

	var r0 *gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(gid, epic, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.LabelEvent); ok {
		r0 = rf(gid, epic, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupEpicLabelEvent'
type ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call struct {
	*mock.Call
}

// GetGroupEpicLabelEvent is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) GetGroupEpicLabelEvent(gid interface{}, epic interface{}, event interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call {
	return &ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call{Call: _e.mock.On("GetGroupEpicLabelEvent",
		append([]interface{}{gid, epic, event}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call) Run(run func(gid interface{}, epic int, event int, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call) Return(_a0 *gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_GetGroupEpicLabelEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueLabelEvent provides a mock function with given fields: pid, issue, event, options
func (_m *ResourceLabelEventsServiceInterface) GetIssueLabelEvent(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueLabelEvent")
	}

	var r0 *gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.LabelEvent); ok {
		r0 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueLabelEvent'
type ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call struct {
	*mock.Call
}

// GetIssueLabelEvent is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) GetIssueLabelEvent(pid interface{}, issue interface{}, event interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call {
	return &ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call{Call: _e.mock.On("GetIssueLabelEvent",
		append([]interface{}{pid, issue, event}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call) Run(run func(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call) Return(_a0 *gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_GetIssueLabelEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestLabelEvent provides a mock function with given fields: pid, request, event, options
func (_m *ResourceLabelEventsServiceInterface) GetMergeRequestLabelEvent(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestLabelEvent")
	}

	var r0 *gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.LabelEvent); ok {
		r0 = rf(pid, request, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestLabelEvent'
type ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call struct {
	*mock.Call
}

// GetMergeRequestLabelEvent is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) GetMergeRequestLabelEvent(pid interface{}, request interface{}, event interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call {
	return &ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call{Call: _e.mock.On("GetMergeRequestLabelEvent",
		append([]interface{}{pid, request, event}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call) Run(run func(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call) Return(_a0 *gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_GetMergeRequestLabelEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupEpicLabelEvents provides a mock function with given fields: gid, epic, opt, options
func (_m *ResourceLabelEventsServiceInterface) ListGroupEpicLabelEvents(gid interface{}, epic int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, epic, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupEpicLabelEvents")
	}

	var r0 []*gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(gid, epic, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.LabelEvent); ok {
		r0 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, epic, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, epic, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupEpicLabelEvents'
type ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call struct {
	*mock.Call
}

// ListGroupEpicLabelEvents is a helper method to define mock.On call
//   - gid interface{}
//   - epic int
//   - opt *gitlab.ListLabelEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) ListGroupEpicLabelEvents(gid interface{}, epic interface{}, opt interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call {
	return &ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call{Call: _e.mock.On("ListGroupEpicLabelEvents",
		append([]interface{}{gid, epic, opt}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call) Run(run func(gid interface{}, epic int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListLabelEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call) Return(_a0 []*gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_ListGroupEpicLabelEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueLabelEvents provides a mock function with given fields: pid, issue, opt, options
func (_m *ResourceLabelEventsServiceInterface) ListIssueLabelEvents(pid interface{}, issue int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueLabelEvents")
	}

	var r0 []*gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.LabelEvent); ok {
		r0 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueLabelEvents'
type ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call struct {
	*mock.Call
}

// ListIssueLabelEvents is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - opt *gitlab.ListLabelEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) ListIssueLabelEvents(pid interface{}, issue interface{}, opt interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call {
	return &ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call{Call: _e.mock.On("ListIssueLabelEvents",
		append([]interface{}{pid, issue, opt}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call) Run(run func(pid interface{}, issue int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListLabelEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call) Return(_a0 []*gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_ListIssueLabelEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeRequestsLabelEvents provides a mock function with given fields: pid, request, opt, options
func (_m *ResourceLabelEventsServiceInterface) ListMergeRequestsLabelEvents(pid interface{}, request int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMergeRequestsLabelEvents")
	}

	var r0 []*gitlab.LabelEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.LabelEvent); ok {
		r0 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.LabelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeRequestsLabelEvents'
type ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call struct {
	*mock.Call
}

// ListMergeRequestsLabelEvents is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - opt *gitlab.ListLabelEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceLabelEventsServiceInterface_Expecter) ListMergeRequestsLabelEvents(pid interface{}, request interface{}, opt interface{}, options ...interface{}) *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call {
	return &ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call{Call: _e.mock.On("ListMergeRequestsLabelEvents",
		append([]interface{}{pid, request, opt}, options...)...)}
}

func (_c *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call) Run(run func(pid interface{}, request int, opt *gitlab.ListLabelEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListLabelEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call) Return(_a0 []*gitlab.LabelEvent, _a1 *gitlab.Response, _a2 error) *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListLabelEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LabelEvent, *gitlab.Response, error)) *ResourceLabelEventsServiceInterface_ListMergeRequestsLabelEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceLabelEventsServiceInterface creates a new instance of ResourceLabelEventsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceLabelEventsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceLabelEventsServiceInterface {
	mock := &ResourceLabelEventsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
