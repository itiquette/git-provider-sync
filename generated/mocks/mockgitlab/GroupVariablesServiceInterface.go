// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupVariablesServiceInterface is an autogenerated mock type for the GroupVariablesServiceInterface type
type GroupVariablesServiceInterface struct {
	mock.Mock
}

type GroupVariablesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupVariablesServiceInterface) EXPECT() *GroupVariablesServiceInterface_Expecter {
	return &GroupVariablesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateVariable provides a mock function with given fields: gid, opt, options
func (_m *GroupVariablesServiceInterface) CreateVariable(gid interface{}, opt *gitlab.CreateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVariable")
	}

	var r0 *gitlab.GroupVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupVariable); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupVariablesServiceInterface_CreateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVariable'
type GroupVariablesServiceInterface_CreateVariable_Call struct {
	*mock.Call
}

// CreateVariable is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupVariableOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupVariablesServiceInterface_Expecter) CreateVariable(gid interface{}, opt interface{}, options ...interface{}) *GroupVariablesServiceInterface_CreateVariable_Call {
	return &GroupVariablesServiceInterface_CreateVariable_Call{Call: _e.mock.On("CreateVariable",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupVariablesServiceInterface_CreateVariable_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupVariableOptions, options ...gitlab.RequestOptionFunc)) *GroupVariablesServiceInterface_CreateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupVariableOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupVariablesServiceInterface_CreateVariable_Call) Return(_a0 *gitlab.GroupVariable, _a1 *gitlab.Response, _a2 error) *GroupVariablesServiceInterface_CreateVariable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupVariablesServiceInterface_CreateVariable_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *GroupVariablesServiceInterface_CreateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariable provides a mock function with given fields: gid, key, opt, options
func (_m *GroupVariablesServiceInterface) GetVariable(gid interface{}, key string, opt *gitlab.GetGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, key, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVariable")
	}

	var r0 *gitlab.GroupVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)); ok {
		return rf(gid, key, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupVariable); ok {
		r0 = rf(gid, key, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, key, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, key, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupVariablesServiceInterface_GetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariable'
type GroupVariablesServiceInterface_GetVariable_Call struct {
	*mock.Call
}

// GetVariable is a helper method to define mock.On call
//   - gid interface{}
//   - key string
//   - opt *gitlab.GetGroupVariableOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupVariablesServiceInterface_Expecter) GetVariable(gid interface{}, key interface{}, opt interface{}, options ...interface{}) *GroupVariablesServiceInterface_GetVariable_Call {
	return &GroupVariablesServiceInterface_GetVariable_Call{Call: _e.mock.On("GetVariable",
		append([]interface{}{gid, key, opt}, options...)...)}
}

func (_c *GroupVariablesServiceInterface_GetVariable_Call) Run(run func(gid interface{}, key string, opt *gitlab.GetGroupVariableOptions, options ...gitlab.RequestOptionFunc)) *GroupVariablesServiceInterface_GetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetGroupVariableOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupVariablesServiceInterface_GetVariable_Call) Return(_a0 *gitlab.GroupVariable, _a1 *gitlab.Response, _a2 error) *GroupVariablesServiceInterface_GetVariable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupVariablesServiceInterface_GetVariable_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *GroupVariablesServiceInterface_GetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// ListVariables provides a mock function with given fields: gid, opt, options
func (_m *GroupVariablesServiceInterface) ListVariables(gid interface{}, opt *gitlab.ListGroupVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVariables")
	}

	var r0 []*gitlab.GroupVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupVariable); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupVariablesServiceInterface_ListVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVariables'
type GroupVariablesServiceInterface_ListVariables_Call struct {
	*mock.Call
}

// ListVariables is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupVariablesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupVariablesServiceInterface_Expecter) ListVariables(gid interface{}, opt interface{}, options ...interface{}) *GroupVariablesServiceInterface_ListVariables_Call {
	return &GroupVariablesServiceInterface_ListVariables_Call{Call: _e.mock.On("ListVariables",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupVariablesServiceInterface_ListVariables_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupVariablesOptions, options ...gitlab.RequestOptionFunc)) *GroupVariablesServiceInterface_ListVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupVariablesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupVariablesServiceInterface_ListVariables_Call) Return(_a0 []*gitlab.GroupVariable, _a1 *gitlab.Response, _a2 error) *GroupVariablesServiceInterface_ListVariables_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupVariablesServiceInterface_ListVariables_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error)) *GroupVariablesServiceInterface_ListVariables_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVariable provides a mock function with given fields: gid, key, opt, options
func (_m *GroupVariablesServiceInterface) RemoveVariable(gid interface{}, key string, opt *gitlab.RemoveGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, key, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVariable")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, key, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, key, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, key, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupVariablesServiceInterface_RemoveVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVariable'
type GroupVariablesServiceInterface_RemoveVariable_Call struct {
	*mock.Call
}

// RemoveVariable is a helper method to define mock.On call
//   - gid interface{}
//   - key string
//   - opt *gitlab.RemoveGroupVariableOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupVariablesServiceInterface_Expecter) RemoveVariable(gid interface{}, key interface{}, opt interface{}, options ...interface{}) *GroupVariablesServiceInterface_RemoveVariable_Call {
	return &GroupVariablesServiceInterface_RemoveVariable_Call{Call: _e.mock.On("RemoveVariable",
		append([]interface{}{gid, key, opt}, options...)...)}
}

func (_c *GroupVariablesServiceInterface_RemoveVariable_Call) Run(run func(gid interface{}, key string, opt *gitlab.RemoveGroupVariableOptions, options ...gitlab.RequestOptionFunc)) *GroupVariablesServiceInterface_RemoveVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.RemoveGroupVariableOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupVariablesServiceInterface_RemoveVariable_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupVariablesServiceInterface_RemoveVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupVariablesServiceInterface_RemoveVariable_Call) RunAndReturn(run func(interface{}, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupVariablesServiceInterface_RemoveVariable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVariable provides a mock function with given fields: gid, key, opt, options
func (_m *GroupVariablesServiceInterface) UpdateVariable(gid interface{}, key string, opt *gitlab.UpdateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, key, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVariable")
	}

	var r0 *gitlab.GroupVariable
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)); ok {
		return rf(gid, key, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupVariable); ok {
		r0 = rf(gid, key, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, key, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, key, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupVariablesServiceInterface_UpdateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVariable'
type GroupVariablesServiceInterface_UpdateVariable_Call struct {
	*mock.Call
}

// UpdateVariable is a helper method to define mock.On call
//   - gid interface{}
//   - key string
//   - opt *gitlab.UpdateGroupVariableOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupVariablesServiceInterface_Expecter) UpdateVariable(gid interface{}, key interface{}, opt interface{}, options ...interface{}) *GroupVariablesServiceInterface_UpdateVariable_Call {
	return &GroupVariablesServiceInterface_UpdateVariable_Call{Call: _e.mock.On("UpdateVariable",
		append([]interface{}{gid, key, opt}, options...)...)}
}

func (_c *GroupVariablesServiceInterface_UpdateVariable_Call) Run(run func(gid interface{}, key string, opt *gitlab.UpdateGroupVariableOptions, options ...gitlab.RequestOptionFunc)) *GroupVariablesServiceInterface_UpdateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateGroupVariableOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupVariablesServiceInterface_UpdateVariable_Call) Return(_a0 *gitlab.GroupVariable, _a1 *gitlab.Response, _a2 error) *GroupVariablesServiceInterface_UpdateVariable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupVariablesServiceInterface_UpdateVariable_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *GroupVariablesServiceInterface_UpdateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupVariablesServiceInterface creates a new instance of GroupVariablesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupVariablesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupVariablesServiceInterface {
	mock := &GroupVariablesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
