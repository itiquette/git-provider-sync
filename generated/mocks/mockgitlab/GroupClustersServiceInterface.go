// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupClustersServiceInterface is an autogenerated mock type for the GroupClustersServiceInterface type
type GroupClustersServiceInterface struct {
	mock.Mock
}

type GroupClustersServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupClustersServiceInterface) EXPECT() *GroupClustersServiceInterface_Expecter {
	return &GroupClustersServiceInterface_Expecter{mock: &_m.Mock}
}

// AddCluster provides a mock function with given fields: pid, opt, options
func (_m *GroupClustersServiceInterface) AddCluster(pid interface{}, opt *gitlab.AddGroupClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddCluster")
	}

	var r0 *gitlab.GroupCluster
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddGroupClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddGroupClusterOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupCluster); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddGroupClusterOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddGroupClusterOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupClustersServiceInterface_AddCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCluster'
type GroupClustersServiceInterface_AddCluster_Call struct {
	*mock.Call
}

// AddCluster is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddGroupClusterOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupClustersServiceInterface_Expecter) AddCluster(pid interface{}, opt interface{}, options ...interface{}) *GroupClustersServiceInterface_AddCluster_Call {
	return &GroupClustersServiceInterface_AddCluster_Call{Call: _e.mock.On("AddCluster",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *GroupClustersServiceInterface_AddCluster_Call) Run(run func(pid interface{}, opt *gitlab.AddGroupClusterOptions, options ...gitlab.RequestOptionFunc)) *GroupClustersServiceInterface_AddCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddGroupClusterOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupClustersServiceInterface_AddCluster_Call) Return(_a0 *gitlab.GroupCluster, _a1 *gitlab.Response, _a2 error) *GroupClustersServiceInterface_AddCluster_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupClustersServiceInterface_AddCluster_Call) RunAndReturn(run func(interface{}, *gitlab.AddGroupClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)) *GroupClustersServiceInterface_AddCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: pid, cluster, options
func (_m *GroupClustersServiceInterface) DeleteCluster(pid interface{}, cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, cluster)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, cluster, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, cluster, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, cluster, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupClustersServiceInterface_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type GroupClustersServiceInterface_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - pid interface{}
//   - cluster int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupClustersServiceInterface_Expecter) DeleteCluster(pid interface{}, cluster interface{}, options ...interface{}) *GroupClustersServiceInterface_DeleteCluster_Call {
	return &GroupClustersServiceInterface_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster",
		append([]interface{}{pid, cluster}, options...)...)}
}

func (_c *GroupClustersServiceInterface_DeleteCluster_Call) Run(run func(pid interface{}, cluster int, options ...gitlab.RequestOptionFunc)) *GroupClustersServiceInterface_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupClustersServiceInterface_DeleteCluster_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupClustersServiceInterface_DeleteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupClustersServiceInterface_DeleteCluster_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupClustersServiceInterface_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// EditCluster provides a mock function with given fields: pid, cluster, opt, options
func (_m *GroupClustersServiceInterface) EditCluster(pid interface{}, cluster int, opt *gitlab.EditGroupClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, cluster, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditCluster")
	}

	var r0 *gitlab.GroupCluster
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditGroupClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)); ok {
		return rf(pid, cluster, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditGroupClusterOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupCluster); ok {
		r0 = rf(pid, cluster, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditGroupClusterOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, cluster, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditGroupClusterOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, cluster, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupClustersServiceInterface_EditCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditCluster'
type GroupClustersServiceInterface_EditCluster_Call struct {
	*mock.Call
}

// EditCluster is a helper method to define mock.On call
//   - pid interface{}
//   - cluster int
//   - opt *gitlab.EditGroupClusterOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupClustersServiceInterface_Expecter) EditCluster(pid interface{}, cluster interface{}, opt interface{}, options ...interface{}) *GroupClustersServiceInterface_EditCluster_Call {
	return &GroupClustersServiceInterface_EditCluster_Call{Call: _e.mock.On("EditCluster",
		append([]interface{}{pid, cluster, opt}, options...)...)}
}

func (_c *GroupClustersServiceInterface_EditCluster_Call) Run(run func(pid interface{}, cluster int, opt *gitlab.EditGroupClusterOptions, options ...gitlab.RequestOptionFunc)) *GroupClustersServiceInterface_EditCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.EditGroupClusterOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupClustersServiceInterface_EditCluster_Call) Return(_a0 *gitlab.GroupCluster, _a1 *gitlab.Response, _a2 error) *GroupClustersServiceInterface_EditCluster_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupClustersServiceInterface_EditCluster_Call) RunAndReturn(run func(interface{}, int, *gitlab.EditGroupClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)) *GroupClustersServiceInterface_EditCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: pid, cluster, options
func (_m *GroupClustersServiceInterface) GetCluster(pid interface{}, cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, cluster)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *gitlab.GroupCluster
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)); ok {
		return rf(pid, cluster, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.GroupCluster); ok {
		r0 = rf(pid, cluster, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, cluster, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, cluster, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupClustersServiceInterface_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type GroupClustersServiceInterface_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - pid interface{}
//   - cluster int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupClustersServiceInterface_Expecter) GetCluster(pid interface{}, cluster interface{}, options ...interface{}) *GroupClustersServiceInterface_GetCluster_Call {
	return &GroupClustersServiceInterface_GetCluster_Call{Call: _e.mock.On("GetCluster",
		append([]interface{}{pid, cluster}, options...)...)}
}

func (_c *GroupClustersServiceInterface_GetCluster_Call) Run(run func(pid interface{}, cluster int, options ...gitlab.RequestOptionFunc)) *GroupClustersServiceInterface_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupClustersServiceInterface_GetCluster_Call) Return(_a0 *gitlab.GroupCluster, _a1 *gitlab.Response, _a2 error) *GroupClustersServiceInterface_GetCluster_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupClustersServiceInterface_GetCluster_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupCluster, *gitlab.Response, error)) *GroupClustersServiceInterface_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields: pid, options
func (_m *GroupClustersServiceInterface) ListClusters(pid interface{}, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupCluster, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 []*gitlab.GroupCluster
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupCluster, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []*gitlab.GroupCluster); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupClustersServiceInterface_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type GroupClustersServiceInterface_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupClustersServiceInterface_Expecter) ListClusters(pid interface{}, options ...interface{}) *GroupClustersServiceInterface_ListClusters_Call {
	return &GroupClustersServiceInterface_ListClusters_Call{Call: _e.mock.On("ListClusters",
		append([]interface{}{pid}, options...)...)}
}

func (_c *GroupClustersServiceInterface_ListClusters_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *GroupClustersServiceInterface_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupClustersServiceInterface_ListClusters_Call) Return(_a0 []*gitlab.GroupCluster, _a1 *gitlab.Response, _a2 error) *GroupClustersServiceInterface_ListClusters_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupClustersServiceInterface_ListClusters_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupCluster, *gitlab.Response, error)) *GroupClustersServiceInterface_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupClustersServiceInterface creates a new instance of GroupClustersServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupClustersServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupClustersServiceInterface {
	mock := &GroupClustersServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
