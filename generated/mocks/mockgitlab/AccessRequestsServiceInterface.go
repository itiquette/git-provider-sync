// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// AccessRequestsServiceInterface is an autogenerated mock type for the AccessRequestsServiceInterface type
type AccessRequestsServiceInterface struct {
	mock.Mock
}

type AccessRequestsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessRequestsServiceInterface) EXPECT() *AccessRequestsServiceInterface_Expecter {
	return &AccessRequestsServiceInterface_Expecter{mock: &_m.Mock}
}

// ApproveGroupAccessRequest provides a mock function with given fields: gid, user, opt, options
func (_m *AccessRequestsServiceInterface) ApproveGroupAccessRequest(gid interface{}, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, user, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApproveGroupAccessRequest")
	}

	var r0 *gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(gid, user, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.AccessRequest); ok {
		r0 = rf(gid, user, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, user, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, user, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveGroupAccessRequest'
type AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call struct {
	*mock.Call
}

// ApproveGroupAccessRequest is a helper method to define mock.On call
//   - gid interface{}
//   - user int
//   - opt *gitlab.ApproveAccessRequestOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) ApproveGroupAccessRequest(gid interface{}, user interface{}, opt interface{}, options ...interface{}) *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call {
	return &AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call{Call: _e.mock.On("ApproveGroupAccessRequest",
		append([]interface{}{gid, user, opt}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call) Run(run func(gid interface{}, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ApproveAccessRequestOptions), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call) Return(_a0 *gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call) RunAndReturn(run func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_ApproveGroupAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ApproveProjectAccessRequest provides a mock function with given fields: pid, user, opt, options
func (_m *AccessRequestsServiceInterface) ApproveProjectAccessRequest(pid interface{}, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApproveProjectAccessRequest")
	}

	var r0 *gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(pid, user, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.AccessRequest); ok {
		r0 = rf(pid, user, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, user, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, user, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveProjectAccessRequest'
type AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call struct {
	*mock.Call
}

// ApproveProjectAccessRequest is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - opt *gitlab.ApproveAccessRequestOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) ApproveProjectAccessRequest(pid interface{}, user interface{}, opt interface{}, options ...interface{}) *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call {
	return &AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call{Call: _e.mock.On("ApproveProjectAccessRequest",
		append([]interface{}{pid, user, opt}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call) Run(run func(pid interface{}, user int, opt *gitlab.ApproveAccessRequestOptions, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ApproveAccessRequestOptions), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call) Return(_a0 *gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call) RunAndReturn(run func(interface{}, int, *gitlab.ApproveAccessRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_ApproveProjectAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DenyGroupAccessRequest provides a mock function with given fields: gid, user, options
func (_m *AccessRequestsServiceInterface) DenyGroupAccessRequest(gid interface{}, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DenyGroupAccessRequest")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, user, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, user, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessRequestsServiceInterface_DenyGroupAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DenyGroupAccessRequest'
type AccessRequestsServiceInterface_DenyGroupAccessRequest_Call struct {
	*mock.Call
}

// DenyGroupAccessRequest is a helper method to define mock.On call
//   - gid interface{}
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) DenyGroupAccessRequest(gid interface{}, user interface{}, options ...interface{}) *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call {
	return &AccessRequestsServiceInterface_DenyGroupAccessRequest_Call{Call: _e.mock.On("DenyGroupAccessRequest",
		append([]interface{}{gid, user}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call) Run(run func(gid interface{}, user int, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call) Return(_a0 *gitlab.Response, _a1 error) *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *AccessRequestsServiceInterface_DenyGroupAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DenyProjectAccessRequest provides a mock function with given fields: pid, user, options
func (_m *AccessRequestsServiceInterface) DenyProjectAccessRequest(pid interface{}, user int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DenyProjectAccessRequest")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, user, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, user, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, user, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessRequestsServiceInterface_DenyProjectAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DenyProjectAccessRequest'
type AccessRequestsServiceInterface_DenyProjectAccessRequest_Call struct {
	*mock.Call
}

// DenyProjectAccessRequest is a helper method to define mock.On call
//   - pid interface{}
//   - user int
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) DenyProjectAccessRequest(pid interface{}, user interface{}, options ...interface{}) *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call {
	return &AccessRequestsServiceInterface_DenyProjectAccessRequest_Call{Call: _e.mock.On("DenyProjectAccessRequest",
		append([]interface{}{pid, user}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call) Run(run func(pid interface{}, user int, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call) Return(_a0 *gitlab.Response, _a1 error) *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *AccessRequestsServiceInterface_DenyProjectAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupAccessRequests provides a mock function with given fields: gid, opt, options
func (_m *AccessRequestsServiceInterface) ListGroupAccessRequests(gid interface{}, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupAccessRequests")
	}

	var r0 []*gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) []*gitlab.AccessRequest); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_ListGroupAccessRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupAccessRequests'
type AccessRequestsServiceInterface_ListGroupAccessRequests_Call struct {
	*mock.Call
}

// ListGroupAccessRequests is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListAccessRequestsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) ListGroupAccessRequests(gid interface{}, opt interface{}, options ...interface{}) *AccessRequestsServiceInterface_ListGroupAccessRequests_Call {
	return &AccessRequestsServiceInterface_ListGroupAccessRequests_Call{Call: _e.mock.On("ListGroupAccessRequests",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_ListGroupAccessRequests_Call) Run(run func(gid interface{}, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_ListGroupAccessRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListAccessRequestsOptions), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_ListGroupAccessRequests_Call) Return(_a0 []*gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_ListGroupAccessRequests_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_ListGroupAccessRequests_Call) RunAndReturn(run func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_ListGroupAccessRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectAccessRequests provides a mock function with given fields: pid, opt, options
func (_m *AccessRequestsServiceInterface) ListProjectAccessRequests(pid interface{}, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectAccessRequests")
	}

	var r0 []*gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) []*gitlab.AccessRequest); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_ListProjectAccessRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectAccessRequests'
type AccessRequestsServiceInterface_ListProjectAccessRequests_Call struct {
	*mock.Call
}

// ListProjectAccessRequests is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListAccessRequestsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) ListProjectAccessRequests(pid interface{}, opt interface{}, options ...interface{}) *AccessRequestsServiceInterface_ListProjectAccessRequests_Call {
	return &AccessRequestsServiceInterface_ListProjectAccessRequests_Call{Call: _e.mock.On("ListProjectAccessRequests",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_ListProjectAccessRequests_Call) Run(run func(pid interface{}, opt *gitlab.ListAccessRequestsOptions, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_ListProjectAccessRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListAccessRequestsOptions), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_ListProjectAccessRequests_Call) Return(_a0 []*gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_ListProjectAccessRequests_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_ListProjectAccessRequests_Call) RunAndReturn(run func(interface{}, *gitlab.ListAccessRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_ListProjectAccessRequests_Call {
	_c.Call.Return(run)
	return _c
}

// RequestGroupAccess provides a mock function with given fields: gid, options
func (_m *AccessRequestsServiceInterface) RequestGroupAccess(gid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestGroupAccess")
	}

	var r0 *gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(gid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.AccessRequest); ok {
		r0 = rf(gid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_RequestGroupAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestGroupAccess'
type AccessRequestsServiceInterface_RequestGroupAccess_Call struct {
	*mock.Call
}

// RequestGroupAccess is a helper method to define mock.On call
//   - gid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) RequestGroupAccess(gid interface{}, options ...interface{}) *AccessRequestsServiceInterface_RequestGroupAccess_Call {
	return &AccessRequestsServiceInterface_RequestGroupAccess_Call{Call: _e.mock.On("RequestGroupAccess",
		append([]interface{}{gid}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_RequestGroupAccess_Call) Run(run func(gid interface{}, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_RequestGroupAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_RequestGroupAccess_Call) Return(_a0 *gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_RequestGroupAccess_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_RequestGroupAccess_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_RequestGroupAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RequestProjectAccess provides a mock function with given fields: pid, options
func (_m *AccessRequestsServiceInterface) RequestProjectAccess(pid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestProjectAccess")
	}

	var r0 *gitlab.AccessRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.AccessRequest); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessRequestsServiceInterface_RequestProjectAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestProjectAccess'
type AccessRequestsServiceInterface_RequestProjectAccess_Call struct {
	*mock.Call
}

// RequestProjectAccess is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *AccessRequestsServiceInterface_Expecter) RequestProjectAccess(pid interface{}, options ...interface{}) *AccessRequestsServiceInterface_RequestProjectAccess_Call {
	return &AccessRequestsServiceInterface_RequestProjectAccess_Call{Call: _e.mock.On("RequestProjectAccess",
		append([]interface{}{pid}, options...)...)}
}

func (_c *AccessRequestsServiceInterface_RequestProjectAccess_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *AccessRequestsServiceInterface_RequestProjectAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *AccessRequestsServiceInterface_RequestProjectAccess_Call) Return(_a0 *gitlab.AccessRequest, _a1 *gitlab.Response, _a2 error) *AccessRequestsServiceInterface_RequestProjectAccess_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessRequestsServiceInterface_RequestProjectAccess_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.AccessRequest, *gitlab.Response, error)) *AccessRequestsServiceInterface_RequestProjectAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessRequestsServiceInterface creates a new instance of AccessRequestsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessRequestsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessRequestsServiceInterface {
	mock := &AccessRequestsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
