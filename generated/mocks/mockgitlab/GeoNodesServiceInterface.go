// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GeoNodesServiceInterface is an autogenerated mock type for the GeoNodesServiceInterface type
type GeoNodesServiceInterface struct {
	mock.Mock
}

type GeoNodesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GeoNodesServiceInterface) EXPECT() *GeoNodesServiceInterface_Expecter {
	return &GeoNodesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGeoNode provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) CreateGeoNode(_a0 *gitlab.CreateGeoNodesOptions, _a1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGeoNode")
	}

	var r0 *gitlab.GeoNode
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) *gitlab.GeoNode); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GeoNode)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_CreateGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGeoNode'
type GeoNodesServiceInterface_CreateGeoNode_Call struct {
	*mock.Call
}

// CreateGeoNode is a helper method to define mock.On call
//   - _a0 *gitlab.CreateGeoNodesOptions
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) CreateGeoNode(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_CreateGeoNode_Call {
	return &GeoNodesServiceInterface_CreateGeoNode_Call{Call: _e.mock.On("CreateGeoNode",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_CreateGeoNode_Call) Run(run func(_a0 *gitlab.CreateGeoNodesOptions, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_CreateGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CreateGeoNodesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_CreateGeoNode_Call) Return(_a0 *gitlab.GeoNode, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_CreateGeoNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_CreateGeoNode_Call) RunAndReturn(run func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *GeoNodesServiceInterface_CreateGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGeoNode provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) DeleteGeoNode(_a0 int, _a1 ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGeoNode")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeoNodesServiceInterface_DeleteGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGeoNode'
type GeoNodesServiceInterface_DeleteGeoNode_Call struct {
	*mock.Call
}

// DeleteGeoNode is a helper method to define mock.On call
//   - _a0 int
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) DeleteGeoNode(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_DeleteGeoNode_Call {
	return &GeoNodesServiceInterface_DeleteGeoNode_Call{Call: _e.mock.On("DeleteGeoNode",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_DeleteGeoNode_Call) Run(run func(_a0 int, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_DeleteGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_DeleteGeoNode_Call) Return(_a0 *gitlab.Response, _a1 error) *GeoNodesServiceInterface_DeleteGeoNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeoNodesServiceInterface_DeleteGeoNode_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GeoNodesServiceInterface_DeleteGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// EditGeoNode provides a mock function with given fields: _a0, _a1, _a2
func (_m *GeoNodesServiceInterface) EditGeoNode(_a0 int, _a1 *gitlab.UpdateGeoNodesOptions, _a2 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditGeoNode")
	}

	var r0 *gitlab.GeoNode
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) *gitlab.GeoNode); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GeoNode)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1, _a2...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_EditGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditGeoNode'
type GeoNodesServiceInterface_EditGeoNode_Call struct {
	*mock.Call
}

// EditGeoNode is a helper method to define mock.On call
//   - _a0 int
//   - _a1 *gitlab.UpdateGeoNodesOptions
//   - _a2 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) EditGeoNode(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *GeoNodesServiceInterface_EditGeoNode_Call {
	return &GeoNodesServiceInterface_EditGeoNode_Call{Call: _e.mock.On("EditGeoNode",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *GeoNodesServiceInterface_EditGeoNode_Call) Run(run func(_a0 int, _a1 *gitlab.UpdateGeoNodesOptions, _a2 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_EditGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.UpdateGeoNodesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_EditGeoNode_Call) Return(_a0 *gitlab.GeoNode, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_EditGeoNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_EditGeoNode_Call) RunAndReturn(run func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *GeoNodesServiceInterface_EditGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeoNode provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) GetGeoNode(_a0 int, _a1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGeoNode")
	}

	var r0 *gitlab.GeoNode
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.GeoNode); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GeoNode)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_GetGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeoNode'
type GeoNodesServiceInterface_GetGeoNode_Call struct {
	*mock.Call
}

// GetGeoNode is a helper method to define mock.On call
//   - _a0 int
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) GetGeoNode(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_GetGeoNode_Call {
	return &GeoNodesServiceInterface_GetGeoNode_Call{Call: _e.mock.On("GetGeoNode",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_GetGeoNode_Call) Run(run func(_a0 int, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_GetGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_GetGeoNode_Call) Return(_a0 *gitlab.GeoNode, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_GetGeoNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_GetGeoNode_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *GeoNodesServiceInterface_GetGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// ListGeoNodes provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) ListGeoNodes(_a0 *gitlab.ListGeoNodesOptions, _a1 ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGeoNodes")
	}

	var r0 []*gitlab.GeoNode
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) []*gitlab.GeoNode); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GeoNode)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_ListGeoNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGeoNodes'
type GeoNodesServiceInterface_ListGeoNodes_Call struct {
	*mock.Call
}

// ListGeoNodes is a helper method to define mock.On call
//   - _a0 *gitlab.ListGeoNodesOptions
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) ListGeoNodes(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_ListGeoNodes_Call {
	return &GeoNodesServiceInterface_ListGeoNodes_Call{Call: _e.mock.On("ListGeoNodes",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_ListGeoNodes_Call) Run(run func(_a0 *gitlab.ListGeoNodesOptions, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_ListGeoNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListGeoNodesOptions), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_ListGeoNodes_Call) Return(_a0 []*gitlab.GeoNode, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_ListGeoNodes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_ListGeoNodes_Call) RunAndReturn(run func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error)) *GeoNodesServiceInterface_ListGeoNodes_Call {
	_c.Call.Return(run)
	return _c
}

// RepairGeoNode provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) RepairGeoNode(_a0 int, _a1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepairGeoNode")
	}

	var r0 *gitlab.GeoNode
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.GeoNode); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GeoNode)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_RepairGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepairGeoNode'
type GeoNodesServiceInterface_RepairGeoNode_Call struct {
	*mock.Call
}

// RepairGeoNode is a helper method to define mock.On call
//   - _a0 int
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) RepairGeoNode(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_RepairGeoNode_Call {
	return &GeoNodesServiceInterface_RepairGeoNode_Call{Call: _e.mock.On("RepairGeoNode",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_RepairGeoNode_Call) Run(run func(_a0 int, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_RepairGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_RepairGeoNode_Call) Return(_a0 *gitlab.GeoNode, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_RepairGeoNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_RepairGeoNode_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *GeoNodesServiceInterface_RepairGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveStatusOfAllGeoNodes provides a mock function with given fields: _a0
func (_m *GeoNodesServiceInterface) RetrieveStatusOfAllGeoNodes(_a0 ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStatusOfAllGeoNodes")
	}

	var r0 []*gitlab.GeoNodeStatus
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) []*gitlab.GeoNodeStatus); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GeoNodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveStatusOfAllGeoNodes'
type GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call struct {
	*mock.Call
}

// RetrieveStatusOfAllGeoNodes is a helper method to define mock.On call
//   - _a0 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) RetrieveStatusOfAllGeoNodes(_a0 ...interface{}) *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call {
	return &GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call{Call: _e.mock.On("RetrieveStatusOfAllGeoNodes",
		append([]interface{}{}, _a0...)...)}
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call) Run(run func(_a0 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call) Return(_a0 []*gitlab.GeoNodeStatus, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error)) *GeoNodesServiceInterface_RetrieveStatusOfAllGeoNodes_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveStatusOfGeoNode provides a mock function with given fields: _a0, _a1
func (_m *GeoNodesServiceInterface) RetrieveStatusOfGeoNode(_a0 int, _a1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveStatusOfGeoNode")
	}

	var r0 *gitlab.GeoNodeStatus
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.GeoNodeStatus); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GeoNodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(_a0, _a1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveStatusOfGeoNode'
type GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call struct {
	*mock.Call
}

// RetrieveStatusOfGeoNode is a helper method to define mock.On call
//   - _a0 int
//   - _a1 ...gitlab.RequestOptionFunc
func (_e *GeoNodesServiceInterface_Expecter) RetrieveStatusOfGeoNode(_a0 interface{}, _a1 ...interface{}) *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call {
	return &GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call{Call: _e.mock.On("RetrieveStatusOfGeoNode",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call) Run(run func(_a0 int, _a1 ...gitlab.RequestOptionFunc)) *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call) Return(_a0 *gitlab.GeoNodeStatus, _a1 *gitlab.Response, _a2 error) *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error)) *GeoNodesServiceInterface_RetrieveStatusOfGeoNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeoNodesServiceInterface creates a new instance of GeoNodesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoNodesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoNodesServiceInterface {
	mock := &GeoNodesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
