// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// RepositoryFilesServiceInterface is an autogenerated mock type for the RepositoryFilesServiceInterface type
type RepositoryFilesServiceInterface struct {
	mock.Mock
}

type RepositoryFilesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryFilesServiceInterface) EXPECT() *RepositoryFilesServiceInterface_Expecter {
	return &RepositoryFilesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) CreateFile(pid interface{}, fileName string, opt *gitlab.CreateFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 *gitlab.FileInfo
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.CreateFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.CreateFileOptions, ...gitlab.RequestOptionFunc) *gitlab.FileInfo); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.CreateFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.CreateFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type RepositoryFilesServiceInterface_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.CreateFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) CreateFile(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_CreateFile_Call {
	return &RepositoryFilesServiceInterface_CreateFile_Call{Call: _e.mock.On("CreateFile",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_CreateFile_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.CreateFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.CreateFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_CreateFile_Call) Return(_a0 *gitlab.FileInfo, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_CreateFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_CreateFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.CreateFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error)) *RepositoryFilesServiceInterface_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) DeleteFile(pid interface{}, fileName string, opt *gitlab.DeleteFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.DeleteFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.DeleteFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.DeleteFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryFilesServiceInterface_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type RepositoryFilesServiceInterface_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.DeleteFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) DeleteFile(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_DeleteFile_Call {
	return &RepositoryFilesServiceInterface_DeleteFile_Call{Call: _e.mock.On("DeleteFile",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_DeleteFile_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.DeleteFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.DeleteFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_DeleteFile_Call) Return(_a0 *gitlab.Response, _a1 error) *RepositoryFilesServiceInterface_DeleteFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryFilesServiceInterface_DeleteFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.DeleteFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *RepositoryFilesServiceInterface_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) GetFile(pid interface{}, fileName string, opt *gitlab.GetFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *gitlab.File
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileOptions, ...gitlab.RequestOptionFunc) *gitlab.File); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.File)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type RepositoryFilesServiceInterface_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.GetFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) GetFile(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_GetFile_Call {
	return &RepositoryFilesServiceInterface_GetFile_Call{Call: _e.mock.On("GetFile",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_GetFile_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.GetFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFile_Call) Return(_a0 *gitlab.File, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_GetFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)) *RepositoryFilesServiceInterface_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileBlame provides a mock function with given fields: pid, file, opt, options
func (_m *RepositoryFilesServiceInterface) GetFileBlame(pid interface{}, file string, opt *gitlab.GetFileBlameOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.FileBlameRange, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, file, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFileBlame")
	}

	var r0 []*gitlab.FileBlameRange
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileBlameOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FileBlameRange, *gitlab.Response, error)); ok {
		return rf(pid, file, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileBlameOptions, ...gitlab.RequestOptionFunc) []*gitlab.FileBlameRange); ok {
		r0 = rf(pid, file, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.FileBlameRange)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetFileBlameOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, file, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetFileBlameOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, file, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_GetFileBlame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileBlame'
type RepositoryFilesServiceInterface_GetFileBlame_Call struct {
	*mock.Call
}

// GetFileBlame is a helper method to define mock.On call
//   - pid interface{}
//   - file string
//   - opt *gitlab.GetFileBlameOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) GetFileBlame(pid interface{}, file interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_GetFileBlame_Call {
	return &RepositoryFilesServiceInterface_GetFileBlame_Call{Call: _e.mock.On("GetFileBlame",
		append([]interface{}{pid, file, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_GetFileBlame_Call) Run(run func(pid interface{}, file string, opt *gitlab.GetFileBlameOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_GetFileBlame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetFileBlameOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFileBlame_Call) Return(_a0 []*gitlab.FileBlameRange, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_GetFileBlame_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFileBlame_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetFileBlameOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FileBlameRange, *gitlab.Response, error)) *RepositoryFilesServiceInterface_GetFileBlame_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileMetaData provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) GetFileMetaData(pid interface{}, fileName string, opt *gitlab.GetFileMetaDataOptions, options ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFileMetaData")
	}

	var r0 *gitlab.File
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileMetaDataOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetFileMetaDataOptions, ...gitlab.RequestOptionFunc) *gitlab.File); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.File)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetFileMetaDataOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetFileMetaDataOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_GetFileMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileMetaData'
type RepositoryFilesServiceInterface_GetFileMetaData_Call struct {
	*mock.Call
}

// GetFileMetaData is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.GetFileMetaDataOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) GetFileMetaData(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_GetFileMetaData_Call {
	return &RepositoryFilesServiceInterface_GetFileMetaData_Call{Call: _e.mock.On("GetFileMetaData",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_GetFileMetaData_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.GetFileMetaDataOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_GetFileMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetFileMetaDataOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFileMetaData_Call) Return(_a0 *gitlab.File, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_GetFileMetaData_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetFileMetaData_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetFileMetaDataOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)) *RepositoryFilesServiceInterface_GetFileMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) GetRawFile(pid interface{}, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRawFile")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_GetRawFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawFile'
type RepositoryFilesServiceInterface_GetRawFile_Call struct {
	*mock.Call
}

// GetRawFile is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.GetRawFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) GetRawFile(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_GetRawFile_Call {
	return &RepositoryFilesServiceInterface_GetRawFile_Call{Call: _e.mock.On("GetRawFile",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_GetRawFile_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_GetRawFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetRawFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetRawFile_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_GetRawFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetRawFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *RepositoryFilesServiceInterface_GetRawFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawFileMetaData provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) GetRawFileMetaData(pid interface{}, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRawFileMetaData")
	}

	var r0 *gitlab.File
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) *gitlab.File); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.File)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_GetRawFileMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawFileMetaData'
type RepositoryFilesServiceInterface_GetRawFileMetaData_Call struct {
	*mock.Call
}

// GetRawFileMetaData is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.GetRawFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) GetRawFileMetaData(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_GetRawFileMetaData_Call {
	return &RepositoryFilesServiceInterface_GetRawFileMetaData_Call{Call: _e.mock.On("GetRawFileMetaData",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_GetRawFileMetaData_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_GetRawFileMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.GetRawFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetRawFileMetaData_Call) Return(_a0 *gitlab.File, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_GetRawFileMetaData_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_GetRawFileMetaData_Call) RunAndReturn(run func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.File, *gitlab.Response, error)) *RepositoryFilesServiceInterface_GetRawFileMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFilesServiceInterface) UpdateFile(pid interface{}, fileName string, opt *gitlab.UpdateFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFile")
	}

	var r0 *gitlab.FileInfo
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateFileOptions, ...gitlab.RequestOptionFunc) *gitlab.FileInfo); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RepositoryFilesServiceInterface_UpdateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFile'
type RepositoryFilesServiceInterface_UpdateFile_Call struct {
	*mock.Call
}

// UpdateFile is a helper method to define mock.On call
//   - pid interface{}
//   - fileName string
//   - opt *gitlab.UpdateFileOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *RepositoryFilesServiceInterface_Expecter) UpdateFile(pid interface{}, fileName interface{}, opt interface{}, options ...interface{}) *RepositoryFilesServiceInterface_UpdateFile_Call {
	return &RepositoryFilesServiceInterface_UpdateFile_Call{Call: _e.mock.On("UpdateFile",
		append([]interface{}{pid, fileName, opt}, options...)...)}
}

func (_c *RepositoryFilesServiceInterface_UpdateFile_Call) Run(run func(pid interface{}, fileName string, opt *gitlab.UpdateFileOptions, options ...gitlab.RequestOptionFunc)) *RepositoryFilesServiceInterface_UpdateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateFileOptions), variadicArgs...)
	})
	return _c
}

func (_c *RepositoryFilesServiceInterface_UpdateFile_Call) Return(_a0 *gitlab.FileInfo, _a1 *gitlab.Response, _a2 error) *RepositoryFilesServiceInterface_UpdateFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryFilesServiceInterface_UpdateFile_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.FileInfo, *gitlab.Response, error)) *RepositoryFilesServiceInterface_UpdateFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryFilesServiceInterface creates a new instance of RepositoryFilesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryFilesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryFilesServiceInterface {
	mock := &RepositoryFilesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
