// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// MergeTrainsServiceInterface is an autogenerated mock type for the MergeTrainsServiceInterface type
type MergeTrainsServiceInterface struct {
	mock.Mock
}

type MergeTrainsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MergeTrainsServiceInterface) EXPECT() *MergeTrainsServiceInterface_Expecter {
	return &MergeTrainsServiceInterface_Expecter{mock: &_m.Mock}
}

// AddMergeRequestToMergeTrain provides a mock function with given fields: pid, mergeRequest, opts, options
func (_m *MergeTrainsServiceInterface) AddMergeRequestToMergeTrain(pid interface{}, mergeRequest int, opts *gitlab.AddMergeRequestToMergeTrainOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddMergeRequestToMergeTrain")
	}

	var r0 []*gitlab.MergeTrain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeTrain); ok {
		r0 = rf(pid, mergeRequest, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeTrain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mergeRequest, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mergeRequest, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMergeRequestToMergeTrain'
type MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call struct {
	*mock.Call
}

// AddMergeRequestToMergeTrain is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opts *gitlab.AddMergeRequestToMergeTrainOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeTrainsServiceInterface_Expecter) AddMergeRequestToMergeTrain(pid interface{}, mergeRequest interface{}, opts interface{}, options ...interface{}) *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call {
	return &MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call{Call: _e.mock.On("AddMergeRequestToMergeTrain",
		append([]interface{}{pid, mergeRequest, opts}, options...)...)}
}

func (_c *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call) Run(run func(pid interface{}, mergeRequest int, opts *gitlab.AddMergeRequestToMergeTrainOptions, options ...gitlab.RequestOptionFunc)) *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.AddMergeRequestToMergeTrainOptions), variadicArgs...)
	})
	return _c
}

func (_c *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call) Return(_a0 []*gitlab.MergeTrain, _a1 *gitlab.Response, _a2 error) *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call) RunAndReturn(run func(interface{}, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MergeTrainsServiceInterface_AddMergeRequestToMergeTrain_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestOnAMergeTrain provides a mock function with given fields: pid, mergeRequest, options
func (_m *MergeTrainsServiceInterface) GetMergeRequestOnAMergeTrain(pid interface{}, mergeRequest int, options ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestOnAMergeTrain")
	}

	var r0 *gitlab.MergeTrain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.MergeTrain); ok {
		r0 = rf(pid, mergeRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeTrain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mergeRequest, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mergeRequest, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestOnAMergeTrain'
type MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call struct {
	*mock.Call
}

// GetMergeRequestOnAMergeTrain is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeTrainsServiceInterface_Expecter) GetMergeRequestOnAMergeTrain(pid interface{}, mergeRequest interface{}, options ...interface{}) *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call {
	return &MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call{Call: _e.mock.On("GetMergeRequestOnAMergeTrain",
		append([]interface{}{pid, mergeRequest}, options...)...)}
}

func (_c *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call) Run(run func(pid interface{}, mergeRequest int, options ...gitlab.RequestOptionFunc)) *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call) Return(_a0 *gitlab.MergeTrain, _a1 *gitlab.Response, _a2 error) *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error)) *MergeTrainsServiceInterface_GetMergeRequestOnAMergeTrain_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeRequestInMergeTrain provides a mock function with given fields: pid, targetBranch, opts, options
func (_m *MergeTrainsServiceInterface) ListMergeRequestInMergeTrain(pid interface{}, targetBranch string, opts *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, targetBranch, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMergeRequestInMergeTrain")
	}

	var r0 []*gitlab.MergeTrain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)); ok {
		return rf(pid, targetBranch, opts, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeTrain); ok {
		r0 = rf(pid, targetBranch, opts, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeTrain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, targetBranch, opts, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, targetBranch, opts, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeRequestInMergeTrain'
type MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call struct {
	*mock.Call
}

// ListMergeRequestInMergeTrain is a helper method to define mock.On call
//   - pid interface{}
//   - targetBranch string
//   - opts *gitlab.ListMergeTrainsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeTrainsServiceInterface_Expecter) ListMergeRequestInMergeTrain(pid interface{}, targetBranch interface{}, opts interface{}, options ...interface{}) *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call {
	return &MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call{Call: _e.mock.On("ListMergeRequestInMergeTrain",
		append([]interface{}{pid, targetBranch, opts}, options...)...)}
}

func (_c *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call) Run(run func(pid interface{}, targetBranch string, opts *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc)) *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.ListMergeTrainsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call) Return(_a0 []*gitlab.MergeTrain, _a1 *gitlab.Response, _a2 error) *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call) RunAndReturn(run func(interface{}, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MergeTrainsServiceInterface_ListMergeRequestInMergeTrain_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMergeTrains provides a mock function with given fields: pid, opt, options
func (_m *MergeTrainsServiceInterface) ListProjectMergeTrains(pid interface{}, opt *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMergeTrains")
	}

	var r0 []*gitlab.MergeTrain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeTrain); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeTrain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergeTrainsServiceInterface_ListProjectMergeTrains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMergeTrains'
type MergeTrainsServiceInterface_ListProjectMergeTrains_Call struct {
	*mock.Call
}

// ListProjectMergeTrains is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListMergeTrainsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MergeTrainsServiceInterface_Expecter) ListProjectMergeTrains(pid interface{}, opt interface{}, options ...interface{}) *MergeTrainsServiceInterface_ListProjectMergeTrains_Call {
	return &MergeTrainsServiceInterface_ListProjectMergeTrains_Call{Call: _e.mock.On("ListProjectMergeTrains",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MergeTrainsServiceInterface_ListProjectMergeTrains_Call) Run(run func(pid interface{}, opt *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc)) *MergeTrainsServiceInterface_ListProjectMergeTrains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListMergeTrainsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MergeTrainsServiceInterface_ListProjectMergeTrains_Call) Return(_a0 []*gitlab.MergeTrain, _a1 *gitlab.Response, _a2 error) *MergeTrainsServiceInterface_ListProjectMergeTrains_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MergeTrainsServiceInterface_ListProjectMergeTrains_Call) RunAndReturn(run func(interface{}, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MergeTrainsServiceInterface_ListProjectMergeTrains_Call {
	_c.Call.Return(run)
	return _c
}

// NewMergeTrainsServiceInterface creates a new instance of MergeTrainsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeTrainsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeTrainsServiceInterface {
	mock := &MergeTrainsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
