// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupLabelsServiceInterface is an autogenerated mock type for the GroupLabelsServiceInterface type
type GroupLabelsServiceInterface struct {
	mock.Mock
}

type GroupLabelsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupLabelsServiceInterface) EXPECT() *GroupLabelsServiceInterface_Expecter {
	return &GroupLabelsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupLabel provides a mock function with given fields: gid, opt, options
func (_m *GroupLabelsServiceInterface) CreateGroupLabel(gid interface{}, opt *gitlab.CreateGroupLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupLabel")
	}

	var r0 *gitlab.GroupLabel
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupLabel); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupLabel)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupLabelsServiceInterface_CreateGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupLabel'
type GroupLabelsServiceInterface_CreateGroupLabel_Call struct {
	*mock.Call
}

// CreateGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) CreateGroupLabel(gid interface{}, opt interface{}, options ...interface{}) *GroupLabelsServiceInterface_CreateGroupLabel_Call {
	return &GroupLabelsServiceInterface_CreateGroupLabel_Call{Call: _e.mock.On("CreateGroupLabel",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_CreateGroupLabel_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupLabelOptions, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_CreateGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_CreateGroupLabel_Call) Return(_a0 *gitlab.GroupLabel, _a1 *gitlab.Response, _a2 error) *GroupLabelsServiceInterface_CreateGroupLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupLabelsServiceInterface_CreateGroupLabel_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)) *GroupLabelsServiceInterface_CreateGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupLabel provides a mock function with given fields: gid, lid, opt, options
func (_m *GroupLabelsServiceInterface) DeleteGroupLabel(gid interface{}, lid interface{}, opt *gitlab.DeleteGroupLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, lid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.DeleteGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, lid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.DeleteGroupLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, lid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, *gitlab.DeleteGroupLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, lid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupLabelsServiceInterface_DeleteGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupLabel'
type GroupLabelsServiceInterface_DeleteGroupLabel_Call struct {
	*mock.Call
}

// DeleteGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - lid interface{}
//   - opt *gitlab.DeleteGroupLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) DeleteGroupLabel(gid interface{}, lid interface{}, opt interface{}, options ...interface{}) *GroupLabelsServiceInterface_DeleteGroupLabel_Call {
	return &GroupLabelsServiceInterface_DeleteGroupLabel_Call{Call: _e.mock.On("DeleteGroupLabel",
		append([]interface{}{gid, lid, opt}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_DeleteGroupLabel_Call) Run(run func(gid interface{}, lid interface{}, opt *gitlab.DeleteGroupLabelOptions, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_DeleteGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), args[2].(*gitlab.DeleteGroupLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_DeleteGroupLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupLabelsServiceInterface_DeleteGroupLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupLabelsServiceInterface_DeleteGroupLabel_Call) RunAndReturn(run func(interface{}, interface{}, *gitlab.DeleteGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupLabelsServiceInterface_DeleteGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupLabel provides a mock function with given fields: gid, lid, options
func (_m *GroupLabelsServiceInterface) GetGroupLabel(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupLabel")
	}

	var r0 *gitlab.GroupLabel
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)); ok {
		return rf(gid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.GroupLabel); ok {
		r0 = rf(gid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupLabel)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, lid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, lid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupLabelsServiceInterface_GetGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupLabel'
type GroupLabelsServiceInterface_GetGroupLabel_Call struct {
	*mock.Call
}

// GetGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) GetGroupLabel(gid interface{}, lid interface{}, options ...interface{}) *GroupLabelsServiceInterface_GetGroupLabel_Call {
	return &GroupLabelsServiceInterface_GetGroupLabel_Call{Call: _e.mock.On("GetGroupLabel",
		append([]interface{}{gid, lid}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_GetGroupLabel_Call) Run(run func(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_GetGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_GetGroupLabel_Call) Return(_a0 *gitlab.GroupLabel, _a1 *gitlab.Response, _a2 error) *GroupLabelsServiceInterface_GetGroupLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupLabelsServiceInterface_GetGroupLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)) *GroupLabelsServiceInterface_GetGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupLabels provides a mock function with given fields: gid, opt, options
func (_m *GroupLabelsServiceInterface) ListGroupLabels(gid interface{}, opt *gitlab.ListGroupLabelsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupLabel, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupLabels")
	}

	var r0 []*gitlab.GroupLabel
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupLabelsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupLabel, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupLabelsOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupLabel); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupLabel)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupLabelsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupLabelsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupLabelsServiceInterface_ListGroupLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupLabels'
type GroupLabelsServiceInterface_ListGroupLabels_Call struct {
	*mock.Call
}

// ListGroupLabels is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupLabelsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) ListGroupLabels(gid interface{}, opt interface{}, options ...interface{}) *GroupLabelsServiceInterface_ListGroupLabels_Call {
	return &GroupLabelsServiceInterface_ListGroupLabels_Call{Call: _e.mock.On("ListGroupLabels",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_ListGroupLabels_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupLabelsOptions, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_ListGroupLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupLabelsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_ListGroupLabels_Call) Return(_a0 []*gitlab.GroupLabel, _a1 *gitlab.Response, _a2 error) *GroupLabelsServiceInterface_ListGroupLabels_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupLabelsServiceInterface_ListGroupLabels_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupLabelsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupLabel, *gitlab.Response, error)) *GroupLabelsServiceInterface_ListGroupLabels_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToGroupLabel provides a mock function with given fields: gid, lid, options
func (_m *GroupLabelsServiceInterface) SubscribeToGroupLabel(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToGroupLabel")
	}

	var r0 *gitlab.GroupLabel
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)); ok {
		return rf(gid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.GroupLabel); ok {
		r0 = rf(gid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupLabel)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, lid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, lid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupLabelsServiceInterface_SubscribeToGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToGroupLabel'
type GroupLabelsServiceInterface_SubscribeToGroupLabel_Call struct {
	*mock.Call
}

// SubscribeToGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) SubscribeToGroupLabel(gid interface{}, lid interface{}, options ...interface{}) *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call {
	return &GroupLabelsServiceInterface_SubscribeToGroupLabel_Call{Call: _e.mock.On("SubscribeToGroupLabel",
		append([]interface{}{gid, lid}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call) Run(run func(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call) Return(_a0 *gitlab.GroupLabel, _a1 *gitlab.Response, _a2 error) *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)) *GroupLabelsServiceInterface_SubscribeToGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeFromGroupLabel provides a mock function with given fields: gid, lid, options
func (_m *GroupLabelsServiceInterface) UnsubscribeFromGroupLabel(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeFromGroupLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, lid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeFromGroupLabel'
type GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call struct {
	*mock.Call
}

// UnsubscribeFromGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) UnsubscribeFromGroupLabel(gid interface{}, lid interface{}, options ...interface{}) *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call {
	return &GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call{Call: _e.mock.On("UnsubscribeFromGroupLabel",
		append([]interface{}{gid, lid}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call) Run(run func(gid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupLabelsServiceInterface_UnsubscribeFromGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupLabel provides a mock function with given fields: gid, lid, opt, options
func (_m *GroupLabelsServiceInterface) UpdateGroupLabel(gid interface{}, lid interface{}, opt *gitlab.UpdateGroupLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, lid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupLabel")
	}

	var r0 *gitlab.GroupLabel
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.UpdateGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)); ok {
		return rf(gid, lid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.UpdateGroupLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupLabel); ok {
		r0 = rf(gid, lid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupLabel)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, *gitlab.UpdateGroupLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, lid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, *gitlab.UpdateGroupLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, lid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupLabelsServiceInterface_UpdateGroupLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupLabel'
type GroupLabelsServiceInterface_UpdateGroupLabel_Call struct {
	*mock.Call
}

// UpdateGroupLabel is a helper method to define mock.On call
//   - gid interface{}
//   - lid interface{}
//   - opt *gitlab.UpdateGroupLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupLabelsServiceInterface_Expecter) UpdateGroupLabel(gid interface{}, lid interface{}, opt interface{}, options ...interface{}) *GroupLabelsServiceInterface_UpdateGroupLabel_Call {
	return &GroupLabelsServiceInterface_UpdateGroupLabel_Call{Call: _e.mock.On("UpdateGroupLabel",
		append([]interface{}{gid, lid, opt}, options...)...)}
}

func (_c *GroupLabelsServiceInterface_UpdateGroupLabel_Call) Run(run func(gid interface{}, lid interface{}, opt *gitlab.UpdateGroupLabelOptions, options ...gitlab.RequestOptionFunc)) *GroupLabelsServiceInterface_UpdateGroupLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), args[2].(*gitlab.UpdateGroupLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupLabelsServiceInterface_UpdateGroupLabel_Call) Return(_a0 *gitlab.GroupLabel, _a1 *gitlab.Response, _a2 error) *GroupLabelsServiceInterface_UpdateGroupLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupLabelsServiceInterface_UpdateGroupLabel_Call) RunAndReturn(run func(interface{}, interface{}, *gitlab.UpdateGroupLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupLabel, *gitlab.Response, error)) *GroupLabelsServiceInterface_UpdateGroupLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupLabelsServiceInterface creates a new instance of GroupLabelsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupLabelsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupLabelsServiceInterface {
	mock := &GroupLabelsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
