// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// MilestonesServiceInterface is an autogenerated mock type for the MilestonesServiceInterface type
type MilestonesServiceInterface struct {
	mock.Mock
}

type MilestonesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MilestonesServiceInterface) EXPECT() *MilestonesServiceInterface_Expecter {
	return &MilestonesServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateMilestone provides a mock function with given fields: pid, opt, options
func (_m *MilestonesServiceInterface) CreateMilestone(pid interface{}, opt *gitlab.CreateMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMilestone")
	}

	var r0 *gitlab.Milestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Milestone); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Milestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateMilestoneOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_CreateMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMilestone'
type MilestonesServiceInterface_CreateMilestone_Call struct {
	*mock.Call
}

// CreateMilestone is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateMilestoneOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) CreateMilestone(pid interface{}, opt interface{}, options ...interface{}) *MilestonesServiceInterface_CreateMilestone_Call {
	return &MilestonesServiceInterface_CreateMilestone_Call{Call: _e.mock.On("CreateMilestone",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MilestonesServiceInterface_CreateMilestone_Call) Run(run func(pid interface{}, opt *gitlab.CreateMilestoneOptions, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_CreateMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateMilestoneOptions), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_CreateMilestone_Call) Return(_a0 *gitlab.Milestone, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_CreateMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_CreateMilestone_Call) RunAndReturn(run func(interface{}, *gitlab.CreateMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)) *MilestonesServiceInterface_CreateMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMilestone provides a mock function with given fields: pid, milestone, options
func (_m *MilestonesServiceInterface) DeleteMilestone(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMilestone")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, milestone, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, milestone, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, milestone, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MilestonesServiceInterface_DeleteMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMilestone'
type MilestonesServiceInterface_DeleteMilestone_Call struct {
	*mock.Call
}

// DeleteMilestone is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) DeleteMilestone(pid interface{}, milestone interface{}, options ...interface{}) *MilestonesServiceInterface_DeleteMilestone_Call {
	return &MilestonesServiceInterface_DeleteMilestone_Call{Call: _e.mock.On("DeleteMilestone",
		append([]interface{}{pid, milestone}, options...)...)}
}

func (_c *MilestonesServiceInterface_DeleteMilestone_Call) Run(run func(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_DeleteMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_DeleteMilestone_Call) Return(_a0 *gitlab.Response, _a1 error) *MilestonesServiceInterface_DeleteMilestone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MilestonesServiceInterface_DeleteMilestone_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MilestonesServiceInterface_DeleteMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// GetMilestone provides a mock function with given fields: pid, milestone, options
func (_m *MilestonesServiceInterface) GetMilestone(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMilestone")
	}

	var r0 *gitlab.Milestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)); ok {
		return rf(pid, milestone, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Milestone); ok {
		r0 = rf(pid, milestone, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Milestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, milestone, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, milestone, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_GetMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMilestone'
type MilestonesServiceInterface_GetMilestone_Call struct {
	*mock.Call
}

// GetMilestone is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) GetMilestone(pid interface{}, milestone interface{}, options ...interface{}) *MilestonesServiceInterface_GetMilestone_Call {
	return &MilestonesServiceInterface_GetMilestone_Call{Call: _e.mock.On("GetMilestone",
		append([]interface{}{pid, milestone}, options...)...)}
}

func (_c *MilestonesServiceInterface_GetMilestone_Call) Run(run func(pid interface{}, milestone int, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_GetMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestone_Call) Return(_a0 *gitlab.Milestone, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_GetMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestone_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)) *MilestonesServiceInterface_GetMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// GetMilestoneIssues provides a mock function with given fields: pid, milestone, opt, options
func (_m *MilestonesServiceInterface) GetMilestoneIssues(pid interface{}, milestone int, opt *gitlab.GetMilestoneIssuesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMilestoneIssues")
	}

	var r0 []*gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)); ok {
		return rf(pid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Issue); ok {
		r0 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_GetMilestoneIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMilestoneIssues'
type MilestonesServiceInterface_GetMilestoneIssues_Call struct {
	*mock.Call
}

// GetMilestoneIssues is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - opt *gitlab.GetMilestoneIssuesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) GetMilestoneIssues(pid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *MilestonesServiceInterface_GetMilestoneIssues_Call {
	return &MilestonesServiceInterface_GetMilestoneIssues_Call{Call: _e.mock.On("GetMilestoneIssues",
		append([]interface{}{pid, milestone, opt}, options...)...)}
}

func (_c *MilestonesServiceInterface_GetMilestoneIssues_Call) Run(run func(pid interface{}, milestone int, opt *gitlab.GetMilestoneIssuesOptions, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_GetMilestoneIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.GetMilestoneIssuesOptions), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestoneIssues_Call) Return(_a0 []*gitlab.Issue, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_GetMilestoneIssues_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestoneIssues_Call) RunAndReturn(run func(interface{}, int, *gitlab.GetMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *MilestonesServiceInterface_GetMilestoneIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetMilestoneMergeRequests provides a mock function with given fields: pid, milestone, opt, options
func (_m *MilestonesServiceInterface) GetMilestoneMergeRequests(pid interface{}, milestone int, opt *gitlab.GetMilestoneMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMilestoneMergeRequests")
	}

	var r0 []*gitlab.BasicMergeRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)); ok {
		return rf(pid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) []*gitlab.BasicMergeRequest); ok {
		r0 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BasicMergeRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_GetMilestoneMergeRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMilestoneMergeRequests'
type MilestonesServiceInterface_GetMilestoneMergeRequests_Call struct {
	*mock.Call
}

// GetMilestoneMergeRequests is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - opt *gitlab.GetMilestoneMergeRequestsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) GetMilestoneMergeRequests(pid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *MilestonesServiceInterface_GetMilestoneMergeRequests_Call {
	return &MilestonesServiceInterface_GetMilestoneMergeRequests_Call{Call: _e.mock.On("GetMilestoneMergeRequests",
		append([]interface{}{pid, milestone, opt}, options...)...)}
}

func (_c *MilestonesServiceInterface_GetMilestoneMergeRequests_Call) Run(run func(pid interface{}, milestone int, opt *gitlab.GetMilestoneMergeRequestsOptions, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_GetMilestoneMergeRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.GetMilestoneMergeRequestsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestoneMergeRequests_Call) Return(_a0 []*gitlab.BasicMergeRequest, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_GetMilestoneMergeRequests_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_GetMilestoneMergeRequests_Call) RunAndReturn(run func(interface{}, int, *gitlab.GetMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)) *MilestonesServiceInterface_GetMilestoneMergeRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListMilestones provides a mock function with given fields: pid, opt, options
func (_m *MilestonesServiceInterface) ListMilestones(pid interface{}, opt *gitlab.ListMilestonesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMilestones")
	}

	var r0 []*gitlab.Milestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListMilestonesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Milestone); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Milestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListMilestonesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListMilestonesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_ListMilestones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMilestones'
type MilestonesServiceInterface_ListMilestones_Call struct {
	*mock.Call
}

// ListMilestones is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListMilestonesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) ListMilestones(pid interface{}, opt interface{}, options ...interface{}) *MilestonesServiceInterface_ListMilestones_Call {
	return &MilestonesServiceInterface_ListMilestones_Call{Call: _e.mock.On("ListMilestones",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MilestonesServiceInterface_ListMilestones_Call) Run(run func(pid interface{}, opt *gitlab.ListMilestonesOptions, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_ListMilestones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListMilestonesOptions), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_ListMilestones_Call) Return(_a0 []*gitlab.Milestone, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_ListMilestones_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_ListMilestones_Call) RunAndReturn(run func(interface{}, *gitlab.ListMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Milestone, *gitlab.Response, error)) *MilestonesServiceInterface_ListMilestones_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMilestone provides a mock function with given fields: pid, milestone, opt, options
func (_m *MilestonesServiceInterface) UpdateMilestone(pid interface{}, milestone int, opt *gitlab.UpdateMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, milestone, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMilestone")
	}

	var r0 *gitlab.Milestone
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)); ok {
		return rf(pid, milestone, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Milestone); ok {
		r0 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Milestone)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateMilestoneOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, milestone, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateMilestoneOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, milestone, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MilestonesServiceInterface_UpdateMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMilestone'
type MilestonesServiceInterface_UpdateMilestone_Call struct {
	*mock.Call
}

// UpdateMilestone is a helper method to define mock.On call
//   - pid interface{}
//   - milestone int
//   - opt *gitlab.UpdateMilestoneOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MilestonesServiceInterface_Expecter) UpdateMilestone(pid interface{}, milestone interface{}, opt interface{}, options ...interface{}) *MilestonesServiceInterface_UpdateMilestone_Call {
	return &MilestonesServiceInterface_UpdateMilestone_Call{Call: _e.mock.On("UpdateMilestone",
		append([]interface{}{pid, milestone, opt}, options...)...)}
}

func (_c *MilestonesServiceInterface_UpdateMilestone_Call) Run(run func(pid interface{}, milestone int, opt *gitlab.UpdateMilestoneOptions, options ...gitlab.RequestOptionFunc)) *MilestonesServiceInterface_UpdateMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.UpdateMilestoneOptions), variadicArgs...)
	})
	return _c
}

func (_c *MilestonesServiceInterface_UpdateMilestone_Call) Return(_a0 *gitlab.Milestone, _a1 *gitlab.Response, _a2 error) *MilestonesServiceInterface_UpdateMilestone_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MilestonesServiceInterface_UpdateMilestone_Call) RunAndReturn(run func(interface{}, int, *gitlab.UpdateMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.Milestone, *gitlab.Response, error)) *MilestonesServiceInterface_UpdateMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// NewMilestonesServiceInterface creates a new instance of MilestonesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMilestonesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MilestonesServiceInterface {
	mock := &MilestonesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
