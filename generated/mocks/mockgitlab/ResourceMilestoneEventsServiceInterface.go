// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ResourceMilestoneEventsServiceInterface is an autogenerated mock type for the ResourceMilestoneEventsServiceInterface type
type ResourceMilestoneEventsServiceInterface struct {
	mock.Mock
}

type ResourceMilestoneEventsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceMilestoneEventsServiceInterface) EXPECT() *ResourceMilestoneEventsServiceInterface_Expecter {
	return &ResourceMilestoneEventsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetIssueMilestoneEvent provides a mock function with given fields: pid, issue, event, options
func (_m *ResourceMilestoneEventsServiceInterface) GetIssueMilestoneEvent(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueMilestoneEvent")
	}

	var r0 *gitlab.MilestoneEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.MilestoneEvent); ok {
		r0 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MilestoneEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueMilestoneEvent'
type ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call struct {
	*mock.Call
}

// GetIssueMilestoneEvent is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceMilestoneEventsServiceInterface_Expecter) GetIssueMilestoneEvent(pid interface{}, issue interface{}, event interface{}, options ...interface{}) *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call {
	return &ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call{Call: _e.mock.On("GetIssueMilestoneEvent",
		append([]interface{}{pid, issue, event}, options...)...)}
}

func (_c *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call) Run(run func(pid interface{}, issue int, event int, options ...gitlab.RequestOptionFunc)) *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call) Return(_a0 *gitlab.MilestoneEvent, _a1 *gitlab.Response, _a2 error) *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *ResourceMilestoneEventsServiceInterface_GetIssueMilestoneEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestMilestoneEvent provides a mock function with given fields: pid, request, event, options
func (_m *ResourceMilestoneEventsServiceInterface) GetMergeRequestMilestoneEvent(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestMilestoneEvent")
	}

	var r0 *gitlab.MilestoneEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, event, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.MilestoneEvent); ok {
		r0 = rf(pid, request, event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MilestoneEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, event, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, event, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestMilestoneEvent'
type ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call struct {
	*mock.Call
}

// GetMergeRequestMilestoneEvent is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - event int
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceMilestoneEventsServiceInterface_Expecter) GetMergeRequestMilestoneEvent(pid interface{}, request interface{}, event interface{}, options ...interface{}) *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call {
	return &ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call{Call: _e.mock.On("GetMergeRequestMilestoneEvent",
		append([]interface{}{pid, request, event}, options...)...)}
}

func (_c *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call) Run(run func(pid interface{}, request int, event int, options ...gitlab.RequestOptionFunc)) *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call) Return(_a0 *gitlab.MilestoneEvent, _a1 *gitlab.Response, _a2 error) *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *ResourceMilestoneEventsServiceInterface_GetMergeRequestMilestoneEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueMilestoneEvents provides a mock function with given fields: pid, issue, opt, options
func (_m *ResourceMilestoneEventsServiceInterface) ListIssueMilestoneEvents(pid interface{}, issue int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueMilestoneEvents")
	}

	var r0 []*gitlab.MilestoneEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)); ok {
		return rf(pid, issue, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MilestoneEvent); ok {
		r0 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MilestoneEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueMilestoneEvents'
type ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call struct {
	*mock.Call
}

// ListIssueMilestoneEvents is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - opt *gitlab.ListMilestoneEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceMilestoneEventsServiceInterface_Expecter) ListIssueMilestoneEvents(pid interface{}, issue interface{}, opt interface{}, options ...interface{}) *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call {
	return &ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call{Call: _e.mock.On("ListIssueMilestoneEvents",
		append([]interface{}{pid, issue, opt}, options...)...)}
}

func (_c *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call) Run(run func(pid interface{}, issue int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListMilestoneEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call) Return(_a0 []*gitlab.MilestoneEvent, _a1 *gitlab.Response, _a2 error) *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *ResourceMilestoneEventsServiceInterface_ListIssueMilestoneEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeMilestoneEvents provides a mock function with given fields: pid, request, opt, options
func (_m *ResourceMilestoneEventsServiceInterface) ListMergeMilestoneEvents(pid interface{}, request int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, request, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMergeMilestoneEvents")
	}

	var r0 []*gitlab.MilestoneEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)); ok {
		return rf(pid, request, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MilestoneEvent); ok {
		r0 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MilestoneEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, request, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, request, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeMilestoneEvents'
type ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call struct {
	*mock.Call
}

// ListMergeMilestoneEvents is a helper method to define mock.On call
//   - pid interface{}
//   - request int
//   - opt *gitlab.ListMilestoneEventsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ResourceMilestoneEventsServiceInterface_Expecter) ListMergeMilestoneEvents(pid interface{}, request interface{}, opt interface{}, options ...interface{}) *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call {
	return &ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call{Call: _e.mock.On("ListMergeMilestoneEvents",
		append([]interface{}{pid, request, opt}, options...)...)}
}

func (_c *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call) Run(run func(pid interface{}, request int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc)) *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListMilestoneEventsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call) Return(_a0 []*gitlab.MilestoneEvent, _a1 *gitlab.Response, _a2 error) *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *ResourceMilestoneEventsServiceInterface_ListMergeMilestoneEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceMilestoneEventsServiceInterface creates a new instance of ResourceMilestoneEventsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceMilestoneEventsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceMilestoneEventsServiceInterface {
	mock := &ResourceMilestoneEventsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
