// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// NamespacesServiceInterface is an autogenerated mock type for the NamespacesServiceInterface type
type NamespacesServiceInterface struct {
	mock.Mock
}

type NamespacesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespacesServiceInterface) EXPECT() *NamespacesServiceInterface_Expecter {
	return &NamespacesServiceInterface_Expecter{mock: &_m.Mock}
}

// GetNamespace provides a mock function with given fields: id, options
func (_m *NamespacesServiceInterface) GetNamespace(id interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *gitlab.Namespace
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error)); ok {
		return rf(id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Namespace); ok {
		r0 = rf(id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NamespacesServiceInterface_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type NamespacesServiceInterface_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - id interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *NamespacesServiceInterface_Expecter) GetNamespace(id interface{}, options ...interface{}) *NamespacesServiceInterface_GetNamespace_Call {
	return &NamespacesServiceInterface_GetNamespace_Call{Call: _e.mock.On("GetNamespace",
		append([]interface{}{id}, options...)...)}
}

func (_c *NamespacesServiceInterface_GetNamespace_Call) Run(run func(id interface{}, options ...gitlab.RequestOptionFunc)) *NamespacesServiceInterface_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *NamespacesServiceInterface_GetNamespace_Call) Return(_a0 *gitlab.Namespace, _a1 *gitlab.Response, _a2 error) *NamespacesServiceInterface_GetNamespace_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NamespacesServiceInterface_GetNamespace_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error)) *NamespacesServiceInterface_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: opt, options
func (_m *NamespacesServiceInterface) ListNamespaces(opt *gitlab.ListNamespacesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 []*gitlab.Namespace
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Namespace); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NamespacesServiceInterface_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type NamespacesServiceInterface_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - opt *gitlab.ListNamespacesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *NamespacesServiceInterface_Expecter) ListNamespaces(opt interface{}, options ...interface{}) *NamespacesServiceInterface_ListNamespaces_Call {
	return &NamespacesServiceInterface_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces",
		append([]interface{}{opt}, options...)...)}
}

func (_c *NamespacesServiceInterface_ListNamespaces_Call) Run(run func(opt *gitlab.ListNamespacesOptions, options ...gitlab.RequestOptionFunc)) *NamespacesServiceInterface_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListNamespacesOptions), variadicArgs...)
	})
	return _c
}

func (_c *NamespacesServiceInterface_ListNamespaces_Call) Return(_a0 []*gitlab.Namespace, _a1 *gitlab.Response, _a2 error) *NamespacesServiceInterface_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NamespacesServiceInterface_ListNamespaces_Call) RunAndReturn(run func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *NamespacesServiceInterface_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// NamespaceExists provides a mock function with given fields: id, opt, options
func (_m *NamespacesServiceInterface) NamespaceExists(id interface{}, opt *gitlab.NamespaceExistsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceExists")
	}

	var r0 *gitlab.NamespaceExistance
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error)); ok {
		return rf(id, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) *gitlab.NamespaceExistance); ok {
		r0 = rf(id, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.NamespaceExistance)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(id, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(id, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NamespacesServiceInterface_NamespaceExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamespaceExists'
type NamespacesServiceInterface_NamespaceExists_Call struct {
	*mock.Call
}

// NamespaceExists is a helper method to define mock.On call
//   - id interface{}
//   - opt *gitlab.NamespaceExistsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *NamespacesServiceInterface_Expecter) NamespaceExists(id interface{}, opt interface{}, options ...interface{}) *NamespacesServiceInterface_NamespaceExists_Call {
	return &NamespacesServiceInterface_NamespaceExists_Call{Call: _e.mock.On("NamespaceExists",
		append([]interface{}{id, opt}, options...)...)}
}

func (_c *NamespacesServiceInterface_NamespaceExists_Call) Run(run func(id interface{}, opt *gitlab.NamespaceExistsOptions, options ...gitlab.RequestOptionFunc)) *NamespacesServiceInterface_NamespaceExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.NamespaceExistsOptions), variadicArgs...)
	})
	return _c
}

func (_c *NamespacesServiceInterface_NamespaceExists_Call) Return(_a0 *gitlab.NamespaceExistance, _a1 *gitlab.Response, _a2 error) *NamespacesServiceInterface_NamespaceExists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NamespacesServiceInterface_NamespaceExists_Call) RunAndReturn(run func(interface{}, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error)) *NamespacesServiceInterface_NamespaceExists_Call {
	_c.Call.Return(run)
	return _c
}

// SearchNamespace provides a mock function with given fields: query, options
func (_m *NamespacesServiceInterface) SearchNamespace(query string, options ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchNamespace")
	}

	var r0 []*gitlab.Namespace
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)); ok {
		return rf(query, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...gitlab.RequestOptionFunc) []*gitlab.Namespace); ok {
		r0 = rf(query, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(query, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(query, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NamespacesServiceInterface_SearchNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchNamespace'
type NamespacesServiceInterface_SearchNamespace_Call struct {
	*mock.Call
}

// SearchNamespace is a helper method to define mock.On call
//   - query string
//   - options ...gitlab.RequestOptionFunc
func (_e *NamespacesServiceInterface_Expecter) SearchNamespace(query interface{}, options ...interface{}) *NamespacesServiceInterface_SearchNamespace_Call {
	return &NamespacesServiceInterface_SearchNamespace_Call{Call: _e.mock.On("SearchNamespace",
		append([]interface{}{query}, options...)...)}
}

func (_c *NamespacesServiceInterface_SearchNamespace_Call) Run(run func(query string, options ...gitlab.RequestOptionFunc)) *NamespacesServiceInterface_SearchNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *NamespacesServiceInterface_SearchNamespace_Call) Return(_a0 []*gitlab.Namespace, _a1 *gitlab.Response, _a2 error) *NamespacesServiceInterface_SearchNamespace_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NamespacesServiceInterface_SearchNamespace_Call) RunAndReturn(run func(string, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *NamespacesServiceInterface_SearchNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// NewNamespacesServiceInterface creates a new instance of NamespacesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamespacesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NamespacesServiceInterface {
	mock := &NamespacesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
