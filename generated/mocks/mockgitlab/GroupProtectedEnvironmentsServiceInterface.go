// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupProtectedEnvironmentsServiceInterface is an autogenerated mock type for the GroupProtectedEnvironmentsServiceInterface type
type GroupProtectedEnvironmentsServiceInterface struct {
	mock.Mock
}

type GroupProtectedEnvironmentsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupProtectedEnvironmentsServiceInterface) EXPECT() *GroupProtectedEnvironmentsServiceInterface_Expecter {
	return &GroupProtectedEnvironmentsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupProtectedEnvironment provides a mock function with given fields: gid, environment, options
func (_m *GroupProtectedEnvironmentsServiceInterface) GetGroupProtectedEnvironment(gid interface{}, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, environment)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProtectedEnvironment")
	}

	var r0 *gitlab.GroupProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(gid, environment, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.GroupProtectedEnvironment); ok {
		r0 = rf(gid, environment, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, environment, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, environment, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupProtectedEnvironment'
type GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call struct {
	*mock.Call
}

// GetGroupProtectedEnvironment is a helper method to define mock.On call
//   - gid interface{}
//   - environment string
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupProtectedEnvironmentsServiceInterface_Expecter) GetGroupProtectedEnvironment(gid interface{}, environment interface{}, options ...interface{}) *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call {
	return &GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call{Call: _e.mock.On("GetGroupProtectedEnvironment",
		append([]interface{}{gid, environment}, options...)...)}
}

func (_c *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call) Run(run func(gid interface{}, environment string, options ...gitlab.RequestOptionFunc)) *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call) Return(_a0 *gitlab.GroupProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *GroupProtectedEnvironmentsServiceInterface_GetGroupProtectedEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProtectedEnvironments provides a mock function with given fields: gid, opt, options
func (_m *GroupProtectedEnvironmentsServiceInterface) ListGroupProtectedEnvironments(gid interface{}, opt *gitlab.ListGroupProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProtectedEnvironments")
	}

	var r0 []*gitlab.GroupProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupProtectedEnvironment); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProtectedEnvironments'
type GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call struct {
	*mock.Call
}

// ListGroupProtectedEnvironments is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupProtectedEnvironmentsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupProtectedEnvironmentsServiceInterface_Expecter) ListGroupProtectedEnvironments(gid interface{}, opt interface{}, options ...interface{}) *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call {
	return &GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call{Call: _e.mock.On("ListGroupProtectedEnvironments",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc)) *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupProtectedEnvironmentsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call) Return(_a0 []*gitlab.GroupProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *GroupProtectedEnvironmentsServiceInterface_ListGroupProtectedEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectGroupEnvironment provides a mock function with given fields: gid, opt, options
func (_m *GroupProtectedEnvironmentsServiceInterface) ProtectGroupEnvironment(gid interface{}, opt *gitlab.ProtectGroupEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProtectGroupEnvironment")
	}

	var r0 *gitlab.GroupProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupProtectedEnvironment); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectGroupEnvironment'
type GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call struct {
	*mock.Call
}

// ProtectGroupEnvironment is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ProtectGroupEnvironmentOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupProtectedEnvironmentsServiceInterface_Expecter) ProtectGroupEnvironment(gid interface{}, opt interface{}, options ...interface{}) *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call {
	return &GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call{Call: _e.mock.On("ProtectGroupEnvironment",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call) Run(run func(gid interface{}, opt *gitlab.ProtectGroupEnvironmentOptions, options ...gitlab.RequestOptionFunc)) *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ProtectGroupEnvironmentOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call) Return(_a0 *gitlab.GroupProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call) RunAndReturn(run func(interface{}, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *GroupProtectedEnvironmentsServiceInterface_ProtectGroupEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UnprotectGroupEnvironment provides a mock function with given fields: gid, environment, options
func (_m *GroupProtectedEnvironmentsServiceInterface) UnprotectGroupEnvironment(gid interface{}, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, environment)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnprotectGroupEnvironment")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, environment, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, environment, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, environment, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprotectGroupEnvironment'
type GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call struct {
	*mock.Call
}

// UnprotectGroupEnvironment is a helper method to define mock.On call
//   - gid interface{}
//   - environment string
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupProtectedEnvironmentsServiceInterface_Expecter) UnprotectGroupEnvironment(gid interface{}, environment interface{}, options ...interface{}) *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call {
	return &GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call{Call: _e.mock.On("UnprotectGroupEnvironment",
		append([]interface{}{gid, environment}, options...)...)}
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call) Run(run func(gid interface{}, environment string, options ...gitlab.RequestOptionFunc)) *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupProtectedEnvironmentsServiceInterface_UnprotectGroupEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupProtectedEnvironment provides a mock function with given fields: gid, environment, opt, options
func (_m *GroupProtectedEnvironmentsServiceInterface) UpdateGroupProtectedEnvironment(gid interface{}, environment string, opt *gitlab.UpdateGroupProtectedEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, environment, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupProtectedEnvironment")
	}

	var r0 *gitlab.GroupProtectedEnvironment
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)); ok {
		return rf(gid, environment, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupProtectedEnvironment); ok {
		r0 = rf(gid, environment, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupProtectedEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, environment, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, environment, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupProtectedEnvironment'
type GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call struct {
	*mock.Call
}

// UpdateGroupProtectedEnvironment is a helper method to define mock.On call
//   - gid interface{}
//   - environment string
//   - opt *gitlab.UpdateGroupProtectedEnvironmentOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupProtectedEnvironmentsServiceInterface_Expecter) UpdateGroupProtectedEnvironment(gid interface{}, environment interface{}, opt interface{}, options ...interface{}) *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call {
	return &GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call{Call: _e.mock.On("UpdateGroupProtectedEnvironment",
		append([]interface{}{gid, environment, opt}, options...)...)}
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call) Run(run func(gid interface{}, environment string, opt *gitlab.UpdateGroupProtectedEnvironmentOptions, options ...gitlab.RequestOptionFunc)) *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdateGroupProtectedEnvironmentOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call) Return(_a0 *gitlab.GroupProtectedEnvironment, _a1 *gitlab.Response, _a2 error) *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *GroupProtectedEnvironmentsServiceInterface_UpdateGroupProtectedEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupProtectedEnvironmentsServiceInterface creates a new instance of GroupProtectedEnvironmentsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupProtectedEnvironmentsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupProtectedEnvironmentsServiceInterface {
	mock := &GroupProtectedEnvironmentsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
