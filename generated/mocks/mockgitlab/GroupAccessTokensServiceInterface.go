// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// GroupAccessTokensServiceInterface is an autogenerated mock type for the GroupAccessTokensServiceInterface type
type GroupAccessTokensServiceInterface struct {
	mock.Mock
}

type GroupAccessTokensServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupAccessTokensServiceInterface) EXPECT() *GroupAccessTokensServiceInterface_Expecter {
	return &GroupAccessTokensServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateGroupAccessToken provides a mock function with given fields: gid, opt, options
func (_m *GroupAccessTokensServiceInterface) CreateGroupAccessToken(gid interface{}, opt *gitlab.CreateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupAccessToken")
	}

	var r0 *gitlab.GroupAccessToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupAccessToken); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupAccessToken'
type GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call struct {
	*mock.Call
}

// CreateGroupAccessToken is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.CreateGroupAccessTokenOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) CreateGroupAccessToken(gid interface{}, opt interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call {
	return &GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call{Call: _e.mock.On("CreateGroupAccessToken",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call) Run(run func(gid interface{}, opt *gitlab.CreateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateGroupAccessTokenOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call) Return(_a0 *gitlab.GroupAccessToken, _a1 *gitlab.Response, _a2 error) *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call) RunAndReturn(run func(interface{}, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *GroupAccessTokensServiceInterface_CreateGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupAccessToken provides a mock function with given fields: gid, id, options
func (_m *GroupAccessTokensServiceInterface) GetGroupAccessToken(gid interface{}, id int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAccessToken")
	}

	var r0 *gitlab.GroupAccessToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)); ok {
		return rf(gid, id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.GroupAccessToken); ok {
		r0 = rf(gid, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, id, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, id, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupAccessTokensServiceInterface_GetGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupAccessToken'
type GroupAccessTokensServiceInterface_GetGroupAccessToken_Call struct {
	*mock.Call
}

// GetGroupAccessToken is a helper method to define mock.On call
//   - gid interface{}
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) GetGroupAccessToken(gid interface{}, id interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call {
	return &GroupAccessTokensServiceInterface_GetGroupAccessToken_Call{Call: _e.mock.On("GetGroupAccessToken",
		append([]interface{}{gid, id}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call) Run(run func(gid interface{}, id int, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call) Return(_a0 *gitlab.GroupAccessToken, _a1 *gitlab.Response, _a2 error) *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *GroupAccessTokensServiceInterface_GetGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupAccessTokens provides a mock function with given fields: gid, opt, options
func (_m *GroupAccessTokensServiceInterface) ListGroupAccessTokens(gid interface{}, opt *gitlab.ListGroupAccessTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupAccessTokens")
	}

	var r0 []*gitlab.GroupAccessToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) []*gitlab.GroupAccessToken); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupAccessTokens'
type GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call struct {
	*mock.Call
}

// ListGroupAccessTokens is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.ListGroupAccessTokensOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) ListGroupAccessTokens(gid interface{}, opt interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call {
	return &GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call{Call: _e.mock.On("ListGroupAccessTokens",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call) Run(run func(gid interface{}, opt *gitlab.ListGroupAccessTokensOptions, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListGroupAccessTokensOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call) Return(_a0 []*gitlab.GroupAccessToken, _a1 *gitlab.Response, _a2 error) *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call) RunAndReturn(run func(interface{}, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error)) *GroupAccessTokensServiceInterface_ListGroupAccessTokens_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGroupAccessToken provides a mock function with given fields: gid, id, options
func (_m *GroupAccessTokensServiceInterface) RevokeGroupAccessToken(gid interface{}, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeGroupAccessToken")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(gid, id, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(gid, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(gid, id, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGroupAccessToken'
type GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call struct {
	*mock.Call
}

// RevokeGroupAccessToken is a helper method to define mock.On call
//   - gid interface{}
//   - id int
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) RevokeGroupAccessToken(gid interface{}, id interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call {
	return &GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call{Call: _e.mock.On("RevokeGroupAccessToken",
		append([]interface{}{gid, id}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call) Run(run func(gid interface{}, id int, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call) Return(_a0 *gitlab.Response, _a1 error) *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *GroupAccessTokensServiceInterface_RevokeGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RotateGroupAccessToken provides a mock function with given fields: gid, id, opt, options
func (_m *GroupAccessTokensServiceInterface) RotateGroupAccessToken(gid interface{}, id int, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, id, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateGroupAccessToken")
	}

	var r0 *gitlab.GroupAccessToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)); ok {
		return rf(gid, id, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupAccessToken); ok {
		r0 = rf(gid, id, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, id, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, id, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateGroupAccessToken'
type GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call struct {
	*mock.Call
}

// RotateGroupAccessToken is a helper method to define mock.On call
//   - gid interface{}
//   - id int
//   - opt *gitlab.RotateGroupAccessTokenOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) RotateGroupAccessToken(gid interface{}, id interface{}, opt interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call {
	return &GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call{Call: _e.mock.On("RotateGroupAccessToken",
		append([]interface{}{gid, id, opt}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call) Run(run func(gid interface{}, id int, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.RotateGroupAccessTokenOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call) Return(_a0 *gitlab.GroupAccessToken, _a1 *gitlab.Response, _a2 error) *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call) RunAndReturn(run func(interface{}, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *GroupAccessTokensServiceInterface_RotateGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RotateGroupAccessTokenSelf provides a mock function with given fields: gid, opt, options
func (_m *GroupAccessTokensServiceInterface) RotateGroupAccessTokenSelf(gid interface{}, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateGroupAccessTokenSelf")
	}

	var r0 *gitlab.GroupAccessToken
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.GroupAccessToken); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateGroupAccessTokenSelf'
type GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call struct {
	*mock.Call
}

// RotateGroupAccessTokenSelf is a helper method to define mock.On call
//   - gid interface{}
//   - opt *gitlab.RotateGroupAccessTokenOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GroupAccessTokensServiceInterface_Expecter) RotateGroupAccessTokenSelf(gid interface{}, opt interface{}, options ...interface{}) *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call {
	return &GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call{Call: _e.mock.On("RotateGroupAccessTokenSelf",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call) Run(run func(gid interface{}, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc)) *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.RotateGroupAccessTokenOptions), variadicArgs...)
	})
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call) Return(_a0 *gitlab.GroupAccessToken, _a1 *gitlab.Response, _a2 error) *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call) RunAndReturn(run func(interface{}, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *GroupAccessTokensServiceInterface_RotateGroupAccessTokenSelf_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupAccessTokensServiceInterface creates a new instance of GroupAccessTokensServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupAccessTokensServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupAccessTokensServiceInterface {
	mock := &GroupAccessTokensServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
