// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// ApplicationsServiceInterface is an autogenerated mock type for the ApplicationsServiceInterface type
type ApplicationsServiceInterface struct {
	mock.Mock
}

type ApplicationsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationsServiceInterface) EXPECT() *ApplicationsServiceInterface_Expecter {
	return &ApplicationsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateApplication provides a mock function with given fields: opt, options
func (_m *ApplicationsServiceInterface) CreateApplication(opt *gitlab.CreateApplicationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *gitlab.Application
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) *gitlab.Application); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationsServiceInterface_CreateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApplication'
type ApplicationsServiceInterface_CreateApplication_Call struct {
	*mock.Call
}

// CreateApplication is a helper method to define mock.On call
//   - opt *gitlab.CreateApplicationOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ApplicationsServiceInterface_Expecter) CreateApplication(opt interface{}, options ...interface{}) *ApplicationsServiceInterface_CreateApplication_Call {
	return &ApplicationsServiceInterface_CreateApplication_Call{Call: _e.mock.On("CreateApplication",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ApplicationsServiceInterface_CreateApplication_Call) Run(run func(opt *gitlab.CreateApplicationOptions, options ...gitlab.RequestOptionFunc)) *ApplicationsServiceInterface_CreateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CreateApplicationOptions), variadicArgs...)
	})
	return _c
}

func (_c *ApplicationsServiceInterface_CreateApplication_Call) Return(_a0 *gitlab.Application, _a1 *gitlab.Response, _a2 error) *ApplicationsServiceInterface_CreateApplication_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ApplicationsServiceInterface_CreateApplication_Call) RunAndReturn(run func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error)) *ApplicationsServiceInterface_CreateApplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApplication provides a mock function with given fields: application, options
func (_m *ApplicationsServiceInterface) DeleteApplication(application int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, application)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(application, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(application, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(application, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationsServiceInterface_DeleteApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApplication'
type ApplicationsServiceInterface_DeleteApplication_Call struct {
	*mock.Call
}

// DeleteApplication is a helper method to define mock.On call
//   - application int
//   - options ...gitlab.RequestOptionFunc
func (_e *ApplicationsServiceInterface_Expecter) DeleteApplication(application interface{}, options ...interface{}) *ApplicationsServiceInterface_DeleteApplication_Call {
	return &ApplicationsServiceInterface_DeleteApplication_Call{Call: _e.mock.On("DeleteApplication",
		append([]interface{}{application}, options...)...)}
}

func (_c *ApplicationsServiceInterface_DeleteApplication_Call) Run(run func(application int, options ...gitlab.RequestOptionFunc)) *ApplicationsServiceInterface_DeleteApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *ApplicationsServiceInterface_DeleteApplication_Call) Return(_a0 *gitlab.Response, _a1 error) *ApplicationsServiceInterface_DeleteApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationsServiceInterface_DeleteApplication_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ApplicationsServiceInterface_DeleteApplication_Call {
	_c.Call.Return(run)
	return _c
}

// ListApplications provides a mock function with given fields: opt, options
func (_m *ApplicationsServiceInterface) ListApplications(opt *gitlab.ListApplicationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 []*gitlab.Application
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Application); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationsServiceInterface_ListApplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListApplications'
type ApplicationsServiceInterface_ListApplications_Call struct {
	*mock.Call
}

// ListApplications is a helper method to define mock.On call
//   - opt *gitlab.ListApplicationsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *ApplicationsServiceInterface_Expecter) ListApplications(opt interface{}, options ...interface{}) *ApplicationsServiceInterface_ListApplications_Call {
	return &ApplicationsServiceInterface_ListApplications_Call{Call: _e.mock.On("ListApplications",
		append([]interface{}{opt}, options...)...)}
}

func (_c *ApplicationsServiceInterface_ListApplications_Call) Run(run func(opt *gitlab.ListApplicationsOptions, options ...gitlab.RequestOptionFunc)) *ApplicationsServiceInterface_ListApplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListApplicationsOptions), variadicArgs...)
	})
	return _c
}

func (_c *ApplicationsServiceInterface_ListApplications_Call) Return(_a0 []*gitlab.Application, _a1 *gitlab.Response, _a2 error) *ApplicationsServiceInterface_ListApplications_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ApplicationsServiceInterface_ListApplications_Call) RunAndReturn(run func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error)) *ApplicationsServiceInterface_ListApplications_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplicationsServiceInterface creates a new instance of ApplicationsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationsServiceInterface {
	mock := &ApplicationsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
