// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// SystemHooksServiceInterface is an autogenerated mock type for the SystemHooksServiceInterface type
type SystemHooksServiceInterface struct {
	mock.Mock
}

type SystemHooksServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemHooksServiceInterface) EXPECT() *SystemHooksServiceInterface_Expecter {
	return &SystemHooksServiceInterface_Expecter{mock: &_m.Mock}
}

// AddHook provides a mock function with given fields: opt, options
func (_m *SystemHooksServiceInterface) AddHook(opt *gitlab.AddHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddHook")
	}

	var r0 *gitlab.Hook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.AddHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.AddHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Hook); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Hook)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.AddHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.AddHookOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SystemHooksServiceInterface_AddHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHook'
type SystemHooksServiceInterface_AddHook_Call struct {
	*mock.Call
}

// AddHook is a helper method to define mock.On call
//   - opt *gitlab.AddHookOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *SystemHooksServiceInterface_Expecter) AddHook(opt interface{}, options ...interface{}) *SystemHooksServiceInterface_AddHook_Call {
	return &SystemHooksServiceInterface_AddHook_Call{Call: _e.mock.On("AddHook",
		append([]interface{}{opt}, options...)...)}
}

func (_c *SystemHooksServiceInterface_AddHook_Call) Run(run func(opt *gitlab.AddHookOptions, options ...gitlab.RequestOptionFunc)) *SystemHooksServiceInterface_AddHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.AddHookOptions), variadicArgs...)
	})
	return _c
}

func (_c *SystemHooksServiceInterface_AddHook_Call) Return(_a0 *gitlab.Hook, _a1 *gitlab.Response, _a2 error) *SystemHooksServiceInterface_AddHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SystemHooksServiceInterface_AddHook_Call) RunAndReturn(run func(*gitlab.AddHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error)) *SystemHooksServiceInterface_AddHook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteHook provides a mock function with given fields: hook, options
func (_m *SystemHooksServiceInterface) DeleteHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, hook)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHook")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(hook, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(hook, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(hook, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemHooksServiceInterface_DeleteHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteHook'
type SystemHooksServiceInterface_DeleteHook_Call struct {
	*mock.Call
}

// DeleteHook is a helper method to define mock.On call
//   - hook int
//   - options ...gitlab.RequestOptionFunc
func (_e *SystemHooksServiceInterface_Expecter) DeleteHook(hook interface{}, options ...interface{}) *SystemHooksServiceInterface_DeleteHook_Call {
	return &SystemHooksServiceInterface_DeleteHook_Call{Call: _e.mock.On("DeleteHook",
		append([]interface{}{hook}, options...)...)}
}

func (_c *SystemHooksServiceInterface_DeleteHook_Call) Run(run func(hook int, options ...gitlab.RequestOptionFunc)) *SystemHooksServiceInterface_DeleteHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SystemHooksServiceInterface_DeleteHook_Call) Return(_a0 *gitlab.Response, _a1 error) *SystemHooksServiceInterface_DeleteHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemHooksServiceInterface_DeleteHook_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *SystemHooksServiceInterface_DeleteHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetHook provides a mock function with given fields: hook, options
func (_m *SystemHooksServiceInterface) GetHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, hook)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHook")
	}

	var r0 *gitlab.Hook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error)); ok {
		return rf(hook, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Hook); ok {
		r0 = rf(hook, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Hook)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(hook, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(hook, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SystemHooksServiceInterface_GetHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHook'
type SystemHooksServiceInterface_GetHook_Call struct {
	*mock.Call
}

// GetHook is a helper method to define mock.On call
//   - hook int
//   - options ...gitlab.RequestOptionFunc
func (_e *SystemHooksServiceInterface_Expecter) GetHook(hook interface{}, options ...interface{}) *SystemHooksServiceInterface_GetHook_Call {
	return &SystemHooksServiceInterface_GetHook_Call{Call: _e.mock.On("GetHook",
		append([]interface{}{hook}, options...)...)}
}

func (_c *SystemHooksServiceInterface_GetHook_Call) Run(run func(hook int, options ...gitlab.RequestOptionFunc)) *SystemHooksServiceInterface_GetHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SystemHooksServiceInterface_GetHook_Call) Return(_a0 *gitlab.Hook, _a1 *gitlab.Response, _a2 error) *SystemHooksServiceInterface_GetHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SystemHooksServiceInterface_GetHook_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Hook, *gitlab.Response, error)) *SystemHooksServiceInterface_GetHook_Call {
	_c.Call.Return(run)
	return _c
}

// ListHooks provides a mock function with given fields: options
func (_m *SystemHooksServiceInterface) ListHooks(options ...gitlab.RequestOptionFunc) ([]*gitlab.Hook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHooks")
	}

	var r0 []*gitlab.Hook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) ([]*gitlab.Hook, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) []*gitlab.Hook); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Hook)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SystemHooksServiceInterface_ListHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHooks'
type SystemHooksServiceInterface_ListHooks_Call struct {
	*mock.Call
}

// ListHooks is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *SystemHooksServiceInterface_Expecter) ListHooks(options ...interface{}) *SystemHooksServiceInterface_ListHooks_Call {
	return &SystemHooksServiceInterface_ListHooks_Call{Call: _e.mock.On("ListHooks",
		append([]interface{}{}, options...)...)}
}

func (_c *SystemHooksServiceInterface_ListHooks_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *SystemHooksServiceInterface_ListHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *SystemHooksServiceInterface_ListHooks_Call) Return(_a0 []*gitlab.Hook, _a1 *gitlab.Response, _a2 error) *SystemHooksServiceInterface_ListHooks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SystemHooksServiceInterface_ListHooks_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) ([]*gitlab.Hook, *gitlab.Response, error)) *SystemHooksServiceInterface_ListHooks_Call {
	_c.Call.Return(run)
	return _c
}

// TestHook provides a mock function with given fields: hook, options
func (_m *SystemHooksServiceInterface) TestHook(hook int, options ...gitlab.RequestOptionFunc) (*gitlab.HookEvent, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, hook)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestHook")
	}

	var r0 *gitlab.HookEvent
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.HookEvent, *gitlab.Response, error)); ok {
		return rf(hook, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.HookEvent); ok {
		r0 = rf(hook, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.HookEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(hook, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(hook, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SystemHooksServiceInterface_TestHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestHook'
type SystemHooksServiceInterface_TestHook_Call struct {
	*mock.Call
}

// TestHook is a helper method to define mock.On call
//   - hook int
//   - options ...gitlab.RequestOptionFunc
func (_e *SystemHooksServiceInterface_Expecter) TestHook(hook interface{}, options ...interface{}) *SystemHooksServiceInterface_TestHook_Call {
	return &SystemHooksServiceInterface_TestHook_Call{Call: _e.mock.On("TestHook",
		append([]interface{}{hook}, options...)...)}
}

func (_c *SystemHooksServiceInterface_TestHook_Call) Run(run func(hook int, options ...gitlab.RequestOptionFunc)) *SystemHooksServiceInterface_TestHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *SystemHooksServiceInterface_TestHook_Call) Return(_a0 *gitlab.HookEvent, _a1 *gitlab.Response, _a2 error) *SystemHooksServiceInterface_TestHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SystemHooksServiceInterface_TestHook_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.HookEvent, *gitlab.Response, error)) *SystemHooksServiceInterface_TestHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystemHooksServiceInterface creates a new instance of SystemHooksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemHooksServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemHooksServiceInterface {
	mock := &SystemHooksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
