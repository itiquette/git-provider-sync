// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// TopicsServiceInterface is an autogenerated mock type for the TopicsServiceInterface type
type TopicsServiceInterface struct {
	mock.Mock
}

type TopicsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TopicsServiceInterface) EXPECT() *TopicsServiceInterface_Expecter {
	return &TopicsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function with given fields: opt, options
func (_m *TopicsServiceInterface) CreateTopic(opt *gitlab.CreateTopicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *gitlab.Topic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.CreateTopicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.CreateTopicOptions, ...gitlab.RequestOptionFunc) *gitlab.Topic); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.CreateTopicOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.CreateTopicOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopicsServiceInterface_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type TopicsServiceInterface_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - opt *gitlab.CreateTopicOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *TopicsServiceInterface_Expecter) CreateTopic(opt interface{}, options ...interface{}) *TopicsServiceInterface_CreateTopic_Call {
	return &TopicsServiceInterface_CreateTopic_Call{Call: _e.mock.On("CreateTopic",
		append([]interface{}{opt}, options...)...)}
}

func (_c *TopicsServiceInterface_CreateTopic_Call) Run(run func(opt *gitlab.CreateTopicOptions, options ...gitlab.RequestOptionFunc)) *TopicsServiceInterface_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.CreateTopicOptions), variadicArgs...)
	})
	return _c
}

func (_c *TopicsServiceInterface_CreateTopic_Call) Return(_a0 *gitlab.Topic, _a1 *gitlab.Response, _a2 error) *TopicsServiceInterface_CreateTopic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TopicsServiceInterface_CreateTopic_Call) RunAndReturn(run func(*gitlab.CreateTopicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)) *TopicsServiceInterface_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function with given fields: topic, options
func (_m *TopicsServiceInterface) DeleteTopic(topic int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(topic, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(topic, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(topic, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicsServiceInterface_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type TopicsServiceInterface_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - topic int
//   - options ...gitlab.RequestOptionFunc
func (_e *TopicsServiceInterface_Expecter) DeleteTopic(topic interface{}, options ...interface{}) *TopicsServiceInterface_DeleteTopic_Call {
	return &TopicsServiceInterface_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic",
		append([]interface{}{topic}, options...)...)}
}

func (_c *TopicsServiceInterface_DeleteTopic_Call) Run(run func(topic int, options ...gitlab.RequestOptionFunc)) *TopicsServiceInterface_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *TopicsServiceInterface_DeleteTopic_Call) Return(_a0 *gitlab.Response, _a1 error) *TopicsServiceInterface_DeleteTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TopicsServiceInterface_DeleteTopic_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *TopicsServiceInterface_DeleteTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function with given fields: topic, options
func (_m *TopicsServiceInterface) GetTopic(topic int, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *gitlab.Topic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)); ok {
		return rf(topic, options...)
	}
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Topic); ok {
		r0 = rf(topic, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(topic, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(topic, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopicsServiceInterface_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type TopicsServiceInterface_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - topic int
//   - options ...gitlab.RequestOptionFunc
func (_e *TopicsServiceInterface_Expecter) GetTopic(topic interface{}, options ...interface{}) *TopicsServiceInterface_GetTopic_Call {
	return &TopicsServiceInterface_GetTopic_Call{Call: _e.mock.On("GetTopic",
		append([]interface{}{topic}, options...)...)}
}

func (_c *TopicsServiceInterface_GetTopic_Call) Run(run func(topic int, options ...gitlab.RequestOptionFunc)) *TopicsServiceInterface_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *TopicsServiceInterface_GetTopic_Call) Return(_a0 *gitlab.Topic, _a1 *gitlab.Response, _a2 error) *TopicsServiceInterface_GetTopic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TopicsServiceInterface_GetTopic_Call) RunAndReturn(run func(int, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)) *TopicsServiceInterface_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: opt, options
func (_m *TopicsServiceInterface) ListTopics(opt *gitlab.ListTopicsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Topic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 []*gitlab.Topic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListTopicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Topic, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListTopicsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Topic); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListTopicsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListTopicsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopicsServiceInterface_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type TopicsServiceInterface_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - opt *gitlab.ListTopicsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *TopicsServiceInterface_Expecter) ListTopics(opt interface{}, options ...interface{}) *TopicsServiceInterface_ListTopics_Call {
	return &TopicsServiceInterface_ListTopics_Call{Call: _e.mock.On("ListTopics",
		append([]interface{}{opt}, options...)...)}
}

func (_c *TopicsServiceInterface_ListTopics_Call) Run(run func(opt *gitlab.ListTopicsOptions, options ...gitlab.RequestOptionFunc)) *TopicsServiceInterface_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListTopicsOptions), variadicArgs...)
	})
	return _c
}

func (_c *TopicsServiceInterface_ListTopics_Call) Return(_a0 []*gitlab.Topic, _a1 *gitlab.Response, _a2 error) *TopicsServiceInterface_ListTopics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TopicsServiceInterface_ListTopics_Call) RunAndReturn(run func(*gitlab.ListTopicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Topic, *gitlab.Response, error)) *TopicsServiceInterface_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTopic provides a mock function with given fields: topic, opt, options
func (_m *TopicsServiceInterface) UpdateTopic(topic int, opt *gitlab.UpdateTopicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopic")
	}

	var r0 *gitlab.Topic
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateTopicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)); ok {
		return rf(topic, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.UpdateTopicOptions, ...gitlab.RequestOptionFunc) *gitlab.Topic); ok {
		r0 = rf(topic, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.UpdateTopicOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(topic, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.UpdateTopicOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(topic, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopicsServiceInterface_UpdateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTopic'
type TopicsServiceInterface_UpdateTopic_Call struct {
	*mock.Call
}

// UpdateTopic is a helper method to define mock.On call
//   - topic int
//   - opt *gitlab.UpdateTopicOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *TopicsServiceInterface_Expecter) UpdateTopic(topic interface{}, opt interface{}, options ...interface{}) *TopicsServiceInterface_UpdateTopic_Call {
	return &TopicsServiceInterface_UpdateTopic_Call{Call: _e.mock.On("UpdateTopic",
		append([]interface{}{topic, opt}, options...)...)}
}

func (_c *TopicsServiceInterface_UpdateTopic_Call) Run(run func(topic int, opt *gitlab.UpdateTopicOptions, options ...gitlab.RequestOptionFunc)) *TopicsServiceInterface_UpdateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.UpdateTopicOptions), variadicArgs...)
	})
	return _c
}

func (_c *TopicsServiceInterface_UpdateTopic_Call) Return(_a0 *gitlab.Topic, _a1 *gitlab.Response, _a2 error) *TopicsServiceInterface_UpdateTopic_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TopicsServiceInterface_UpdateTopic_Call) RunAndReturn(run func(int, *gitlab.UpdateTopicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Topic, *gitlab.Response, error)) *TopicsServiceInterface_UpdateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// NewTopicsServiceInterface creates a new instance of TopicsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopicsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicsServiceInterface {
	mock := &TopicsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
