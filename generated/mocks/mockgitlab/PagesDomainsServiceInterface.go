// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// PagesDomainsServiceInterface is an autogenerated mock type for the PagesDomainsServiceInterface type
type PagesDomainsServiceInterface struct {
	mock.Mock
}

type PagesDomainsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PagesDomainsServiceInterface) EXPECT() *PagesDomainsServiceInterface_Expecter {
	return &PagesDomainsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreatePagesDomain provides a mock function with given fields: pid, opt, options
func (_m *PagesDomainsServiceInterface) CreatePagesDomain(pid interface{}, opt *gitlab.CreatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePagesDomain")
	}

	var r0 *gitlab.PagesDomain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) *gitlab.PagesDomain); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PagesDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PagesDomainsServiceInterface_CreatePagesDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePagesDomain'
type PagesDomainsServiceInterface_CreatePagesDomain_Call struct {
	*mock.Call
}

// CreatePagesDomain is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreatePagesDomainOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) CreatePagesDomain(pid interface{}, opt interface{}, options ...interface{}) *PagesDomainsServiceInterface_CreatePagesDomain_Call {
	return &PagesDomainsServiceInterface_CreatePagesDomain_Call{Call: _e.mock.On("CreatePagesDomain",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_CreatePagesDomain_Call) Run(run func(pid interface{}, opt *gitlab.CreatePagesDomainOptions, options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_CreatePagesDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreatePagesDomainOptions), variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_CreatePagesDomain_Call) Return(_a0 *gitlab.PagesDomain, _a1 *gitlab.Response, _a2 error) *PagesDomainsServiceInterface_CreatePagesDomain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PagesDomainsServiceInterface_CreatePagesDomain_Call) RunAndReturn(run func(interface{}, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *PagesDomainsServiceInterface_CreatePagesDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePagesDomain provides a mock function with given fields: pid, domain, options
func (_m *PagesDomainsServiceInterface) DeletePagesDomain(pid interface{}, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, domain)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePagesDomain")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, domain, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, domain, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, domain, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PagesDomainsServiceInterface_DeletePagesDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePagesDomain'
type PagesDomainsServiceInterface_DeletePagesDomain_Call struct {
	*mock.Call
}

// DeletePagesDomain is a helper method to define mock.On call
//   - pid interface{}
//   - domain string
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) DeletePagesDomain(pid interface{}, domain interface{}, options ...interface{}) *PagesDomainsServiceInterface_DeletePagesDomain_Call {
	return &PagesDomainsServiceInterface_DeletePagesDomain_Call{Call: _e.mock.On("DeletePagesDomain",
		append([]interface{}{pid, domain}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_DeletePagesDomain_Call) Run(run func(pid interface{}, domain string, options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_DeletePagesDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_DeletePagesDomain_Call) Return(_a0 *gitlab.Response, _a1 error) *PagesDomainsServiceInterface_DeletePagesDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PagesDomainsServiceInterface_DeletePagesDomain_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *PagesDomainsServiceInterface_DeletePagesDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesDomain provides a mock function with given fields: pid, domain, options
func (_m *PagesDomainsServiceInterface) GetPagesDomain(pid interface{}, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, domain)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesDomain")
	}

	var r0 *gitlab.PagesDomain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)); ok {
		return rf(pid, domain, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.PagesDomain); ok {
		r0 = rf(pid, domain, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PagesDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, domain, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, domain, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PagesDomainsServiceInterface_GetPagesDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesDomain'
type PagesDomainsServiceInterface_GetPagesDomain_Call struct {
	*mock.Call
}

// GetPagesDomain is a helper method to define mock.On call
//   - pid interface{}
//   - domain string
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) GetPagesDomain(pid interface{}, domain interface{}, options ...interface{}) *PagesDomainsServiceInterface_GetPagesDomain_Call {
	return &PagesDomainsServiceInterface_GetPagesDomain_Call{Call: _e.mock.On("GetPagesDomain",
		append([]interface{}{pid, domain}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_GetPagesDomain_Call) Run(run func(pid interface{}, domain string, options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_GetPagesDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_GetPagesDomain_Call) Return(_a0 *gitlab.PagesDomain, _a1 *gitlab.Response, _a2 error) *PagesDomainsServiceInterface_GetPagesDomain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PagesDomainsServiceInterface_GetPagesDomain_Call) RunAndReturn(run func(interface{}, string, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *PagesDomainsServiceInterface_GetPagesDomain_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllPagesDomains provides a mock function with given fields: options
func (_m *PagesDomainsServiceInterface) ListAllPagesDomains(options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllPagesDomains")
	}

	var r0 []*gitlab.PagesDomain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...gitlab.RequestOptionFunc) []*gitlab.PagesDomain); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.PagesDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PagesDomainsServiceInterface_ListAllPagesDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllPagesDomains'
type PagesDomainsServiceInterface_ListAllPagesDomains_Call struct {
	*mock.Call
}

// ListAllPagesDomains is a helper method to define mock.On call
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) ListAllPagesDomains(options ...interface{}) *PagesDomainsServiceInterface_ListAllPagesDomains_Call {
	return &PagesDomainsServiceInterface_ListAllPagesDomains_Call{Call: _e.mock.On("ListAllPagesDomains",
		append([]interface{}{}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_ListAllPagesDomains_Call) Run(run func(options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_ListAllPagesDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_ListAllPagesDomains_Call) Return(_a0 []*gitlab.PagesDomain, _a1 *gitlab.Response, _a2 error) *PagesDomainsServiceInterface_ListAllPagesDomains_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PagesDomainsServiceInterface_ListAllPagesDomains_Call) RunAndReturn(run func(...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *PagesDomainsServiceInterface_ListAllPagesDomains_Call {
	_c.Call.Return(run)
	return _c
}

// ListPagesDomains provides a mock function with given fields: pid, opt, options
func (_m *PagesDomainsServiceInterface) ListPagesDomains(pid interface{}, opt *gitlab.ListPagesDomainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPagesDomains")
	}

	var r0 []*gitlab.PagesDomain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) []*gitlab.PagesDomain); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.PagesDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PagesDomainsServiceInterface_ListPagesDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPagesDomains'
type PagesDomainsServiceInterface_ListPagesDomains_Call struct {
	*mock.Call
}

// ListPagesDomains is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListPagesDomainsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) ListPagesDomains(pid interface{}, opt interface{}, options ...interface{}) *PagesDomainsServiceInterface_ListPagesDomains_Call {
	return &PagesDomainsServiceInterface_ListPagesDomains_Call{Call: _e.mock.On("ListPagesDomains",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_ListPagesDomains_Call) Run(run func(pid interface{}, opt *gitlab.ListPagesDomainsOptions, options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_ListPagesDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListPagesDomainsOptions), variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_ListPagesDomains_Call) Return(_a0 []*gitlab.PagesDomain, _a1 *gitlab.Response, _a2 error) *PagesDomainsServiceInterface_ListPagesDomains_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PagesDomainsServiceInterface_ListPagesDomains_Call) RunAndReturn(run func(interface{}, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *PagesDomainsServiceInterface_ListPagesDomains_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePagesDomain provides a mock function with given fields: pid, domain, opt, options
func (_m *PagesDomainsServiceInterface) UpdatePagesDomain(pid interface{}, domain string, opt *gitlab.UpdatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, domain, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePagesDomain")
	}

	var r0 *gitlab.PagesDomain
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)); ok {
		return rf(pid, domain, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) *gitlab.PagesDomain); ok {
		r0 = rf(pid, domain, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.PagesDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, domain, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, domain, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PagesDomainsServiceInterface_UpdatePagesDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePagesDomain'
type PagesDomainsServiceInterface_UpdatePagesDomain_Call struct {
	*mock.Call
}

// UpdatePagesDomain is a helper method to define mock.On call
//   - pid interface{}
//   - domain string
//   - opt *gitlab.UpdatePagesDomainOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *PagesDomainsServiceInterface_Expecter) UpdatePagesDomain(pid interface{}, domain interface{}, opt interface{}, options ...interface{}) *PagesDomainsServiceInterface_UpdatePagesDomain_Call {
	return &PagesDomainsServiceInterface_UpdatePagesDomain_Call{Call: _e.mock.On("UpdatePagesDomain",
		append([]interface{}{pid, domain, opt}, options...)...)}
}

func (_c *PagesDomainsServiceInterface_UpdatePagesDomain_Call) Run(run func(pid interface{}, domain string, opt *gitlab.UpdatePagesDomainOptions, options ...gitlab.RequestOptionFunc)) *PagesDomainsServiceInterface_UpdatePagesDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(*gitlab.UpdatePagesDomainOptions), variadicArgs...)
	})
	return _c
}

func (_c *PagesDomainsServiceInterface_UpdatePagesDomain_Call) Return(_a0 *gitlab.PagesDomain, _a1 *gitlab.Response, _a2 error) *PagesDomainsServiceInterface_UpdatePagesDomain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PagesDomainsServiceInterface_UpdatePagesDomain_Call) RunAndReturn(run func(interface{}, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *PagesDomainsServiceInterface_UpdatePagesDomain_Call {
	_c.Call.Return(run)
	return _c
}

// NewPagesDomainsServiceInterface creates a new instance of PagesDomainsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPagesDomainsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PagesDomainsServiceInterface {
	mock := &PagesDomainsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
