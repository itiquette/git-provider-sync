// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	gitlab "gitlab.com/gitlab-org/api/client-go"

	mock "github.com/stretchr/testify/mock"
)

// ProjectMarkdownUploadsServiceInterface is an autogenerated mock type for the ProjectMarkdownUploadsServiceInterface type
type ProjectMarkdownUploadsServiceInterface struct {
	mock.Mock
}

type ProjectMarkdownUploadsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectMarkdownUploadsServiceInterface) EXPECT() *ProjectMarkdownUploadsServiceInterface_Expecter {
	return &ProjectMarkdownUploadsServiceInterface_Expecter{mock: &_m.Mock}
}

// DeleteProjectMarkdownUploadByID provides a mock function with given fields: pid, uploadID, options
func (_m *ProjectMarkdownUploadsServiceInterface) DeleteProjectMarkdownUploadByID(pid interface{}, uploadID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, uploadID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMarkdownUploadByID")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, uploadID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, uploadID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, uploadID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectMarkdownUploadByID'
type ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call struct {
	*mock.Call
}

// DeleteProjectMarkdownUploadByID is a helper method to define mock.On call
//   - pid interface{}
//   - uploadID int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) DeleteProjectMarkdownUploadByID(pid interface{}, uploadID interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call {
	return &ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call{Call: _e.mock.On("DeleteProjectMarkdownUploadByID",
		append([]interface{}{pid, uploadID}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call) Run(run func(pid interface{}, uploadID int, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectMarkdownUploadBySecretAndFilename provides a mock function with given fields: pid, secret, filename, options
func (_m *ProjectMarkdownUploadsServiceInterface) DeleteProjectMarkdownUploadBySecretAndFilename(pid interface{}, secret string, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, secret, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMarkdownUploadBySecretAndFilename")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, secret, filename, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, secret, filename, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, secret, filename, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectMarkdownUploadBySecretAndFilename'
type ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call struct {
	*mock.Call
}

// DeleteProjectMarkdownUploadBySecretAndFilename is a helper method to define mock.On call
//   - pid interface{}
//   - secret string
//   - filename string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) DeleteProjectMarkdownUploadBySecretAndFilename(pid interface{}, secret interface{}, filename interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call {
	return &ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call{Call: _e.mock.On("DeleteProjectMarkdownUploadBySecretAndFilename",
		append([]interface{}{pid, secret, filename}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call) Run(run func(pid interface{}, secret string, filename string, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call) Return(_a0 *gitlab.Response, _a1 error) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call) RunAndReturn(run func(interface{}, string, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_DeleteProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadProjectMarkdownUploadByID provides a mock function with given fields: pid, uploadID, options
func (_m *ProjectMarkdownUploadsServiceInterface) DownloadProjectMarkdownUploadByID(pid interface{}, uploadID int, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, uploadID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadProjectMarkdownUploadByID")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, uploadID, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, uploadID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, uploadID, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, uploadID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadProjectMarkdownUploadByID'
type ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call struct {
	*mock.Call
}

// DownloadProjectMarkdownUploadByID is a helper method to define mock.On call
//   - pid interface{}
//   - uploadID int
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) DownloadProjectMarkdownUploadByID(pid interface{}, uploadID interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call {
	return &ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call{Call: _e.mock.On("DownloadProjectMarkdownUploadByID",
		append([]interface{}{pid, uploadID}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call) Run(run func(pid interface{}, uploadID int, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadByID_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadProjectMarkdownUploadBySecretAndFilename provides a mock function with given fields: pid, secret, filename, options
func (_m *ProjectMarkdownUploadsServiceInterface) DownloadProjectMarkdownUploadBySecretAndFilename(pid interface{}, secret string, filename string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, secret, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadProjectMarkdownUploadBySecretAndFilename")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, secret, filename, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, secret, filename, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, secret, filename, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, secret, filename, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadProjectMarkdownUploadBySecretAndFilename'
type ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call struct {
	*mock.Call
}

// DownloadProjectMarkdownUploadBySecretAndFilename is a helper method to define mock.On call
//   - pid interface{}
//   - secret string
//   - filename string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) DownloadProjectMarkdownUploadBySecretAndFilename(pid interface{}, secret interface{}, filename interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call {
	return &ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call{Call: _e.mock.On("DownloadProjectMarkdownUploadBySecretAndFilename",
		append([]interface{}{pid, secret, filename}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call) Run(run func(pid interface{}, secret string, filename string, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call) Return(_a0 []byte, _a1 *gitlab.Response, _a2 error) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call) RunAndReturn(run func(interface{}, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_DownloadProjectMarkdownUploadBySecretAndFilename_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMarkdownUploads provides a mock function with given fields: pid, options
func (_m *ProjectMarkdownUploadsServiceInterface) ListProjectMarkdownUploads(pid interface{}, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMarkdownUpload, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMarkdownUploads")
	}

	var r0 []*gitlab.ProjectMarkdownUpload
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMarkdownUpload, *gitlab.Response, error)); ok {
		return rf(pid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) []*gitlab.ProjectMarkdownUpload); ok {
		r0 = rf(pid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectMarkdownUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMarkdownUploads'
type ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call struct {
	*mock.Call
}

// ListProjectMarkdownUploads is a helper method to define mock.On call
//   - pid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) ListProjectMarkdownUploads(pid interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call {
	return &ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call{Call: _e.mock.On("ListProjectMarkdownUploads",
		append([]interface{}{pid}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call) Run(run func(pid interface{}, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call) Return(_a0 []*gitlab.ProjectMarkdownUpload, _a1 *gitlab.Response, _a2 error) *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call) RunAndReturn(run func(interface{}, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMarkdownUpload, *gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_ListProjectMarkdownUploads_Call {
	_c.Call.Return(run)
	return _c
}

// UploadProjectMarkdown provides a mock function with given fields: pid, content, filename, options
func (_m *ProjectMarkdownUploadsServiceInterface) UploadProjectMarkdown(pid interface{}, content io.Reader, filename string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMarkdownUploadedFile, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, content, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadProjectMarkdown")
	}

	var r0 *gitlab.ProjectMarkdownUploadedFile
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMarkdownUploadedFile, *gitlab.Response, error)); ok {
		return rf(pid, content, filename, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, io.Reader, string, ...gitlab.RequestOptionFunc) *gitlab.ProjectMarkdownUploadedFile); ok {
		r0 = rf(pid, content, filename, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMarkdownUploadedFile)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, io.Reader, string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, content, filename, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, io.Reader, string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, content, filename, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadProjectMarkdown'
type ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call struct {
	*mock.Call
}

// UploadProjectMarkdown is a helper method to define mock.On call
//   - pid interface{}
//   - content io.Reader
//   - filename string
//   - options ...gitlab.RequestOptionFunc
func (_e *ProjectMarkdownUploadsServiceInterface_Expecter) UploadProjectMarkdown(pid interface{}, content interface{}, filename interface{}, options ...interface{}) *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call {
	return &ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call{Call: _e.mock.On("UploadProjectMarkdown",
		append([]interface{}{pid, content, filename}, options...)...)}
}

func (_c *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call) Run(run func(pid interface{}, content io.Reader, filename string, options ...gitlab.RequestOptionFunc)) *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(io.Reader), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call) Return(_a0 *gitlab.ProjectMarkdownUploadedFile, _a1 *gitlab.Response, _a2 error) *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call) RunAndReturn(run func(interface{}, io.Reader, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMarkdownUploadedFile, *gitlab.Response, error)) *ProjectMarkdownUploadsServiceInterface_UploadProjectMarkdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectMarkdownUploadsServiceInterface creates a new instance of ProjectMarkdownUploadsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMarkdownUploadsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMarkdownUploadsServiceInterface {
	mock := &ProjectMarkdownUploadsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
