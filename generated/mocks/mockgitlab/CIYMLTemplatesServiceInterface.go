// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// CIYMLTemplatesServiceInterface is an autogenerated mock type for the CIYMLTemplatesServiceInterface type
type CIYMLTemplatesServiceInterface struct {
	mock.Mock
}

type CIYMLTemplatesServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CIYMLTemplatesServiceInterface) EXPECT() *CIYMLTemplatesServiceInterface_Expecter {
	return &CIYMLTemplatesServiceInterface_Expecter{mock: &_m.Mock}
}

// GetTemplate provides a mock function with given fields: key, options
func (_m *CIYMLTemplatesServiceInterface) GetTemplate(key string, options ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *gitlab.CIYMLTemplate
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error)); ok {
		return rf(key, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...gitlab.RequestOptionFunc) *gitlab.CIYMLTemplate); ok {
		r0 = rf(key, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CIYMLTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(key, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(key, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CIYMLTemplatesServiceInterface_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type CIYMLTemplatesServiceInterface_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - key string
//   - options ...gitlab.RequestOptionFunc
func (_e *CIYMLTemplatesServiceInterface_Expecter) GetTemplate(key interface{}, options ...interface{}) *CIYMLTemplatesServiceInterface_GetTemplate_Call {
	return &CIYMLTemplatesServiceInterface_GetTemplate_Call{Call: _e.mock.On("GetTemplate",
		append([]interface{}{key}, options...)...)}
}

func (_c *CIYMLTemplatesServiceInterface_GetTemplate_Call) Run(run func(key string, options ...gitlab.RequestOptionFunc)) *CIYMLTemplatesServiceInterface_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *CIYMLTemplatesServiceInterface_GetTemplate_Call) Return(_a0 *gitlab.CIYMLTemplate, _a1 *gitlab.Response, _a2 error) *CIYMLTemplatesServiceInterface_GetTemplate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CIYMLTemplatesServiceInterface_GetTemplate_Call) RunAndReturn(run func(string, ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error)) *CIYMLTemplatesServiceInterface_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllTemplates provides a mock function with given fields: opt, options
func (_m *CIYMLTemplatesServiceInterface) ListAllTemplates(opt *gitlab.ListCIYMLTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllTemplates")
	}

	var r0 []*gitlab.CIYMLTemplateListItem
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error)); ok {
		return rf(opt, options...)
	}
	if rf, ok := ret.Get(0).(func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) []*gitlab.CIYMLTemplateListItem); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.CIYMLTemplateListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CIYMLTemplatesServiceInterface_ListAllTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllTemplates'
type CIYMLTemplatesServiceInterface_ListAllTemplates_Call struct {
	*mock.Call
}

// ListAllTemplates is a helper method to define mock.On call
//   - opt *gitlab.ListCIYMLTemplatesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *CIYMLTemplatesServiceInterface_Expecter) ListAllTemplates(opt interface{}, options ...interface{}) *CIYMLTemplatesServiceInterface_ListAllTemplates_Call {
	return &CIYMLTemplatesServiceInterface_ListAllTemplates_Call{Call: _e.mock.On("ListAllTemplates",
		append([]interface{}{opt}, options...)...)}
}

func (_c *CIYMLTemplatesServiceInterface_ListAllTemplates_Call) Run(run func(opt *gitlab.ListCIYMLTemplatesOptions, options ...gitlab.RequestOptionFunc)) *CIYMLTemplatesServiceInterface_ListAllTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListCIYMLTemplatesOptions), variadicArgs...)
	})
	return _c
}

func (_c *CIYMLTemplatesServiceInterface_ListAllTemplates_Call) Return(_a0 []*gitlab.CIYMLTemplateListItem, _a1 *gitlab.Response, _a2 error) *CIYMLTemplatesServiceInterface_ListAllTemplates_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CIYMLTemplatesServiceInterface_ListAllTemplates_Call) RunAndReturn(run func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error)) *CIYMLTemplatesServiceInterface_ListAllTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// NewCIYMLTemplatesServiceInterface creates a new instance of CIYMLTemplatesServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCIYMLTemplatesServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CIYMLTemplatesServiceInterface {
	mock := &CIYMLTemplatesServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
