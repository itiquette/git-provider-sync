// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// IssueLinksServiceInterface is an autogenerated mock type for the IssueLinksServiceInterface type
type IssueLinksServiceInterface struct {
	mock.Mock
}

type IssueLinksServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *IssueLinksServiceInterface) EXPECT() *IssueLinksServiceInterface_Expecter {
	return &IssueLinksServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateIssueLink provides a mock function with given fields: pid, issue, opt, options
func (_m *IssueLinksServiceInterface) CreateIssueLink(pid interface{}, issue int, opt *gitlab.CreateIssueLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueLink")
	}

	var r0 *gitlab.IssueLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)); ok {
		return rf(pid, issue, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.IssueLink); ok {
		r0 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssueLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssueLinksServiceInterface_CreateIssueLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueLink'
type IssueLinksServiceInterface_CreateIssueLink_Call struct {
	*mock.Call
}

// CreateIssueLink is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - opt *gitlab.CreateIssueLinkOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *IssueLinksServiceInterface_Expecter) CreateIssueLink(pid interface{}, issue interface{}, opt interface{}, options ...interface{}) *IssueLinksServiceInterface_CreateIssueLink_Call {
	return &IssueLinksServiceInterface_CreateIssueLink_Call{Call: _e.mock.On("CreateIssueLink",
		append([]interface{}{pid, issue, opt}, options...)...)}
}

func (_c *IssueLinksServiceInterface_CreateIssueLink_Call) Run(run func(pid interface{}, issue int, opt *gitlab.CreateIssueLinkOptions, options ...gitlab.RequestOptionFunc)) *IssueLinksServiceInterface_CreateIssueLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.CreateIssueLinkOptions), variadicArgs...)
	})
	return _c
}

func (_c *IssueLinksServiceInterface_CreateIssueLink_Call) Return(_a0 *gitlab.IssueLink, _a1 *gitlab.Response, _a2 error) *IssueLinksServiceInterface_CreateIssueLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssueLinksServiceInterface_CreateIssueLink_Call) RunAndReturn(run func(interface{}, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *IssueLinksServiceInterface_CreateIssueLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIssueLink provides a mock function with given fields: pid, issue, issueLink, options
func (_m *IssueLinksServiceInterface) DeleteIssueLink(pid interface{}, issue int, issueLink int, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, issueLink)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssueLink")
	}

	var r0 *gitlab.IssueLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)); ok {
		return rf(pid, issue, issueLink, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.IssueLink); ok {
		r0 = rf(pid, issue, issueLink, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssueLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, issueLink, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, issueLink, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssueLinksServiceInterface_DeleteIssueLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIssueLink'
type IssueLinksServiceInterface_DeleteIssueLink_Call struct {
	*mock.Call
}

// DeleteIssueLink is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - issueLink int
//   - options ...gitlab.RequestOptionFunc
func (_e *IssueLinksServiceInterface_Expecter) DeleteIssueLink(pid interface{}, issue interface{}, issueLink interface{}, options ...interface{}) *IssueLinksServiceInterface_DeleteIssueLink_Call {
	return &IssueLinksServiceInterface_DeleteIssueLink_Call{Call: _e.mock.On("DeleteIssueLink",
		append([]interface{}{pid, issue, issueLink}, options...)...)}
}

func (_c *IssueLinksServiceInterface_DeleteIssueLink_Call) Run(run func(pid interface{}, issue int, issueLink int, options ...gitlab.RequestOptionFunc)) *IssueLinksServiceInterface_DeleteIssueLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *IssueLinksServiceInterface_DeleteIssueLink_Call) Return(_a0 *gitlab.IssueLink, _a1 *gitlab.Response, _a2 error) *IssueLinksServiceInterface_DeleteIssueLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssueLinksServiceInterface_DeleteIssueLink_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *IssueLinksServiceInterface_DeleteIssueLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueLink provides a mock function with given fields: pid, issue, issueLink, options
func (_m *IssueLinksServiceInterface) GetIssueLink(pid interface{}, issue int, issueLink int, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue, issueLink)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueLink")
	}

	var r0 *gitlab.IssueLink
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)); ok {
		return rf(pid, issue, issueLink, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.IssueLink); ok {
		r0 = rf(pid, issue, issueLink, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.IssueLink)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, issueLink, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, issueLink, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssueLinksServiceInterface_GetIssueLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueLink'
type IssueLinksServiceInterface_GetIssueLink_Call struct {
	*mock.Call
}

// GetIssueLink is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - issueLink int
//   - options ...gitlab.RequestOptionFunc
func (_e *IssueLinksServiceInterface_Expecter) GetIssueLink(pid interface{}, issue interface{}, issueLink interface{}, options ...interface{}) *IssueLinksServiceInterface_GetIssueLink_Call {
	return &IssueLinksServiceInterface_GetIssueLink_Call{Call: _e.mock.On("GetIssueLink",
		append([]interface{}{pid, issue, issueLink}, options...)...)}
}

func (_c *IssueLinksServiceInterface_GetIssueLink_Call) Run(run func(pid interface{}, issue int, issueLink int, options ...gitlab.RequestOptionFunc)) *IssueLinksServiceInterface_GetIssueLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *IssueLinksServiceInterface_GetIssueLink_Call) Return(_a0 *gitlab.IssueLink, _a1 *gitlab.Response, _a2 error) *IssueLinksServiceInterface_GetIssueLink_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssueLinksServiceInterface_GetIssueLink_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *IssueLinksServiceInterface_GetIssueLink_Call {
	_c.Call.Return(run)
	return _c
}

// ListIssueRelations provides a mock function with given fields: pid, issue, options
func (_m *IssueLinksServiceInterface) ListIssueRelations(pid interface{}, issue int, options ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, issue)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIssueRelations")
	}

	var r0 []*gitlab.IssueRelation
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error)); ok {
		return rf(pid, issue, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, ...gitlab.RequestOptionFunc) []*gitlab.IssueRelation); ok {
		r0 = rf(pid, issue, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.IssueRelation)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, issue, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, issue, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssueLinksServiceInterface_ListIssueRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIssueRelations'
type IssueLinksServiceInterface_ListIssueRelations_Call struct {
	*mock.Call
}

// ListIssueRelations is a helper method to define mock.On call
//   - pid interface{}
//   - issue int
//   - options ...gitlab.RequestOptionFunc
func (_e *IssueLinksServiceInterface_Expecter) ListIssueRelations(pid interface{}, issue interface{}, options ...interface{}) *IssueLinksServiceInterface_ListIssueRelations_Call {
	return &IssueLinksServiceInterface_ListIssueRelations_Call{Call: _e.mock.On("ListIssueRelations",
		append([]interface{}{pid, issue}, options...)...)}
}

func (_c *IssueLinksServiceInterface_ListIssueRelations_Call) Run(run func(pid interface{}, issue int, options ...gitlab.RequestOptionFunc)) *IssueLinksServiceInterface_ListIssueRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *IssueLinksServiceInterface_ListIssueRelations_Call) Return(_a0 []*gitlab.IssueRelation, _a1 *gitlab.Response, _a2 error) *IssueLinksServiceInterface_ListIssueRelations_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IssueLinksServiceInterface_ListIssueRelations_Call) RunAndReturn(run func(interface{}, int, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error)) *IssueLinksServiceInterface_ListIssueRelations_Call {
	_c.Call.Return(run)
	return _c
}

// NewIssueLinksServiceInterface creates a new instance of IssueLinksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssueLinksServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssueLinksServiceInterface {
	mock := &IssueLinksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
