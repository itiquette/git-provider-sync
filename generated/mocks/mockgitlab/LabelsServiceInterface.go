// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// LabelsServiceInterface is an autogenerated mock type for the LabelsServiceInterface type
type LabelsServiceInterface struct {
	mock.Mock
}

type LabelsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LabelsServiceInterface) EXPECT() *LabelsServiceInterface_Expecter {
	return &LabelsServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateLabel provides a mock function with given fields: pid, opt, options
func (_m *LabelsServiceInterface) CreateLabel(pid interface{}, opt *gitlab.CreateLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabel")
	}

	var r0 *gitlab.Label
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.CreateLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Label); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.CreateLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.CreateLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelsServiceInterface_CreateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLabel'
type LabelsServiceInterface_CreateLabel_Call struct {
	*mock.Call
}

// CreateLabel is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.CreateLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) CreateLabel(pid interface{}, opt interface{}, options ...interface{}) *LabelsServiceInterface_CreateLabel_Call {
	return &LabelsServiceInterface_CreateLabel_Call{Call: _e.mock.On("CreateLabel",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *LabelsServiceInterface_CreateLabel_Call) Run(run func(pid interface{}, opt *gitlab.CreateLabelOptions, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_CreateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.CreateLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_CreateLabel_Call) Return(_a0 *gitlab.Label, _a1 *gitlab.Response, _a2 error) *LabelsServiceInterface_CreateLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LabelsServiceInterface_CreateLabel_Call) RunAndReturn(run func(interface{}, *gitlab.CreateLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)) *LabelsServiceInterface_CreateLabel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLabel provides a mock function with given fields: pid, lid, opt, options
func (_m *LabelsServiceInterface) DeleteLabel(pid interface{}, lid interface{}, opt *gitlab.DeleteLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.DeleteLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, lid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.DeleteLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, lid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, *gitlab.DeleteLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, lid, opt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsServiceInterface_DeleteLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabel'
type LabelsServiceInterface_DeleteLabel_Call struct {
	*mock.Call
}

// DeleteLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - opt *gitlab.DeleteLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) DeleteLabel(pid interface{}, lid interface{}, opt interface{}, options ...interface{}) *LabelsServiceInterface_DeleteLabel_Call {
	return &LabelsServiceInterface_DeleteLabel_Call{Call: _e.mock.On("DeleteLabel",
		append([]interface{}{pid, lid, opt}, options...)...)}
}

func (_c *LabelsServiceInterface_DeleteLabel_Call) Run(run func(pid interface{}, lid interface{}, opt *gitlab.DeleteLabelOptions, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_DeleteLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), args[2].(*gitlab.DeleteLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_DeleteLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *LabelsServiceInterface_DeleteLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LabelsServiceInterface_DeleteLabel_Call) RunAndReturn(run func(interface{}, interface{}, *gitlab.DeleteLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *LabelsServiceInterface_DeleteLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabel provides a mock function with given fields: pid, lid, options
func (_m *LabelsServiceInterface) GetLabel(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLabel")
	}

	var r0 *gitlab.Label
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)); ok {
		return rf(pid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Label); ok {
		r0 = rf(pid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, lid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, lid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelsServiceInterface_GetLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabel'
type LabelsServiceInterface_GetLabel_Call struct {
	*mock.Call
}

// GetLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) GetLabel(pid interface{}, lid interface{}, options ...interface{}) *LabelsServiceInterface_GetLabel_Call {
	return &LabelsServiceInterface_GetLabel_Call{Call: _e.mock.On("GetLabel",
		append([]interface{}{pid, lid}, options...)...)}
}

func (_c *LabelsServiceInterface_GetLabel_Call) Run(run func(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_GetLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_GetLabel_Call) Return(_a0 *gitlab.Label, _a1 *gitlab.Response, _a2 error) *LabelsServiceInterface_GetLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LabelsServiceInterface_GetLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)) *LabelsServiceInterface_GetLabel_Call {
	_c.Call.Return(run)
	return _c
}

// ListLabels provides a mock function with given fields: pid, opt, options
func (_m *LabelsServiceInterface) ListLabels(pid interface{}, opt *gitlab.ListLabelsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Label, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLabels")
	}

	var r0 []*gitlab.Label
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListLabelsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Label, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListLabelsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Label); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListLabelsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListLabelsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelsServiceInterface_ListLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLabels'
type LabelsServiceInterface_ListLabels_Call struct {
	*mock.Call
}

// ListLabels is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListLabelsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) ListLabels(pid interface{}, opt interface{}, options ...interface{}) *LabelsServiceInterface_ListLabels_Call {
	return &LabelsServiceInterface_ListLabels_Call{Call: _e.mock.On("ListLabels",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *LabelsServiceInterface_ListLabels_Call) Run(run func(pid interface{}, opt *gitlab.ListLabelsOptions, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_ListLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListLabelsOptions), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_ListLabels_Call) Return(_a0 []*gitlab.Label, _a1 *gitlab.Response, _a2 error) *LabelsServiceInterface_ListLabels_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LabelsServiceInterface_ListLabels_Call) RunAndReturn(run func(interface{}, *gitlab.ListLabelsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Label, *gitlab.Response, error)) *LabelsServiceInterface_ListLabels_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteLabel provides a mock function with given fields: pid, lid, options
func (_m *LabelsServiceInterface) PromoteLabel(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromoteLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, lid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsServiceInterface_PromoteLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteLabel'
type LabelsServiceInterface_PromoteLabel_Call struct {
	*mock.Call
}

// PromoteLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) PromoteLabel(pid interface{}, lid interface{}, options ...interface{}) *LabelsServiceInterface_PromoteLabel_Call {
	return &LabelsServiceInterface_PromoteLabel_Call{Call: _e.mock.On("PromoteLabel",
		append([]interface{}{pid, lid}, options...)...)}
}

func (_c *LabelsServiceInterface_PromoteLabel_Call) Run(run func(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_PromoteLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_PromoteLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *LabelsServiceInterface_PromoteLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LabelsServiceInterface_PromoteLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *LabelsServiceInterface_PromoteLabel_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToLabel provides a mock function with given fields: pid, lid, options
func (_m *LabelsServiceInterface) SubscribeToLabel(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToLabel")
	}

	var r0 *gitlab.Label
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)); ok {
		return rf(pid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Label); ok {
		r0 = rf(pid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, lid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, lid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelsServiceInterface_SubscribeToLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToLabel'
type LabelsServiceInterface_SubscribeToLabel_Call struct {
	*mock.Call
}

// SubscribeToLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) SubscribeToLabel(pid interface{}, lid interface{}, options ...interface{}) *LabelsServiceInterface_SubscribeToLabel_Call {
	return &LabelsServiceInterface_SubscribeToLabel_Call{Call: _e.mock.On("SubscribeToLabel",
		append([]interface{}{pid, lid}, options...)...)}
}

func (_c *LabelsServiceInterface_SubscribeToLabel_Call) Run(run func(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_SubscribeToLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_SubscribeToLabel_Call) Return(_a0 *gitlab.Label, _a1 *gitlab.Response, _a2 error) *LabelsServiceInterface_SubscribeToLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LabelsServiceInterface_SubscribeToLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)) *LabelsServiceInterface_SubscribeToLabel_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeFromLabel provides a mock function with given fields: pid, lid, options
func (_m *LabelsServiceInterface) UnsubscribeFromLabel(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeFromLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, lid, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, lid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, lid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsServiceInterface_UnsubscribeFromLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeFromLabel'
type LabelsServiceInterface_UnsubscribeFromLabel_Call struct {
	*mock.Call
}

// UnsubscribeFromLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) UnsubscribeFromLabel(pid interface{}, lid interface{}, options ...interface{}) *LabelsServiceInterface_UnsubscribeFromLabel_Call {
	return &LabelsServiceInterface_UnsubscribeFromLabel_Call{Call: _e.mock.On("UnsubscribeFromLabel",
		append([]interface{}{pid, lid}, options...)...)}
}

func (_c *LabelsServiceInterface_UnsubscribeFromLabel_Call) Run(run func(pid interface{}, lid interface{}, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_UnsubscribeFromLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_UnsubscribeFromLabel_Call) Return(_a0 *gitlab.Response, _a1 error) *LabelsServiceInterface_UnsubscribeFromLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LabelsServiceInterface_UnsubscribeFromLabel_Call) RunAndReturn(run func(interface{}, interface{}, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *LabelsServiceInterface_UnsubscribeFromLabel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLabel provides a mock function with given fields: pid, lid, opt, options
func (_m *LabelsServiceInterface) UpdateLabel(pid interface{}, lid interface{}, opt *gitlab.UpdateLabelOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, lid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLabel")
	}

	var r0 *gitlab.Label
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.UpdateLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)); ok {
		return rf(pid, lid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, *gitlab.UpdateLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Label); ok {
		r0 = rf(pid, lid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, *gitlab.UpdateLabelOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, lid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, interface{}, *gitlab.UpdateLabelOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, lid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelsServiceInterface_UpdateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLabel'
type LabelsServiceInterface_UpdateLabel_Call struct {
	*mock.Call
}

// UpdateLabel is a helper method to define mock.On call
//   - pid interface{}
//   - lid interface{}
//   - opt *gitlab.UpdateLabelOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *LabelsServiceInterface_Expecter) UpdateLabel(pid interface{}, lid interface{}, opt interface{}, options ...interface{}) *LabelsServiceInterface_UpdateLabel_Call {
	return &LabelsServiceInterface_UpdateLabel_Call{Call: _e.mock.On("UpdateLabel",
		append([]interface{}{pid, lid, opt}, options...)...)}
}

func (_c *LabelsServiceInterface_UpdateLabel_Call) Run(run func(pid interface{}, lid interface{}, opt *gitlab.UpdateLabelOptions, options ...gitlab.RequestOptionFunc)) *LabelsServiceInterface_UpdateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(interface{}), args[2].(*gitlab.UpdateLabelOptions), variadicArgs...)
	})
	return _c
}

func (_c *LabelsServiceInterface_UpdateLabel_Call) Return(_a0 *gitlab.Label, _a1 *gitlab.Response, _a2 error) *LabelsServiceInterface_UpdateLabel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LabelsServiceInterface_UpdateLabel_Call) RunAndReturn(run func(interface{}, interface{}, *gitlab.UpdateLabelOptions, ...gitlab.RequestOptionFunc) (*gitlab.Label, *gitlab.Response, error)) *LabelsServiceInterface_UpdateLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewLabelsServiceInterface creates a new instance of LabelsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLabelsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LabelsServiceInterface {
	mock := &LabelsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
