// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// DORAMetricsServiceInterface is an autogenerated mock type for the DORAMetricsServiceInterface type
type DORAMetricsServiceInterface struct {
	mock.Mock
}

type DORAMetricsServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DORAMetricsServiceInterface) EXPECT() *DORAMetricsServiceInterface_Expecter {
	return &DORAMetricsServiceInterface_Expecter{mock: &_m.Mock}
}

// GetGroupDORAMetrics provides a mock function with given fields: gid, opt, options
func (_m *DORAMetricsServiceInterface) GetGroupDORAMetrics(gid interface{}, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupDORAMetrics")
	}

	var r0 []gitlab.DORAMetric
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error)); ok {
		return rf(gid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) []gitlab.DORAMetric); ok {
		r0 = rf(gid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gitlab.DORAMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(gid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(gid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DORAMetricsServiceInterface_GetGroupDORAMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupDORAMetrics'
type DORAMetricsServiceInterface_GetGroupDORAMetrics_Call struct {
	*mock.Call
}

// GetGroupDORAMetrics is a helper method to define mock.On call
//   - gid interface{}
//   - opt gitlab.GetDORAMetricsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DORAMetricsServiceInterface_Expecter) GetGroupDORAMetrics(gid interface{}, opt interface{}, options ...interface{}) *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call {
	return &DORAMetricsServiceInterface_GetGroupDORAMetrics_Call{Call: _e.mock.On("GetGroupDORAMetrics",
		append([]interface{}{gid, opt}, options...)...)}
}

func (_c *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call) Run(run func(gid interface{}, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc)) *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(gitlab.GetDORAMetricsOptions), variadicArgs...)
	})
	return _c
}

func (_c *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call) Return(_a0 []gitlab.DORAMetric, _a1 *gitlab.Response, _a2 error) *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call) RunAndReturn(run func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error)) *DORAMetricsServiceInterface_GetGroupDORAMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectDORAMetrics provides a mock function with given fields: pid, opt, options
func (_m *DORAMetricsServiceInterface) GetProjectDORAMetrics(pid interface{}, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDORAMetrics")
	}

	var r0 []gitlab.DORAMetric
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) []gitlab.DORAMetric); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gitlab.DORAMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DORAMetricsServiceInterface_GetProjectDORAMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectDORAMetrics'
type DORAMetricsServiceInterface_GetProjectDORAMetrics_Call struct {
	*mock.Call
}

// GetProjectDORAMetrics is a helper method to define mock.On call
//   - pid interface{}
//   - opt gitlab.GetDORAMetricsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *DORAMetricsServiceInterface_Expecter) GetProjectDORAMetrics(pid interface{}, opt interface{}, options ...interface{}) *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call {
	return &DORAMetricsServiceInterface_GetProjectDORAMetrics_Call{Call: _e.mock.On("GetProjectDORAMetrics",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call) Run(run func(pid interface{}, opt gitlab.GetDORAMetricsOptions, options ...gitlab.RequestOptionFunc)) *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(gitlab.GetDORAMetricsOptions), variadicArgs...)
	})
	return _c
}

func (_c *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call) Return(_a0 []gitlab.DORAMetric, _a1 *gitlab.Response, _a2 error) *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call) RunAndReturn(run func(interface{}, gitlab.GetDORAMetricsOptions, ...gitlab.RequestOptionFunc) ([]gitlab.DORAMetric, *gitlab.Response, error)) *DORAMetricsServiceInterface_GetProjectDORAMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewDORAMetricsServiceInterface creates a new instance of DORAMetricsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDORAMetricsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DORAMetricsServiceInterface {
	mock := &DORAMetricsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
